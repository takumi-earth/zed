#!/usr/bin/env bash
# Agentic pre-push guard
# - Validates patch series (CHECKPOINT + cumulative present)
# - Protects main: only workflow files may change on pushes to main
#
# Bypass:
# - Validation: ALLOW_PRE_PUSH_BYPASS=1
# - Main workflow-only restriction: ALLOW_MAIN_CODE_PUSH=1
set -euo pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
ROOT_DIR=$(cd -- "$SCRIPT_DIR/.." && pwd)

# 1) Patch series validation (quick fail if misconfigured)
if [[ "${ALLOW_PRE_PUSH_BYPASS:-0}" != "1" ]]; then
  SERIES="${PATCH_SERIES:-.reapply-patches/macOS-modernization}"
  "$ROOT_DIR/script/validate-patch-setup.sh" --series "$SERIES"
fi

# 2) Protect main: limit changes to workflow-only files
#    Parse refs from stdin: <local ref> <local sha> <remote ref> <remote sha>
#    For each main ref, diff remote..local and ensure paths match allowlist.
if [[ "${ALLOW_MAIN_CODE_PUSH:-0}" != "1" ]]; then
  allow_re='^(\.reapply-patches/|script/|\.githooks/|docs/|test/|AGENTS\.md$)'
  while read -r local_ref local_sha remote_ref remote_sha; do
    # Stop when no more refs (some Git versions pass nothing on dry runs)
    [[ -z "${local_ref:-}" ]] && continue
    # Only check heads pushes that target main (either side)
    case "$local_ref $remote_ref" in
      refs/heads/main*|*refs/heads/main*)
        # When remote_sha is all zeros, use upstream remote tip if available
        base="$remote_sha"
        if [[ "$remote_sha" =~ ^0+$ ]]; then
          # Try origin/main as a best-effort base if remote tip unknown
          base=$(git rev-parse --quiet --verify origin/main || echo "$remote_sha")
        fi
        # Compute changed files between base..local
        changed=$(git diff --name-only "$base" "$local_sha" || true)
        bad=()
        while IFS= read -r f; do
          [[ -z "$f" ]] && continue
          if ! [[ "$f" =~ $allow_re ]]; then
            bad+=("$f")
          fi
        done <<< "$changed"
        if (( ${#bad[@]} > 0 )); then
          echo "[pre-push] Refuses to push non-workflow changes to main:" >&2
          printf '  %s\n' "${bad[@]}" >&2
          echo "Set ALLOW_MAIN_CODE_PUSH=1 to bypass." >&2
          exit 1
        fi
      ;;
    esac
  done
fi

exit 0
