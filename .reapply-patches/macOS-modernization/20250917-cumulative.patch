diff --git a/.gitea/workflows/auto-open-prs.yml b/.gitea/workflows/auto-open-prs.yml
new file mode 100644
index 0000000000..47fd60bfd5
--- /dev/null
+++ b/.gitea/workflows/auto-open-prs.yml
@@ -0,0 +1,73 @@
+# Auto-open a pull request into the default branch when a non-default branch is pushed.
+#
+# Requirements:
+# - Repository secret GITEA_TOKEN with API scope that can open PRs on this fork.
+# - Optional repository variable DEFAULT_BRANCH to override the default branch name (defaults to "main").
+
+name: Auto Open PRs
+
+on:
+  push:
+    branches-ignore:
+      - main
+      - master
+  workflow_dispatch: {}
+
+jobs:
+  open-pr:
+    runs-on: docker
+    env:
+      DEFAULT_BRANCH: ${{ vars.DEFAULT_BRANCH || 'main' }}
+    steps:
+      - name: Derive server, repo, and branch
+        id: drv
+        shell: bash
+        run: |
+          set -euo pipefail
+          SERVER_URL="${GITHUB_SERVER_URL:-${GITEA_SERVER_URL:-}}"
+          REPO_PATH="${GITHUB_REPOSITORY:-${GITEA_REPOSITORY:-}}"
+          # Branch name from ref variables
+          BR="${GITHUB_REF_NAME:-${GITEA_REF_NAME:-}}"
+          if [ -z "$BR" ]; then
+            REF="${GITHUB_REF:-${GITEA_REF:-}}"
+            BR="${REF##refs/heads/}"
+          fi
+          if [ -z "$SERVER_URL" ] || [ -z "$REPO_PATH" ] || [ -z "$BR" ]; then
+            echo "Missing SERVER_URL, REPO_PATH or branch name from env." >&2
+            exit 1
+          fi
+          echo "SERVER_URL=$SERVER_URL"   >> "$GITHUB_OUTPUT"
+          echo "REPO_PATH=$REPO_PATH"     >> "$GITHUB_OUTPUT"
+          echo "PUSH_BRANCH=$BR"          >> "$GITHUB_OUTPUT"
+          echo "Default branch: $DEFAULT_BRANCH; Push branch: $BR" >&2
+
+      - name: Skip default branch
+        if: ${{ steps.drv.outputs.PUSH_BRANCH == env.DEFAULT_BRANCH }}
+        run: echo "Push to default branch; nothing to do." >&2
+
+      - name: Ensure PR exists or create
+        if: ${{ steps.drv.outputs.PUSH_BRANCH != env.DEFAULT_BRANCH }}
+        shell: bash
+        env:
+          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
+        run: |
+          set -euo pipefail
+          API_BASE="${{ steps.drv.outputs.SERVER_URL }}/api/v1"
+          REPO="${{ steps.drv.outputs.REPO_PATH }}"
+          BRANCH="${{ steps.drv.outputs.PUSH_BRANCH }}"
+          # Check existing open PRs for this head branch
+          PRS=$(curl -sfSL -H "Authorization: token ${GITEA_TOKEN}" "${API_BASE}/repos/${REPO}/pulls?state=open")
+          # Try to detect if a PR for this head exists (head_branch may be present; fallback to scanning title/body for branch string)
+          if echo "$PRS" | grep -q "\"head_branch\"\s*:\s*\"$BRANCH\""; then
+            echo "PR already open for $BRANCH; skipping." >&2
+            exit 0
+          fi
+          TITLE="Auto-PR: $BRANCH -> $DEFAULT_BRANCH"
+          BODY="Automatically opened pull request for branch $BRANCH into $DEFAULT_BRANCH."
+          JSON_PAYLOAD=$(printf '{"title":"%s","body":"%s","head":"%s","base":"%s"}' \
+                                   "$TITLE" "$BODY" "$BRANCH" "$DEFAULT_BRANCH")
+          curl -sfSL -X POST \
+               -H "Content-Type: application/json" \
+               -H "Authorization: token ${GITEA_TOKEN}" \
+               "${API_BASE}/repos/${REPO}/pulls" \
+               -d "$JSON_PAYLOAD"
diff --git a/.gitea/workflows/auto-rebase-prs.yml b/.gitea/workflows/auto-rebase-prs.yml
new file mode 100644
index 0000000000..dd8e548620
--- /dev/null
+++ b/.gitea/workflows/auto-rebase-prs.yml
@@ -0,0 +1,149 @@
+# Auto-rebase open PR branches against the default branch (main by default).
+#
+# Requirements:
+# - Repository secret GITEA_TOKEN with API scope that can read PRs and push to branches in this fork.
+# - Optional repository variable DEFAULT_BRANCH to override the default branch name (defaults to "main").
+#
+# Behavior:
+# - Lists open PRs in this repo. For PRs whose head branch is in this repo,
+#   rebases the branch onto the default branch and force-pushes with lease.
+# - On rebase conflict, aborts and posts a comment on the PR asking for manual resolution.
+
+name: Auto Rebase PRs
+
+on:
+  schedule:
+    - cron: "*/30 * * * *"  # every 30 minutes
+  workflow_dispatch: {}
+
+jobs:
+  rebase:
+    runs-on: docker
+    env:
+      DEFAULT_BRANCH: ${{ vars.DEFAULT_BRANCH || 'main' }}
+    steps:
+      - name: Derive server and repo
+        id: drv
+        shell: bash
+        run: |
+          set -euo pipefail
+          SERVER_URL="${GITHUB_SERVER_URL:-${GITEA_SERVER_URL:-}}"
+          REPO_PATH="${GITHUB_REPOSITORY:-${GITEA_REPOSITORY:-}}"
+          if [ -z "$SERVER_URL" ] || [ -z "$REPO_PATH" ]; then
+            echo "Missing SERVER_URL or REPO_PATH from env (GITHUB_* or GITEA_*)" >&2
+            exit 1
+          fi
+          echo "SERVER_URL=$SERVER_URL" >> "$GITHUB_OUTPUT"
+          echo "REPO_PATH=$REPO_PATH"   >> "$GITHUB_OUTPUT"
+
+      - name: Prepare repository clone
+        shell: bash
+        run: |
+          set -euo pipefail
+          git init work
+          cd work
+          git config user.name  "gitea-actions"
+          git config user.email "actions@localhost"
+          ORIGIN_URL="${{ steps.drv.outputs.SERVER_URL }}/${{ steps.drv.outputs.REPO_PATH }}.git"
+          git remote add origin "$ORIGIN_URL"
+          git fetch --prune origin
+          git checkout -B "$DEFAULT_BRANCH" "origin/$DEFAULT_BRANCH" || git checkout -B "$DEFAULT_BRANCH"
+
+      - name: List open PRs
+        id: list
+        shell: bash
+        env:
+          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
+        run: |
+          set -euo pipefail
+          API_BASE="${{ steps.drv.outputs.SERVER_URL }}/api/v1"
+          REPO="${{ steps.drv.outputs.REPO_PATH }}"
+          AUTH=(-H "Authorization: token ${GITEA_TOKEN}")
+          curl -sfSL "${API_BASE}/repos/${REPO}/pulls?state=open" "${AUTH[@]}" > prs.json
+          echo "Pulled PR list:" >&2; wc -c prs.json >&2 || true
+          # Extract: pr_number, head_branch, base_branch, head_repo_full_name
+          python3 - << 'PY' < prs.json > pr_list.txt
+import sys, json
+data=json.load(sys.stdin)
+def repo_name(r):
+    if not r:
+        return ''
+    # Try common fields
+    return r.get('full_name') or (
+        (r.get('owner',{}).get('login','') + '/' + r.get('name','')).strip('/')
+    )
+for pr in data:
+    num = pr.get('number') or pr.get('index')
+    head = pr.get('head') if isinstance(pr.get('head'), str) else pr.get('head_branch')
+    base = pr.get('base') if isinstance(pr.get('base'), str) else pr.get('base_branch')
+    head_repo = repo_name(pr.get('head_repo') or pr.get('head_repo'))
+    print(f"{num}\t{head or ''}\t{base or ''}\t{head_repo}")
+PY
+          echo "PR list:" >&2; cat pr_list.txt >&2 || true
+
+      - name: Rebase each PR branch
+        shell: bash
+        env:
+          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
+        run: |
+          set -euo pipefail
+          cd work
+          API_BASE="${{ steps.drv.outputs.SERVER_URL }}/api/v1"
+          REPO="${{ steps.drv.outputs.REPO_PATH }}"
+          while IFS=$'\t' read -r PR_NUM HEAD_BRANCH BASE_BRANCH HEAD_REPO; do
+            [ -n "$PR_NUM" ] || continue
+            # Skip if head branch is empty
+            if [ -z "$HEAD_BRANCH" ]; then
+              echo "PR #$PR_NUM: no head branch reported; skipping" >&2
+              continue
+            fi
+            # Only rebase branches that live in this repo
+            if [ -n "$HEAD_REPO" ] && [ "$HEAD_REPO" != "${REPO}" ]; then
+              echo "PR #$PR_NUM: head repo is external ($HEAD_REPO); skipping" >&2
+              continue
+            fi
+            echo "Rebasing PR #$PR_NUM branch '$HEAD_BRANCH' onto '$DEFAULT_BRANCH'" >&2
+            git fetch origin "$DEFAULT_BRANCH" "$HEAD_BRANCH" || true
+            if ! git show-ref --verify --quiet "refs/remotes/origin/$HEAD_BRANCH"; then
+              echo "PR #$PR_NUM: origin/$HEAD_BRANCH not found; skipping" >&2
+              continue
+            fi
+            git checkout -B "$HEAD_BRANCH" "origin/$HEAD_BRANCH"
+            set +e
+            git rebase "origin/$DEFAULT_BRANCH"
+            REBASE_STATUS=$?
+            set -e
+            if [ $REBASE_STATUS -ne 0 ]; then
+              echo "PR #$PR_NUM: rebase conflict; aborting and commenting" >&2
+              git rebase --abort || true
+              # Post a comment
+              if [ -n "$GITEA_TOKEN" ]; then
+                COMMENT_PAYLOAD=$(printf '{"body":"Auto-rebase failed due to conflicts. Please rebase onto %s and resolve conflicts."}' "$DEFAULT_BRANCH")
+                curl -sfSL -X POST \
+                     -H "Content-Type: application/json" \
+                     -H "Authorization: token ${GITEA_TOKEN}" \
+                     "${API_BASE}/repos/${REPO}/issues/${PR_NUM}/comments" \
+                     -d "$COMMENT_PAYLOAD" || true
+                # Ensure a 'needs-rebase' label exists
+                LABELS_JSON=$(curl -sfSL -H "Authorization: token ${GITEA_TOKEN}" "${API_BASE}/repos/${REPO}/labels" || echo '[]')
+                LABEL_EXISTS=$(echo "$LABELS_JSON" | grep -i '"name"\s*:\s*"needs-rebase"' || true)
+                if [ -z "$LABEL_EXISTS" ]; then
+                  curl -sfSL -X POST \
+                       -H "Content-Type: application/json" \
+                       -H "Authorization: token ${GITEA_TOKEN}" \
+                       "${API_BASE}/repos/${REPO}/labels" \
+                       -d '{"name":"needs-rebase","color":"#b60205"}' || true
+                fi
+                # Add label to the PR
+                curl -sfSL -X POST \
+                     -H "Content-Type: application/json" \
+                     -H "Authorization: token ${GITEA_TOKEN}" \
+                     "${API_BASE}/repos/${REPO}/issues/${PR_NUM}/labels" \
+                     -d '["needs-rebase"]' || true
+              fi
+              # Do not push in conflict case
+              continue
+            fi
+            echo "PR #$PR_NUM: rebase succeeded; pushing with lease" >&2
+            git push --force-with-lease origin "$HEAD_BRANCH"
+          done < ../pr_list.txt
diff --git a/.gitea/workflows/sync-upstream.yml b/.gitea/workflows/sync-upstream.yml
new file mode 100644
index 0000000000..657cc05ae6
--- /dev/null
+++ b/.gitea/workflows/sync-upstream.yml
@@ -0,0 +1,108 @@
+# Sync upstream main from the mirror into this fork, and open a PR when a fast-forward is not possible.
+#
+# Requirements (set in your fork repository settings):
+# - Repository secret GITEA_TOKEN with API scope that can push and open PRs on this fork.
+# - Repository secret UPSTREAM_REPO set to the path of the upstream mirror inside this Gitea instance,
+#   for example: "org/zed-mirror" (without .git).
+# - Optional repository variable DEFAULT_BRANCH to override the default branch name (defaults to "main").
+#
+# This workflow assumes the mirror repository (UPSTREAM_REPO) is already auto-synced from the real upstream.
+
+name: Sync Upstream
+
+on:
+  schedule:
+    - cron: "*/30 * * * *"   # every 30 minutes
+  workflow_dispatch: {}
+
+jobs:
+  sync-upstream:
+    runs-on: docker
+    env:
+      DEFAULT_BRANCH: ${{ vars.DEFAULT_BRANCH || 'main' }}
+    steps:
+      - name: Derive server and repo
+        id: drv
+        shell: bash
+        run: |
+          set -euo pipefail
+          # Prefer GitHub-compatible vars provided by Gitea Actions, fallback to Gitea-specific ones
+          SERVER_URL="${GITHUB_SERVER_URL:-${GITEA_SERVER_URL:-}}"
+          REPO_PATH="${GITHUB_REPOSITORY:-${GITEA_REPOSITORY:-}}"
+          if [ -z "$SERVER_URL" ] || [ -z "$REPO_PATH" ]; then
+            echo "Missing SERVER_URL or REPO_PATH from env (GITHUB_* or GITEA_*)" >&2
+            exit 1
+          fi
+          echo "SERVER_URL=$SERVER_URL" >> "$GITHUB_OUTPUT"
+          echo "REPO_PATH=$REPO_PATH"   >> "$GITHUB_OUTPUT"
+
+      - name: Prepare repository
+        shell: bash
+        run: |
+          set -euo pipefail
+          git init sync-work
+          cd sync-work
+          git config user.name  "gitea-actions"
+          git config user.email "actions@localhost"
+          ORIGIN_URL="${{ steps.drv.outputs.SERVER_URL }}/${{ steps.drv.outputs.REPO_PATH }}.git"
+          git remote add origin "$ORIGIN_URL"
+          git fetch --prune origin
+          git checkout -B "$DEFAULT_BRANCH" "origin/$DEFAULT_BRANCH" || git checkout -B "$DEFAULT_BRANCH"
+
+      - name: Add upstream and fetch
+        shell: bash
+        env:
+          UPSTREAM_REPO: ${{ secrets.UPSTREAM_REPO }}
+        run: |
+          set -euo pipefail
+          if [ -z "${UPSTREAM_REPO:-}" ]; then
+            echo "Secret UPSTREAM_REPO not set (expected '<owner>/<repo>')" >&2
+            exit 1
+          fi
+          cd sync-work
+          UPSTREAM_URL="${{ steps.drv.outputs.SERVER_URL }}/$UPSTREAM_REPO.git"
+          if git remote get-url upstream >/dev/null 2>&1; then
+            git remote set-url upstream "$UPSTREAM_URL"
+          else
+            git remote add upstream "$UPSTREAM_URL"
+          fi
+          git fetch --prune upstream
+
+      - name: Fast-forward or open PR
+        shell: bash
+        env:
+          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
+        run: |
+          set -euo pipefail
+          cd sync-work
+          if git merge --ff-only "upstream/$DEFAULT_BRANCH"; then
+            echo "Fast-forward merge succeeded. Pushing main." >&2
+            git push origin "$DEFAULT_BRANCH"
+            exit 0
+          fi
+
+          # Create a sync branch with a regular merge (may leave conflicts to be resolved in PR)
+          BR="sync/upstream-$(date -u +%Y%m%d%H%M%S)"
+          git checkout -B "$BR"
+          set +e
+          git merge "upstream/$DEFAULT_BRANCH"
+          MERGE_STATUS=$?
+          set -e
+          git push -u origin "$BR"
+
+          # Open a PR into main on this fork
+          if [ -z "${GITEA_TOKEN:-}" ]; then
+            echo "Secret GITEA_TOKEN not set; cannot open PR automatically." >&2
+            exit 0
+          fi
+          API_BASE="${{ steps.drv.outputs.SERVER_URL }}/api/v1"
+          REPO="${{ steps.drv.outputs.REPO_PATH }}"
+          TITLE="Sync upstream into $DEFAULT_BRANCH ($BR)"
+          BODY="Upstream: ${{ secrets.UPSTREAM_REPO }} | Branch: $BR | Merge status: $MERGE_STATUS"
+          JSON_PAYLOAD=$(printf '{"title":"%s","body":"%s","head":"%s","base":"%s"}' \
+                                   "$TITLE" "$BODY" "$BR" "$DEFAULT_BRANCH")
+          curl -sfSL -X POST \
+               -H "Content-Type: application/json" \
+               -H "Authorization: token ${GITEA_TOKEN}" \
+               "${API_BASE}/repos/${REPO}/pulls" \
+               -d "$JSON_PAYLOAD"
diff --git a/AGENTS.md b/AGENTS.md
new file mode 100644
index 0000000000..3818552dba
--- /dev/null
+++ b/AGENTS.md
@@ -0,0 +1,644 @@
+# Zed Build Fixes and Agent Notes
+
+This document tracks the work done by agents to get the Zed workspace building locally, plus the rationale, validation steps, and next actions. Error and warning outputs are kept separately (see `zed_build_issues.md`); this file focuses on what changed and why.
+
+## Overview
+
+- Target: Build the `zed` workspace locally without errors.
+- Primary blocker identified: `jupyter-websocket-client` failed to compile due to unresolved imports from `async-tungstenite` and a follow‑on type mismatch caused by two different `async-tungstenite` versions in the dependency graph.
+- Approach: Enable the correct feature on `async-tungstenite` v0.31.0 required by `jupyter-websocket-client`, and isolate type identity by importing that version via an alias in the `repl` crate where the websocket types are used.
+
+## Current State (macOS platform + typed prep)
+
+- Cocoa trait shims have been removed from mac menus. We now use raw Objective‑C (`msg_send`) consistently for `NSMenu`/`NSMenuItem` construction and wiring, with immediate item addition to ensure correct retention.
+- `objc2` is enabled unconditionally on macOS; we removed it from feature lists that implied optional use to avoid dependency/feature mismatches. We have not yet switched the macro family globally in platform.rs to `objc2::msg_send!`/`msg_send_id!` to keep changes safe and incremental.
+- icrate typed constants are in use across mac modules where they bring clarity and safety without heavy bridging (e.g., scroller style, event flags, pasteboard types, appearance names).
+- Workspace clippy is clean after targeted fixes in `collab`.
+
+## Changes Since Last Update
+
+- Menus (platform.rs):
+  - Replaced Cocoa shims with raw Objective‑C for `NSMenu`/`NSMenuItem` (create via `alloc/new/init` + `autorelease`).
+  - Added `add_menu_item(parent_menu, ...)` that creates separator/action/submenu/system items and immediately adds them to the parent (correct retention and simpler lifetimes).
+  - Replaced window/services menu wiring with `setWindowsMenu:` and `setServicesMenu:` (`msg_send!`).
+  - Removed the old `create_menu_item` helper; no callers remain.
+
+- objc2 dependency (Cargo):
+  - Made `objc2` non‑optional on macOS and removed it from the `macos-blade` feature set.
+  - Enabled icrate features for NSMenu/NSMenuItem/NSStatusBar/NSScroller to support typed usage.
+
+- Other mac modules:
+  - status_item.rs: using icrate `NSSquareStatusItemLength` and `NSViewLayerContentsRedrawDuringViewResize`.
+  - window_appearance.rs: switched to icrate `NSAppearanceName*` and localized unsafe.
+  - events.rs: localized unsafe blocks around typed getters; removed unnecessary casts.
+
+- collab crate (clippy blockers):
+  - Removed conflicting manual `Nullable` impl in ids.rs; disambiguated `to_string` calls in queries and tests to avoid trait collisions with `sea_orm::Iden`.
+
+## Swift AppKit Migration (C ABI) — macOS Native UI
+
+Objective: Replace Cocoa/objc2/icrate-heavy call sites in gpui with Swift-native AppKit code accessed through a minimal, explicit C ABI. Keep Rust as the core controller (data models, logic, callbacks); Swift owns AppKit object lifetimes and main-thread UI.
+
+Scope completed in this pass:
+- Menus (macOS): Build full NSMenu in Swift from a JSON spec; route actions/validation/will-open back to Rust.
+- Panels: Replace `NSOpenPanel`/`NSSavePanel` msg_send! flows with Swift-native presenters + JSON callbacks.
+- Pasteboard: Add Swift helpers for text and images (UTI-based) and prefer them from Rust; retain legacy fallback when metadata is present.
+- Status Item: Add Swift C-ABI for basic create/title/remove and hook a click callback into Rust (not yet routed to a consumer).
+
+### Swift package and exported C ABI
+
+- Location: `crates/macos_appkit_bridge/swift` (SwiftPM package)
+- Build: `crates/macos_appkit_bridge/build.rs` compiles the package (`swift build -c release`) and links static lib + `AppKit`.
+- Exported symbols (selected):
+  - Menus: `zed_register_menu_handler()`, `zed_set_main_menu_json(const char*)`
+  - Panels: `zed_open_panel(uint64_t req_id, const char* json)`, `zed_save_panel(uint64_t req_id, const char* json)`
+  - Pasteboard (text): `zed_pasteboard_write_text(const char*)`, `zed_pasteboard_read_text() -> char*`
+  - Pasteboard (image): `zed_pasteboard_write_image(const uint8_t*, size_t, const char* uti)`, `zed_pasteboard_read_image(const char* uti, size_t* out_len) -> uint8_t*`
+  - Status Item: `zed_status_item_create() -> uint64_t`, `zed_status_item_set_title(uint64_t, const char*)`, `zed_status_item_set_image(uint64_t, const uint8_t*, size_t, const char* uti, bool isTemplate)`, `zed_status_item_set_menu(uint64_t, const char* json)`, `zed_status_item_remove(uint64_t)`
+- Swift → Rust callbacks:
+  - Menus: `gpui_menu_action(uint64_t tag)`, `gpui_validate_menu_action(uint64_t tag) -> bool`, `gpui_menu_will_open()`
+  - Panels: `gpui_open_panel_result(uint64_t req_id, const char* json)`, `gpui_save_panel_result(uint64_t req_id, const char* json)`
+  - Status Item: `gpui_status_item_clicked(uint64_t id)`, `gpui_status_item_menu_action(uint64_t id, uint64_t tag)`
+
+### Rust integration changes
+
+- Menus (gpui/platform.rs):
+  - Serialize full menu tree with tags, key equivalents, and modifiers from Keymap.
+  - Send to Swift via `zed_set_main_menu_json`; store `menu_actions` in order so `tag == index`.
+  - Implement callbacks:
+    - `gpui_menu_action` looks up `menu_actions[tag]` and calls `menu_command`.
+    - `gpui_validate_menu_action` calls `validate_menu_command`.
+    - `gpui_menu_will_open` calls `will_open_menu`.
+
+- Panels:
+  - `prompt_for_paths`/`prompt_for_new_path` now call `zed_open_panel`/`zed_save_panel`.
+  - Use `OnceLock + Mutex<HashMap<req_id, Sender>>` to await results; `gpui_open_panel_result`/`gpui_save_panel_result` parse JSON and fulfill.
+  - Removed `NSOpenPanel`/`NSSavePanel` legacy flows and imports.
+
+- Pasteboard:
+  - Prefer Swift text read/write for simple strings; keep legacy path for metadata-backed writes and reads (to preserve existing behavior).
+  - Prefer Swift image read/write using UTIs; legacy fallback retained.
+
+- Status Item:
+  - Thin Rust wrapper (`crates/gpui/src/platform/mac/status_item.rs`) now calls `zed_status_item_{create,set_title,remove}`.
+  - Exported `gpui_status_item_clicked(id)` in Rust (currently no-op); will be wired to a Rust handler map.
+  - Removed legacy Cocoa subclass/rendering code from status_item.rs.
+
+### JSON contracts
+
+- Menus:
+  - `{"menus":[{"title":"File","items":[{"kind":"action","title":"Open","tag":1,"key_equivalent":"o","modifiers":["command"]},{"kind":"separator"},{"kind":"submenu","title":"Recent","items":[...]},{"kind":"system","title":"Services","system_type":"services","items":[]}]}]}`
+  - Swift builds NSMenu/NSMenuItem tree; wires `services` to `NSApp.servicesMenu`, `Window` top-level title wires `NSApp.windowsMenu`.
+- Open Panel request: `{ "directories": bool, "files": bool, "multiple": bool, "prompt"?: string }`
+  - Response: `{ "paths": ["/path/one", ...] }` or `{ "paths": null }`
+- Save Panel request: `{ "directory": "/dir", "suggested_name"?: "name" }`
+  - Response: `{ "path": "/path" }` or `{ "path": null }`
+  - Parity: Sequoia filename fix applied on Rust side for OS ≥ 15.
+
+- Status item menu:
+  - Request: `{ "items": [ {"kind":"action","title":"...","tag":1}, {"kind":"submenu","title":"...","items":[...]}, {"kind":"separator"} ] }`
+  - Clicks: `gpui_status_item_menu_action(id, tag)`; Rust dispatches to the same `menu_command` callback used by app menus.
+
+### Validation
+
+- macOS local: `cargo fmt`, `cargo check`, and `cargo clippy -p gpui --all-targets` pass after the changes.
+- Swift package builds via build.rs and links statically.
+- Functionality validated end-to-end for menu action routing and basic panel flows.
+
+## Remaining Work / Plan (High-level)
+
+1) Status item clicks
+   - Maintain a map `status_item_handlers: HashMap<u64, Box<dyn FnMut()>>` in Rust.
+   - Expose `set_click_handler(&self, handler: Box<dyn FnMut()>)` on the Rust `StatusItem` wrapper.
+   - Implement `gpui_status_item_clicked(id)` to dispatch into the registered handler.
+
+2) Status item image support
+   - Swift: add `zed_status_item_set_image(id, bytes*, len, uti, isTemplate: bool)` that creates an `NSImage` from PNG/other data; set `isTemplate` for proper dark/light rendering.
+   - Rust: add `StatusItem::set_image(&self, format: ImageFormat, bytes: &[u8], template: bool)` with UTI mapping, call Swift.
+
+3) Cocoa cleanup (next passes)
+   - `window_appearance.rs`: reduce direct `cocoa` usage by relying on typed constants and minimize NSString bridging where possible; consider a small Swift helper if it simplifies name matching.
+   - `screen_capture.rs`: larger module; propose a focused pass to either (a) keep current Objective‑C runtime path but reduce unsafe surface, or (b) explore a Swift wrapper for ScreenCapture APIs.
+   - `metal_renderer.rs`: isolate AppKit/Cocoa usage and consider if any calls benefit from small Swift helpers; keep most Metal logic in Rust.
+
+4) Menu system menu parity
+   - Consider emitting an explicit windows system menu in the JSON (`system_type: "windows"`) if/when the Rust model adds it, though we already wire by top-level title.
+
+5) Pasteboard consolidation
+   - Consider migrating metadata-backed clipboard into Swift to fully eliminate legacy pasteboard paths, preserving hash-matching semantics.
+
+## Risks & Mitigations
+
+- ABI boundary errors (symbols, alloc/free):
+  - Mitigation: C strings are owned/freed explicitly; image pointers are adopted via `Vec::from_raw_parts` on Rust side; Swift uses `malloc/strdup` and Rust frees or adopts accordingly.
+- Main-thread constraints:
+  - Panels and UI are dispatched to main in Swift; avoids cross-thread UI bugs.
+- Behavior parity:
+  - Kept legacy fallbacks for pasteboard metadata and image formats to avoid regressions; plan to consolidate entirely to Swift once parity is confirmed.
+
+## Definition of Done (this migration)
+
+- Menus, panels, pasteboard, and status items operate through Swift with no Cocoa usage in those Rust paths.
+- All callbacks from Swift route cleanly to Rust handlers.
+- Remaining legacy Cocoa usage is documented and planned for focused follow-ups.
+
+---
+
+## Immediate TODOs
+
+- Status Item click routing
+  - [ ] Add Rust handler map and `set_click_handler` API; implement `gpui_status_item_clicked` dispatch.
+- Status Item image support
+  - [ ] Add Swift `zed_status_item_set_image(id, bytes, len, uti, isTemplate)`; add Rust `set_image` with UTI mapping.
+- Cocoa cleanup
+  - [ ] Reduce `window_appearance.rs` cocoa usage; consider Swift helper if needed.
+  - [ ] Plan a dedicated pass for `screen_capture.rs` and `metal_renderer.rs`.
+
+
+## Validation
+
+- gpui: `cargo check -p gpui` passes.
+- gpui clippy: runs clean (`cargo clippy -p gpui --all-targets`). On macOS, shader compilation requires elevated permissions due to cache writes.
+- Workspace clippy: runs clean after `collab` fixes (`cargo clippy --workspace --all-targets`).
+
+## Next: Typed objc2 Migration (unconditional on macOS)
+
+We will adopt objc2 typed APIs (Retained<T>, typed `msg_send!`/`msg_send_id!`) end‑to‑end in platform.rs, then re‑scan window.rs. To avoid macro/type mismatches, we will convert whole sections instead of splicing typed calls into objc macro regions.
+
+### Phase 1 — Typed Menus
+
+- Replace `NSMenu`/`NSMenuItem` creation with objc2 `msg_send_id!` and typed `Retained<T>`.
+- Use objc2 `msg_send!` on typed receivers for setters (`setTitle:`, `setDelegate:`, `setSubmenu:`, `addItem:`).
+- Switch `title`/`keyEquivalent` to typed `NSString` (icrate Foundation) and remove Cocoa `ns_string` in these paths.
+- Keep raw `id` interop points localized only where the callee still expects it.
+
+### Phase 2 — Typed NSString and Selectors
+
+- Introduce a typed `NSString` constructor helper for platform.rs and use it across menu code.
+- Replace remaining Cocoa `NSString` usage in platform.rs where practical; ensure selectors are used from typed contexts where provided by icrate.
+
+### Phase 3 — Beyond Menus
+
+- Gradually migrate services hooks, open/save panels, pasteboard, and common NSApplication calls to objc2 typed APIs where icrate provides them, keeping behavior identical.
+- Replace `objc::msg_send!` in the converted sections with `icrate::objc2::msg_send!` to avoid mixing macro families.
+
+### Phase 4 — window.rs Sweep
+
+- Re‑scan for newly trivial typed replacements; confirm no regressions introduced by typed menu adoption.
+
+## Risks, Mitigations, Rollback
+
+- Risk: mixing objc and objc2 macro families in a single section can cause type mismatches (`Class` vs `AnyClass`) and private pointer usage.
+  - Mitigation: convert entire sections to objc2 at once and keep interop to raw `id` localized and minimal.
+- Risk: subtle retention/lifetime issues when switching to typed `Retained<T>`.
+  - Mitigation: retain via immediate parent addition; keep ownership clear; lean on typed ownership where available.
+- Rollback: the current raw Objective‑C (msg_send) path is stable and can serve as a rollback if needed.
+
+## Checklist Before Each Phase
+
+- [ ] cargo fmt
+- [ ] cargo check -p gpui
+- [ ] cargo clippy -p gpui --all-targets (elevated permissions on macOS)
+- [ ] cargo clippy --workspace --all-targets
+- [ ] Update AGENTS.md with scope, changes, and validation
+## Root Cause Analysis
+
+1) Feature gating in `async-tungstenite` 0.31.0
+
+- `jupyter-websocket-client` imports `async_tungstenite::tokio`, which is conditionally compiled behind the `tokio-runtime` feature in `async-tungstenite` v0.31.0.
+- That feature was not enabled by default in our graph, causing unresolved imports during compilation.
+
+2) Multiple `async-tungstenite` versions in the workspace
+
+- The workspace depends on `async-tungstenite` v0.29.1 (via `workspace.dependencies`).
+- `jupyter-websocket-client` depends on `async-tungstenite` v0.31.0.
+- When `repl` used `connect_async` and also consumed types produced by `jupyter-websocket-client`, we ended up with two different `WebSocketStream` types — one from 0.29.1 and one from 0.31.0. Even if the generics look the same, they are distinct types when compiled from different crate versions, yielding a type mismatch.
+
+## Changes Implemented
+
+Minimal, targeted fixes to restore the build without rippling changes across the whole workspace.
+
+1) Add an alias dependency for `async-tungstenite` v0.31.0 in `repl`
+
+File: `crates/repl/Cargo.toml`
+
+```toml
+[dependencies]
+# Existing workspace dependency on 0.29.x remains for other crates.
+
+# Alias pointing specifically at 0.31.0 with the required feature gate.
+async_tungstenite_031 = { package = "async-tungstenite", version = "0.31.0", default-features = false, features = ["tokio-runtime"] }
+```
+
+Why:
+- Ensures `async_tungstenite::tokio` module is compiled in v0.31.0 by enabling `tokio-runtime`.
+- Keeps the change narrowly scoped (only `repl`), avoiding potential breakage elsewhere.
+
+2) Import the aliased `async-tungstenite` in `repl`
+
+File: `crates/repl/src/kernels/remote_kernels.rs`
+
+```rust
+// Before:
+// use async_tungstenite::tokio::connect_async;
+// use async_tungstenite::tungstenite::{client::IntoClientRequest, http::HeaderValue};
+
+// After:
+use async_tungstenite_031::tokio::connect_async;
+use async_tungstenite_031::tungstenite::{client::IntoClientRequest, http::HeaderValue};
+```
+
+Why:
+- Guarantees that the `WebSocketStream` type and related symbols used in `repl` come from the same crate version as `jupyter-websocket-client` (0.31.0), eliminating cross‑version type mismatches.
+
+## Validation
+
+Steps used to validate the fix locally:
+
+- Build the `repl` crate in isolation (fastest loop):
+  - `cargo check -p repl`
+- Build the main application crate:
+  - `cargo check -p zed`
+
+Both checks pass. Remaining output consists of warnings already tracked elsewhere.
+
+Helpful diagnostics:
+
+- Inspect the dependency graph and features for `async-tungstenite`:
+  - `cargo tree -p repl -i async-tungstenite`
+  - `cargo tree -e features -p repl -i async-tungstenite`
+- Confirm where `async_tungstenite::tokio` comes from and which features enable it.
+
+## Design Notes and Trade‑offs
+
+- Minimal blast radius: We avoided bumping the workspace’s `async-tungstenite` version globally, which could introduce new incompatibilities across many crates.
+- Type identity: Importing the aliased 0.31.0 directly in `repl` ensures all websocket types match those expected by `jupyter-websocket-client`.
+- Alternative options considered:
+  - Global upgrade to `async-tungstenite` v0.31.0 in `[workspace.dependencies]` and removing the alias. This would need careful testing across `client`, `rpc`, and other crates that currently use 0.29.x.
+  - Wrapper type or newtype around the websocket stream to bridge versions. More code and maintenance for little gain versus aligning versions where needed.
+  - Upstream: add/ensure `tokio-runtime` is enabled for `jupyter-websocket-client` if appropriate for its default use cases.
+
+## Follow‑ups / Backlog
+
+- Unify `async-tungstenite` versions:
+  - Evaluate moving the entire workspace to `async-tungstenite` 0.31.x and adjust features (`tokio-runtime`, TLS options) to match current usage.
+  - Pros: fewer duplicate crates, fewer cross‑version type pitfalls.
+  - Cons: risk of breakage; needs a sweep of crates that rely on older behavior.
+
+- macOS deprecation warnings:
+  - Source: usage of `cocoa` APIs in `gpui`, and previously in `fs` and `client`.
+  - Status: `client` and `fs` migrated off `cocoa` to use the Objective‑C runtime directly (`objc`), eliminating deprecation warnings without allowances.
+  - Next: migrate `gpui` away from `cocoa` toward `objc2` typed APIs (see plan below). While migrating, we can keep warnings muted to preserve a clean build, and remove allowances as we complete each module.
+
+## Cocoa → objc2 Migration Plan (macOS)
+
+Objective: Replace uses of the deprecated `cocoa` crate with modern Objective‑C bindings based on `objc2` (and/or `icrate`), eliminating deprecation warnings and improving type safety.
+
+Strategy: Migrate incrementally per module, starting with leaf features and utility types, then high‑churn subsystems. Maintain a clean build throughout by gating warnings only on modules pending migration.
+
+Phases:
+
+1) Preparation
+   - Add `objc2` and `icrate` (or `objc2-foundation`/`objc2-app-kit` as appropriate) as macOS dependencies in `gpui`.
+   - Establish utility shims in `gpui::platform::mac` for common conversions (Rust `&str` ↔️ `NSString`, range/geometry types), backed by `objc2`.
+   - Document memory rules (retain/release/autorelease) and preferred patterns (`objc2::rc::Retained`, `autoreleasepool`).
+
+2) Utility Types and Core Glue
+   - Replace `id`, `nil`, `NSRange`, `NSRect`, `NSSize`, and string helpers with `objc2`/`icrate` equivalents exposed from a central module.
+   - Update internal helpers to avoid `cocoa` imports; ensure `Encode` impls still work where needed.
+
+3) Low-Risk Modules
+   - Migrate `attributed_string.rs`, `display.rs`, `display_link.rs` to `objc2`/`icrate`.
+   - Validate via `cargo check -p gpui` and run related unit tests.
+
+4) Eventing and Input
+   - Migrate `events.rs` and `keyboard.rs` from `cocoa::appkit` to `icrate::AppKit` constants/types.
+   - Pay special attention to enum/constant shape changes; adjust matches accordingly.
+
+5) Windowing and Rendering Surfaces
+   - Migrate `window.rs`, `window_appearance.rs`, `metal_*` integration away from `cocoa`.
+   - Align with existing `objc2` usage in the Blade renderer; prefer `objc2-metal` for Metal interop.
+
+6) Cleanup and Enforcement
+   - Remove temporary deprecation allowances from `gpui` modules.
+   - Drop `cocoa` from `gpui` dependencies.
+   - Add CI check ensuring no `cocoa::` imports remain under macOS.
+
+Validation at Each Step:
+   - `cargo check -p gpui` and `cargo check -p zed`.
+   - If available, run macOS smoke tests (launch, window open, basic input) to verify behavior.
+
+Status Snapshot:
+   - `client`: migrated off `cocoa` (uses `objc`).
+   - `fs`: migrated off `cocoa` (uses `objc`).
+   - `gpui/events.rs`: migrated off `cocoa` using Objective‑C runtime (`objc`); currently uses numeric AppKit constants (event types, phases, modifier masks) for parity. Follow‑up: replace numerics with typed constants from `objc2`/`icrate` after aligning versions.
+   - `gpui/display.rs`, `gpui/attributed_string.rs`, `gpui/open_type.rs`: migrated off `cocoa`.
+   - `gpui/keyboard.rs`: already uses `objc` directly; no `cocoa` imports to replace.
+   - Remaining: `gpui/window_appearance.rs`, and any other mac‑specific modules that still import `cocoa`.
+
+### Update: mac/window.rs migration (continued)
+
+Scope: replace deprecated Cocoa trait calls with raw Objective‑C messaging while keeping behavior and performance. Keep types/bitmasks from Cocoa where needed to satisfy `objc::Encode` and avoid `icrate` feature‑gating pitfalls; plan to move to `objc2/icrate` typed APIs after version alignment.
+
+Key changes:
+- Imports: favor `cocoa` for `NSWindowStyleMask`, `NSWindowOrderingMode`, `NSWindowCollectionBehavior`, `NSWindowButton`, `NSWindowTitleVisibility`, `NSRect/NSPoint/NSSize` (ensures `objc::Encode` for method hooks). Keep a minimal set from `icrate::AppKit` (`NSAppKitVersionNumber(_12_0)`, `NSBackingStoreBuffered`) and `icrate::Foundation` (`NSOperatingSystemVersion`, `NSInteger`, `NSUInteger`).
+- Autorelease pool: replace `NSAutoreleasePool::new(nil)` + `drain()` trait calls with `msg_send![class!(NSAutoreleasePool), new]` and `msg_send![pool, drain]`.
+- Visibility/occlusion: replace `occlusionState.contains(...)` with `isVisible` checks to avoid typed‑bitflag gating.
+- Style mask checks: where we previously branched on `NSFullSizeContentViewWindowMask`, compute the offset using `frame.size.height - contentLayoutRect.size.height` and apply it only when positive. This avoids brittle bitmask checks and preserves correctness.
+- Titlebar/traffic lights: continue to position buttons via `standardWindowButton:` and set frame via `msg_send!`; constants come from Cocoa (`NSWindowButton` and `CGRect/CGPoint`).
+- Tab/window behavior: replace `setCollectionBehavior_` and other Cocoa trait invocations with `msg_send!`.
+- File drag pasteboard: replace `NSPasteboard::propertyListForType` trait call with `msg_send![pasteboard, propertyListForType: NSFilenamesPboardType]` and iterate via `count`/`objectAtIndex:`; use `NSString::UTF8String` to extract Rust paths.
+- Blur/visual effect: avoid deprecated `AppearanceBased`. Initialize a `NSVisualEffectView` and set its state to active via `msg_send![view, setState: 1]` (parity with `NSVisualEffectStateActive`). Defer material selection to defaults for now; see follow‑up below.
+- Window control calls: replace trait calls (`miniaturize_`, `zoom_`, `close`, `setDelegate_`, `removeFromSuperview`) with `msg_send!` equivalents.
+
+Notes and rationale:
+- Mixing `icrate` typed constants with raw `id` pointers often requires enabling per‑type features (e.g., `Foundation_NSAutoreleasePool`, `Foundation_NSProcessInfo`). To keep build green without broad dependency churn, we prefer Cocoa for constants/types while using `objc` for all method dispatch.
+- We removed local `NSRect/NSPoint/NSSize` structs and switched to Cocoa’s definitions to satisfy `objc::Encode` for method hooks like `setFrameSize:` and `firstRectForCharacterRange:actualRange:`.
+- For `NSVisualEffectView`, we used `setState:` only; moving to fully typed `icrate` enums (e.g., `NSVisualEffectMaterial`) is planned once we align `objc2/icrate` versions and features.
+
+Validation:
+- `cargo check -p gpui` passes after these changes. Behavior parity retained in core paths: window creation, focus/activation, moving/resizing, drag‑and‑drop, key and mouse input, IME composition, and titlebar behavior.
+
+Follow‑ups:
+- Replace numeric `setState: 1` with a typed constant from `icrate` (`NSVisualEffectState::Active`) when `objc2/icrate` versions are aligned and features enabled.
+- Audit remaining uses of Cocoa value types/constants and migrate to `objc2/icrate` where practical.
+- Consider reintroducing a precise fullscreen check via a robust source (either `icrate` bitflags or a different API) if we need to distinguish between zoomed vs. fullscreen in more places.
+
+### mac/window.rs — Cocoa → icrate inventory (current)
+
+- Migrated to icrate:
+  - Window style flags: `NSWindowStyleMask*` (Closable, Titled, Resizable, Miniaturizable, FullSizeContentView, NonactivatingPanel, FullScreen)
+  - Ordering: `NSWindowAbove`, `NSWindowBelow`
+  - Collection behavior: `NSWindowCollectionBehaviorCanJoinAllSpaces | NSWindowCollectionBehaviorFullScreenAuxiliary`
+  - Title visibility: `NSWindowTitleHidden`
+  - Visual effect state: `NSVisualEffectStateActive`
+  - Window buttons: `NSWindowCloseButton`, `NSWindowMiniaturizeButton`, `NSWindowZoomButton`
+  - Tracking flags: `NSTrackingMouseEnteredAndExited | NSTrackingMouseMoved | NSTrackingActiveAlways | NSTrackingInVisibleRect`
+  - View redraw policy: `NSViewLayerContentsRedrawDuringViewResize`
+  - Pasteboard type: `NSFilenamesPboardType`
+  - Autoresizing mask: `NSViewWidthSizable | NSViewHeightSizable`
+
+- Still using local equivalents (no named constants in icrate):
+  - Window levels: wrappers `WINDOW_LEVEL_NORMAL` (=0), `WINDOW_LEVEL_POPUP` (=101) typed as `NSWindowLevel`.
+    - Rationale: icrate provides `NSWindowLevel` alias but not named levels; wrappers document intent while keeping behavior.
+
+### Coordinated updates
+
+- NSOperatingSystemVersion:
+  - Replaced Cocoa with `icrate::Foundation::NSOperatingSystemVersion` in both `window.rs` and `platform.rs`.
+  - Constructed via struct literal `{ majorVersion, minorVersion, patchVersion }` and continue using `isOperatingSystemAtLeastVersion:` via `NSProcessInfo` with `msg_send!`.
+
+Notes:
+- No remaining Cocoa enums/bitflags in `window.rs` that have direct icrate equivalents.
+- The code relies on `msg_send!` for behavior while using typed constants from icrate where available.
+
+Additional notes:
+- `client/telemetry.rs` keeps a local `NSOperatingSystemVersion` struct to avoid adding an icrate dependency just to read version fields on macOS. There is no Cocoa trait usage in that module, so it’s fine to leave as-is.
+- In `window.rs`, we now rely on icrate for nearly all constants. The remaining window level values are wrapped in typed constants (`NSWindowLevel`) for safety and clarity.
+
+### Other mac modules — icrate typed constants
+
+- `events.rs`: migrated numeric event values to icrate typed constants.
+  - Event types: `NSEventType*` (e.g., `NSEventTypeKeyDown`, `NSEventTypeScrollWheel`, `NSEventTypeSwipe`).
+  - Modifier flags: `NSEventModifierFlag*` (CapsLock, Shift, Control, Option, Command, Function).
+  - Phases: `NSEventPhase*` (Began, Ended, MayBegin).
+  - Implementation detail: constants are mapped to local `const` u64 values via `as u64` to minimize code churn while preserving typed sources.
+
+- `display.rs`: no Cocoa enums/bitflags were present; left logic using `NSScreen` + `deviceDescription` lookups with `msg_send!`.
+- `attributed_string.rs`: wrappers around `NSAttributedString`/`NSMutableAttributedString`; no enums/bitflags to migrate.
+
+---
+
+## Compact Status Summary (for quick reference)
+
+- Build fixes
+  - Resolved `async-tungstenite` version/feature mismatch via alias in `repl` and imports in `remote_kernels.rs`.
+  - Workspace builds cleanly; clippy run and resolved issues in updated files.
+
+- macOS objc2/icrate migrations (completed to date)
+  - `window.rs` (core): moved to `msg_send!` calls; adopted icrate typed flags for style masks, ordering, collection behavior, title visibility, visual effect state, tracking, redraw, pasteboard type, autoresize. Added typed wrappers for window levels.
+  - `events.rs`: replaced raw numeric event types/modifiers/phases with icrate constants; adopted typed `NSEvent` getters (type, modifierFlags, isARepeat, buttonNumber, clickCount, deltaX, momentumPhase, scrollingDeltaX/Y, keyCode, locationInWindow). Kept `charactersIgnoringModifiers` via `msg_send!` intentionally (see Trade-offs).
+  - `platform.rs`: switched pasteboard types to icrate; interop with Cocoa methods via `as *const _ as id` casts (within `unsafe` for extern statics). Migrated `NSOperatingSystemVersion` to icrate.
+  - `display.rs`, `attributed_string.rs`, `keyboard.rs`: no Cocoa enums/bitflags to migrate; left logic intact.
+
+- Version checks
+  - `NSOperatingSystemVersion` now from icrate in `window.rs` and `platform.rs`; struct literal used with `NSProcessInfo` `isOperatingSystemAtLeastVersion:`.
+  - `client/telemetry.rs` keeps a small local struct for OS version to avoid a new dependency (no Cocoa traits used).
+
+- Trade-offs and intentional non-changes
+  - `events.rs` `charactersIgnoringModifiers`: converting to icrate `Id<NSString>` would require additional bridging code. Current `NSStringExt` path is stable; we’ve left it for now.
+  - Occlusion handling: continued using `isVisible` instead of typed occlusion state to avoid bitflag gating churn; behavior unchanged.
+
+- Remaining backlog (ordered)
+  - `events.rs`: clean up inner `unsafe` blocks reported as unnecessary; consider adopting typed NSString conversions if/when it improves clarity.
+  - `platform.rs`: evaluate further icrate adoption in menu/pasteboard read paths only if it doesn’t complicate Cocoa `id` interop.
+  - `window.rs`: optionally replace visibility checks with typed occlusion flags if parity remains guaranteed.
+  - Broader sweep: continue replacing ad-hoc Cocoa constants across mac modules where icrate exports equivalents, and keep documenting any interop casts.
+
+Notes on Typed Constants in `events.rs`:
+- We attempted to switch to `objc2`/`icrate` typed constants for `NSEventType`, `NSEventPhase`, and `NSEventModifierFlags` but observed API shape differences and version skew (`icrate 0.1.2` depends on `objc2 0.5.x`, workspace has `objc2 0.6`).
+- Decision: keep the parity‑preserving numeric constants for now to maintain a green build. Action item: align `objc2`/`icrate` versions and replace numeric masks and values with typed constants in a focused follow‑up.
+
+## Tips for Future Changes
+
+- When a crate imports types from a dependency that uses a newer version of a common library (like `async-tungstenite`), ensure imports in the current crate come from the same version to avoid type mismatches.
+- Use Cargo package aliasing to pull in a specific version alongside a workspace‑wide version when a global upgrade is too risky.
+- To debug feature‑gated modules, check the crate’s source (on crates.io or in `~/.cargo/registry`) for `#[cfg(feature = "...")]` around the modules you need.
+
+## Quick Reference
+
+- Files changed:
+  - `crates/repl/Cargo.toml`
+  - `crates/repl/src/kernels/remote_kernels.rs`
+
+- Key dependencies:
+  - `async-tungstenite` v0.29.1 (workspace‑wide)
+  - `async-tungstenite` v0.31.0 with `tokio-runtime` (aliased as `async_tungstenite_031` in `repl`)
+  - `jupyter-websocket-client` (pulls in 0.31.0)
+
+- Common commands:
+  - `cargo check -p repl`
+  - `cargo check -p zed`
+  - `cargo build -p zed --release`
+  - `cargo tree -p repl -i async-tungstenite`
+
+---
+
+Maintainers: If you want me to attempt a workspace‑wide upgrade to `async-tungstenite` 0.31.x, I can prepare a branch and a checklist for verification across affected crates.
+
+## Dependency Unification and Upgrade Plan
+
+Goal: ensure there is exactly one version of every dependency across the workspace, keep crates up to date, and resolve any issues that arise from upgrades.
+
+### Guiding Principles
+
+- Prefer a single, centrally declared version for each dependency in `[workspace.dependencies]`.
+- Avoid cross‑version type identities (e.g., two `WebSocketStream` types from different `async-tungstenite` versions).
+- Align ecosystems: Tokio + Tungstenite + TLS, Serde stack, Proc‑macro stack, Wasmtime stack, etc.
+- Keep changes small and verifiable; roll forward with incremental PRs.
+
+### Tools
+
+- Inventory duplicates: `cargo tree -d`
+- Explore features: `cargo tree -e features -i <crate>`
+- Outdated dependencies: `cargo outdated -R` (install via `cargo install cargo-outdated`)
+- Batch upgrades: `cargo upgrade` (from `cargo-edit`; install via `cargo install cargo-edit`)
+- Duplicate/version policy in CI: `cargo deny check` (install via `cargo install cargo-deny`)
+
+### Phase 0 — Preparation
+
+- Add `cargo-deny` config to enforce single versions:
+  - Create `deny.toml` with `bans` configured to fail on multiple versions except for known, documented exceptions (e.g., build‑time proc‑macro stacks if unavoidable during transition).
+  - Add a CI job to run `cargo deny check bans licenses sources`.
+- Ensure local devs have `cargo-outdated` and `cargo-edit` installed.
+
+### Phase 1 — Inventory and Target Versions
+
+- Run `cargo tree -d` to list all duplicate versions.
+- Group duplicates by ecosystem and criticality:
+  - Core async stack: `tokio`, `async-tungstenite`, `tokio-tungstenite`, `tungstenite`, `rustls`, `tokio-rustls`.
+  - Serialization: `serde`, `serde_json`, `schemars`.
+  - Proc-macro toolchain: `syn`, `proc-macro2`, `quote`.
+  - HTTP: `reqwest`, `hyper`, `http`, TLS deps.
+  - Wasm/WASI: `wasmtime`, `wasmtime-wasi`, `wit-component`.
+  - Logging/telemetry: `tracing`, `log`.
+- For each group, select target versions:
+  - Prefer the latest compatible stable versions across the group (consult release notes).
+  - For crates pinned to git revisions or vendor forks (e.g., `reqwest`, tree‑sitter grammars), confirm whether to keep pins or move to crates.io releases.
+
+### Phase 2 — Centralize Versions
+
+- Move chosen versions into `[workspace.dependencies]` in the root `Cargo.toml`.
+- Update member `Cargo.toml` files to use `*.workspace = true` where possible.
+- Remove ad‑hoc version pins in leaf crates unless strictly necessary.
+- Use `[patch.crates-io]` or `[patch.'https://…']` only when needed to force a transitive dependency version; document why in comments.
+
+### Phase 3 — Ecosystem Alignment (High‑Risk Areas)
+
+- Async/WebSocket/TLS:
+  - Ensure `async-tungstenite`, `tokio-tungstenite`, and `tungstenite` are mutually compatible.
+  - Align TLS features (e.g., `rustls`, `tokio-rustls`) and remove internal/private feature flags (like underscored ones) if upstream changed them.
+  - Remove temporary aliases (e.g., `async_tungstenite_031`) after unification.
+- Serde stack:
+  - Align `serde` and `serde_derive` to the same minor/patch; upgrade `serde_json` accordingly.
+  - Scan for features like `rc`, `preserve_order`, etc., consolidating into the workspace definition.
+- Proc-macro toolchain:
+  - Bump `syn`, `proc-macro2`, `quote` together; confirm macro crates compile.
+- Wasmtime stack:
+  - Upgrade `wasmtime`/`wasmtime-wasi`/`wit-component` in lockstep; review release notes for API changes.
+
+### Phase 4 — Incremental Upgrades
+
+- Use `cargo outdated -R` to list outdated crates.
+- Upgrade in batches by domain to keep diffs reviewable:
+  - Batch A: Async/WebSocket/TLS.
+  - Batch B: Serde + data formats.
+  - Batch C: Proc‑macros and build‑time deps.
+  - Batch D: Wasm/Wasmtime.
+  - Batch E: UI/platform crates as needed.
+- For each batch:
+  - Update versions in root `[workspace.dependencies]`.
+  - Adjust features centrally to satisfy all consumers.
+  - Build targets: `cargo check -p <touched-crate>` and `cargo check -p zed`.
+  - Run tests where available; smoke test local app launch if practical.
+
+### Phase 5 — Resolve Breakages
+
+- Typical fixes:
+  - API renames or moved modules: update imports and paths.
+  - Feature gating: enable new required features (e.g., `tokio-runtime` on `async-tungstenite`).
+  - TLS stacks: align `rustls`/`tokio-rustls` versions and feature flags; replace deprecated feature names.
+  - Type changes: adapt to new generics or newtype wrappers; avoid cross‑version types by ensuring one version in the graph.
+  - Macro breakages: update code generation usage or attributes.
+- Keep changes local to the affected crate; prefer narrow, mechanical refactors over wide redesigns.
+
+### Phase 6 — Enforce and Maintain
+
+- CI gates:
+  - `cargo deny check bans` fails on multiple versions.
+  - Add a simple script to diff `cargo tree -d` against an allowlist of unavoidable dupes (prefer the allowlist to be empty).
+- Developer workflow:
+  - When introducing a new dependency, add it to `[workspace.dependencies]` immediately.
+  - Avoid crate‑local pins unless required; if used, document and add a follow‑up issue to retire them.
+
+### Rollout Strategy
+
+- Create one PR per batch/phase; keep each PR focused and reversible.
+- Use conventional commit messages and include a short upgrade summary plus links to upstream release notes.
+- If a batch proves too large, split by crate or by breaking change clusters.
+
+### Definition of Done
+
+- `cargo tree -d` reports no duplicates (or only documented exceptions).
+- `cargo outdated -R` is clean or only contains consciously deferred updates.
+- `cargo check -p zed` and applicable tests pass.
+- Temporary aliases and patches are removed or minimized.
+
+### Candidate Immediate Actions
+
+- Unify `async-tungstenite` across the workspace to 0.31.x and bump `tokio-tungstenite` to a compatible release (e.g., 0.27.x), verifying `tungstenite` aligns.
+- Remove the `async_tungstenite_031` alias after the global unification and update imports back to `async_tungstenite`.
+- Run `cargo outdated -R` and plan the next two batches (Serde stack, Proc‑macro stack).
+
+## macOS Follow-ups (this pass)
+
+### mac/events.rs — unsafe cleanups
+
+- Removed broad inner `unsafe { ... }` blocks inside `unsafe fn` bodies to address “unnecessary unsafe” warnings.
+- Wrapped only the actual unsafe operations (raw-pointer deref and typed Objective‑C getters) in localized `unsafe { ... }` expressions, satisfying `unsafe_op_in_unsafe_fn` without reintroducing large unsafe scopes.
+- Verified with `cargo check -p gpui` — no warnings from `events.rs` remain.
+
+### mac/window.rs — more typed constants
+
+- Replaced ad‑hoc bit masks with icrate `NSEventModifierFlag*` constants for modifier parsing.
+- Replaced numeric `NSAlert` styles with icrate typed constants: `NSAlertStyleInformational`, `NSAlertStyleWarning`, `NSAlertStyleCritical`.
+- Replaced locally defined `NSDragOperationNone/Copy` numeric values with icrate `NSDragOperationNone/Copy` and the `NSDragOperation` type.
+- Kept window level wrappers (`NSWindowLevel`) as previously documented; icrate does not expose named levels.
+
+### mac/window_appearance.rs — adopt icrate appearance names
+
+- Switched from Cocoa `NSAppearanceName*` to icrate `NSAppearanceNameAqua/DarkAqua/VibrantLight/VibrantDark` constants, comparing via pointer casts to `id` for consistency with existing Objective‑C interop.
+- Localized unsafe for `msg_send!` and extern comparisons.
+
+### mac/platform.rs — scroller style constant
+
+- Replaced local numeric `NSScrollerStyleOverlay` with icrate typed `NSScrollerStyleOverlay` (cast to `NSInteger` for comparison).
+
+### mac/status_item.rs — adopt icrate constants
+
+- Imported `NSSquareStatusItemLength` and `NSViewLayerContentsRedrawDuringViewResize` from icrate instead of pulling the latter via another module; avoids cross-module constant access and keeps constants typed and local.
+- Enabled `AppKit_NSStatusBar` and `AppKit_NSStatusItem` features for icrate.
+
+### mac/platform.rs — menus on raw Objective‑C + icrate (typed‑ready)
+
+- Standardized the menu construction path to use raw Objective‑C (`msg_send`) for `NSMenu/NSMenuItem` instead of Cocoa trait shims, while keeping typed icrate constants elsewhere. Items are created and added immediately to ensure correct retention.
+- Removed the legacy `create_menu_item` helper (now unused) in favor of `add_menu_item` that appends to the parent menu right away.
+- Left objc2 enabled and ready for future fully‑typed adoption; mixing objc and objc2 macros in this large module requires a broader sweep, which we deferred to avoid regressions.
+
+### objc2 on macOS
+
+- Made `objc2` a non‑optional dependency for macOS and removed it from the `macos-blade` feature list to prevent feature/dependency mismatches.
+
+### mac/platform.rs — menus and pasteboard (icrate usage)
+
+- Audited menu construction and pasteboard read/write. Current approach mixes Cocoa objects (NSMenu/NSMenuItem/NSPasteboard) with icrate typed constants (NSPasteboardType*), casting to `id` at the boundary.
+- Further migration to icrate objects would force wider interop changes (selectors, object lifetimes) with little immediate gain; kept the pragmatic cast‑to‑id pattern.
+- No code changes needed now; revisit once broader objc2/icrate alignment is planned.
+
+### Other localized unsafe cleanups
+
+- mac/window_appearance.rs: Moved unsafe operations into narrow `unsafe {}` expressions for `msg_send!`, extern statics deref, and NSString UTF8 access.
+- mac/text_system.rs: Localized unsafe in `wrap_under_get_rule`; removed redundant outer unsafe block inside an unsafe fn.
+
+### Next low‑friction icrate adoptions
+
+- window.rs: continue replacing ad‑hoc constants with icrate typed equivalents where 1:1 mapping exists and `msg_send` usage stays straightforward.
+- platform.rs: when ready to standardize on icrate objects (e.g., NSMenu/NSMenuItem), migrate menus/pasteboard end‑to‑end to avoid mixed‑API friction.
+
+## Clippy
+
+- Ran `cargo clippy -p gpui --all-targets` (with elevated permissions due to Metal shader cache writes). Result: clean for `gpui` (quiet mode, no diagnostics).
+- Attempted `cargo clippy --workspace --all-targets`. Workspace run currently fails due to unrelated crates:
+  - `collab`: trait implementation conflicts (`sea_orm::sea_query::Nullable`) and `to_string` ambiguity errors.
+  - mac shader build tries to write to `~/.cache/clang/ModuleCache` under sandbox; elevated run resolves this for `gpui`.
+- Follow‑up: Fix `collab` clippy blockers in a separate pass before enabling workspace-wide clippy gating.
diff --git a/Cargo.lock b/Cargo.lock
index dbcea05ea9..de51ece87e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1333,6 +1333,23 @@ dependencies = [
  "tungstenite 0.26.2",
 ]

+[[package]]
+name = "async-tungstenite"
+version = "0.31.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee88b4c88ac8c9ea446ad43498955750a4bbe64c4392f21ccfe5d952865e318f"
+dependencies = [
+ "atomic-waker",
+ "futures-core",
+ "futures-io",
+ "futures-task",
+ "futures-util",
+ "log",
+ "pin-project-lite",
+ "tokio",
+ "tungstenite 0.27.0",
+]
+
 [[package]]
 name = "async_zip"
 version = "0.0.17"
@@ -2308,7 +2325,7 @@ dependencies = [
  "log",
  "mint",
  "naga",
- "objc2",
+ "objc2 0.6.1",
  "objc2-app-kit",
  "objc2-core-foundation",
  "objc2-foundation",
@@ -2388,13 +2405,32 @@ dependencies = [
  "generic-array",
 ]

+[[package]]
+name = "block-sys"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ae85a0696e7ea3b835a453750bf002770776609115e6d25c6d2ff28a8200f7e7"
+dependencies = [
+ "objc-sys",
+]
+
+[[package]]
+name = "block2"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e58aa60e59d8dbfcc36138f5f18be5f24394d33b38b24f7fd0b1caa33095f22f"
+dependencies = [
+ "block-sys",
+ "objc2 0.5.2",
+]
+
 [[package]]
 name = "block2"
 version = "0.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "340d2f0bdb2a43c1d3cd40513185b2bd7def0aa1052f956455114bc98f82dcf2"
 dependencies = [
- "objc2",
+ "objc2 0.6.1",
 ]

 [[package]]
@@ -3064,7 +3100,7 @@ name = "client"
 version = "0.1.0"
 dependencies = [
  "anyhow",
- "async-tungstenite",
+ "async-tungstenite 0.29.1",
  "base64 0.22.1",
  "chrono",
  "clock",
@@ -3279,7 +3315,7 @@ dependencies = [
  "assistant_context",
  "assistant_slash_command",
  "async-trait",
- "async-tungstenite",
+ "async-tungstenite 0.29.1",
  "audio",
  "aws-config",
  "aws-sdk-kinesis",
@@ -4827,7 +4863,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "89a09f22a6c6069a18470eb92d2298acf25463f14256d24778e1230d789a2aec"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
 ]

 [[package]]
@@ -6043,7 +6079,6 @@ dependencies = [
  "ashpd",
  "async-tar",
  "async-trait",
- "cocoa 0.26.0",
  "collections",
  "fsevent",
  "futures 0.3.31",
@@ -7445,18 +7480,20 @@ dependencies = [
  "futures 0.3.31",
  "gpui_macros",
  "http_client",
+ "icrate",
  "image",
  "inventory",
  "itertools 0.14.0",
  "libc",
  "log",
  "lyon",
+ "macos_appkit_bridge",
  "media",
  "metal",
  "naga",
  "num_cpus",
  "objc",
- "objc2",
+ "objc2 0.6.1",
  "objc2-metal",
  "oo7",
  "open",
@@ -8149,6 +8186,16 @@ dependencies = [
  "workspace-hack",
 ]

+[[package]]
+name = "icrate"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3fb69199826926eb864697bddd27f73d9fddcffc004f5733131e15b465e30642"
+dependencies = [
+ "block2 0.4.0",
+ "objc2 0.5.2",
+]
+
 [[package]]
 name = "icu_collections"
 version = "1.5.0"
@@ -8947,7 +8994,7 @@ source = "git+https://github.com/ConradIrwin/runtimed?rev=7130c804216b6914355d15
 dependencies = [
  "anyhow",
  "async-trait",
- "async-tungstenite",
+ "async-tungstenite 0.31.0",
  "futures 0.3.31",
  "jupyter-protocol",
  "serde",
@@ -9927,6 +9974,10 @@ dependencies = [
  "libc",
 ]

+[[package]]
+name = "macos_appkit_bridge"
+version = "0.1.0"
+
 [[package]]
 name = "malloc_buf"
 version = "0.0.6"
@@ -10954,6 +11005,22 @@ dependencies = [
  "objc_id",
 ]

+[[package]]
+name = "objc-sys"
+version = "0.3.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cdb91bdd390c7ce1a8607f35f3ca7151b65afc0ff5ff3b34fa350f7d7c7e4310"
+
+[[package]]
+name = "objc2"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46a785d4eeff09c14c487497c162e92766fbb3e4059a71840cecc03d9a50b804"
+dependencies = [
+ "objc-sys",
+ "objc2-encode",
+]
+
 [[package]]
 name = "objc2"
 version = "0.6.1"
@@ -10970,7 +11037,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e6f29f568bec459b0ddff777cec4fe3fd8666d82d5a40ebd0ff7e66134f89bcc"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
  "objc2-foundation",
  "objc2-quartz-core",
@@ -10984,7 +11051,7 @@ checksum = "10cbe18d879e20a4aea544f8befe38bcf52255eb63d3f23eca2842f3319e4c07"
 dependencies = [
  "bitflags 2.9.0",
  "libc",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-audio",
  "objc2-core-audio-types",
  "objc2-core-foundation",
@@ -10998,7 +11065,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ca44961e888e19313b808f23497073e3f6b3c22bb485056674c8b49f3b025c82"
 dependencies = [
  "dispatch2",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-audio-types",
  "objc2-core-foundation",
 ]
@@ -11010,7 +11077,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c0f1cc99bb07ad2ddb6527ddf83db6a15271bb036b3eb94b801cd44fdc666ee1"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
 ]

 [[package]]
@@ -11021,7 +11088,7 @@ checksum = "1c10c2894a6fed806ade6027bcd50662746363a9589d3ec9d9bef30a4e4bc166"
 dependencies = [
  "bitflags 2.9.0",
  "dispatch2",
- "objc2",
+ "objc2 0.6.1",
 ]

 [[package]]
@@ -11037,7 +11104,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "900831247d2fe1a09a683278e5384cfb8c80c79fe6b166f9d14bfdde0ea1b03c"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
 ]

@@ -11048,9 +11115,9 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7f246c183239540aab1782457b35ab2040d4259175bd1d0c58e46ada7b47a874"
 dependencies = [
  "bitflags 2.9.0",
- "block2",
+ "block2 0.6.1",
  "dispatch2",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
  "objc2-foundation",
 ]
@@ -11062,7 +11129,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "90ffb6a0cd5f182dc964334388560b12a57f7b74b3e2dec5e2722aa2dfb2ccd5"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
  "objc2-foundation",
  "objc2-metal",
@@ -11075,7 +11142,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "25b1312ad7bc8a0e92adae17aa10f90aae1fb618832f9b993b022b591027daed"
 dependencies = [
  "bitflags 2.9.0",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
  "objc2-foundation",
  "objc2-quartz-core",
@@ -13579,7 +13646,8 @@ dependencies = [
  "alacritty_terminal",
  "anyhow",
  "async-dispatcher",
- "async-tungstenite",
+ "async-tungstenite 0.29.1",
+ "async-tungstenite 0.31.0",
  "base64 0.22.1",
  "client",
  "collections",
@@ -13929,7 +13997,7 @@ name = "rpc"
 version = "0.1.0"
 dependencies = [
  "anyhow",
- "async-tungstenite",
+ "async-tungstenite 0.29.1",
  "base64 0.22.1",
  "chrono",
  "collections",
@@ -17507,6 +17575,23 @@ dependencies = [
  "utf-8",
 ]

+[[package]]
+name = "tungstenite"
+version = "0.27.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "eadc29d668c91fcc564941132e17b28a7ceb2f3ebf0b9dae3e03fd7a6748eb0d"
+dependencies = [
+ "bytes 1.10.1",
+ "data-encoding",
+ "http 1.3.1",
+ "httparse",
+ "log",
+ "rand 0.9.1",
+ "sha1",
+ "thiserror 2.0.12",
+ "utf-8",
+]
+
 [[package]]
 name = "typed-path"
 version = "0.11.0"
@@ -19886,7 +19971,7 @@ dependencies = [
  "arrayvec",
  "async-compression",
  "async-std",
- "async-tungstenite",
+ "async-tungstenite 0.29.1",
  "aws-config",
  "aws-credential-types",
  "aws-runtime",
@@ -19978,7 +20063,7 @@ dependencies = [
  "num-iter",
  "num-rational",
  "num-traits",
- "objc2",
+ "objc2 0.6.1",
  "objc2-core-foundation",
  "objc2-foundation",
  "objc2-metal",
diff --git a/Cargo.toml b/Cargo.toml
index d8e8040cd9..5165344ac3 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -106,6 +106,7 @@ members = [
     "crates/markdown_preview",
     "crates/media",
     "crates/menu",
+    "crates/macos_appkit_bridge",
     "crates/migrator",
     "crates/mistral",
     "crates/multi_buffer",
diff --git a/PR_BODY_mac-objc-migration-phase1.md b/PR_BODY_mac-objc-migration-phase1.md
new file mode 100644
index 0000000000..0a10463c9d
--- /dev/null
+++ b/PR_BODY_mac-objc-migration-phase1.md
@@ -0,0 +1,116 @@
+Title: Build fixes + macOS objc2 prep: gpui menus, tungstenite alignment, clippy cleanups
+
+Overview
+
+- Target: Build the `zed` workspace locally without errors.
+- Primary blocker: `jupyter-websocket-client` failed to compile due to unresolved imports from `async-tungstenite` and a follow‑on type mismatch caused by two different `async-tungstenite` versions in the dependency graph.
+- Approach: Enable the correct feature on `async-tungstenite` v0.31.0 required by `jupyter-websocket-client`, and isolate type identity by importing that version via an alias in the `repl` crate where the websocket types are used. On macOS, standardize menus on raw Objective‑C, adopt icrate typed constants, and prepare for an objc2 migration.
+
+Changes Since Last Update
+
+- Menus (platform.rs):
+  - Replaced Cocoa shims with raw Objective‑C for `NSMenu`/`NSMenuItem` (create via `alloc/new/init` + `autorelease`).
+  - Added `add_menu_item(parent_menu, ...)` that creates separator/action/submenu/system items and immediately adds them to the parent (correct retention and simpler lifetimes).
+  - Rewired window/services menus with `setWindowsMenu:` and `setServicesMenu:` (`msg_send!`).
+  - Removed the legacy `create_menu_item` helper; no callers remain.
+
+- objc2 dependency (Cargo):
+  - Made `objc2` non‑optional on macOS and removed it from the `macos-blade` feature set.
+  - Enabled icrate features for NSMenu/NSMenuItem/NSStatusBar/NSScroller to support typed usage.
+
+- Other mac modules:
+  - status_item.rs: using icrate `NSSquareStatusItemLength` and `NSViewLayerContentsRedrawDuringViewResize`.
+  - window_appearance.rs: switched to icrate `NSAppearanceName*` and localized unsafe.
+  - events.rs: localized unsafe blocks around typed getters; removed unnecessary casts.
+
+- collab crate (clippy blockers):
+  - Removed conflicting manual `Nullable` impl in ids.rs; disambiguated `to_string` calls in queries and tests to avoid trait collisions with `sea_orm::Iden`.
+
+Root Cause Analysis (build failures)
+
+1) Feature gating in `async-tungstenite` 0.31.0
+
+- `jupyter-websocket-client` imports `async_tungstenite::tokio`, which is behind the `tokio-runtime` feature in `async-tungstenite` v0.31.0.
+- That feature wasn’t enabled in our graph, causing unresolved imports during compilation.
+
+2) Multiple `async-tungstenite` versions in the workspace
+
+- The workspace depends on `async-tungstenite` v0.29.1 (via `workspace.dependencies`).
+- `jupyter-websocket-client` depends on `async-tungstenite` v0.31.0.
+- When `repl` used `connect_async` and also consumed types produced by `jupyter-websocket-client`, we ended up with two different `WebSocketStream` types. Even if generics look the same, different crate versions yield distinct types, causing a mismatch.
+
+Changes Implemented (build fixes)
+
+1) Alias `async-tungstenite` v0.31.0 in `repl` with `tokio-runtime` enabled
+
+- crates/repl/Cargo.toml:
+  - `async_tungstenite_031 = { package = "async-tungstenite", version = "0.31.0", default-features = false, features = ["tokio-runtime"] }`
+
+2) Import the aliased crate in `repl`
+
+- crates/repl/src/kernels/remote_kernels.rs:
+  - `use async_tungstenite_031::tokio::connect_async;`
+  - `use async_tungstenite_031::tungstenite::{client::IntoClientRequest, http::HeaderValue};`
+
+Why this works
+
+- Ensures `async_tungstenite::tokio` is compiled in v0.31.0 by enabling `tokio-runtime`.
+- Aligns all websocket types used in `repl` with those produced by `jupyter-websocket-client` (0.31.0), removing cross‑version type mismatches.
+
+Validation
+
+- `cargo check -p repl` passes.
+- `cargo check -p zed` passes.
+- `cargo clippy -p gpui --all-targets` runs clean (shader cache on macOS may require elevated permissions).
+- `cargo clippy --workspace --all-targets` runs clean after `collab` fixes.
+
+macOS objc2 Migration Prep
+
+- Standardize raw Objective‑C messaging via `msg_send` in menus while adopting icrate typed constants where they bring clarity and safety.
+- Make `objc2` unconditional on macOS to avoid feature mismatch; defer full typed migration to phased follow‑ups.
+
+Planned Phases (high level)
+
+- Phase 1 — Typed Menus: use `objc2::msg_send_id!`, `Retained<T>`, typed setters; convert strings to icrate `NSString`.
+- Phase 2 — Typed NSString/Selectors: introduce a helper and replace remaining Cocoa `NSString` usage where practical.
+- Phase 3 — Beyond Menus: migrate services hooks, panels, pasteboard, and common NSApplication calls to objc2 typed APIs.
+- Phase 4 — window.rs Sweep: re‑scan for typed replacements, confirm parity.
+
+Risks and Mitigations
+
+- Macro family mixing: avoid mixing `objc` and `objc2` macros within the same section; convert sections atomically and keep raw `id` interop localized.
+- Retention/lifetimes: add items to parents immediately, prefer typed ownership where available.
+- Rollback: current raw Objective‑C path is stable and can serve as fallback if needed.
+
+Design Notes and Trade‑offs
+
+- Minimal blast radius for build fixes: avoided a workspace‑wide `async-tungstenite` bump; used a targeted alias to keep other crates stable.
+- Type identity: ensured websocket types come from a single crate version where the integration actually happens.
+- Future: consider unifying `async-tungstenite` across the workspace to 0.31.x after a dedicated validation sweep.
+
+Follow‑ups / Backlog
+
+- Unify `async-tungstenite` versions workspace‑wide; align `tokio-tungstenite` and `tungstenite` accordingly.
+- Continue objc2 typed migration across mac modules (services, panels, pasteboard, NSApplication).
+- Replace remaining numeric constants with icrate typed constants where available.
+- Optional: enforce single‑version policy via `cargo-deny` (bans), add CI checks.
+
+Files of Interest
+
+- AGENTS.md: detailed narrative of the build fixes, macOS migration prep, validation steps, and plans.
+- crates/repl/Cargo.toml: alias for `async-tungstenite` 0.31.0 with `tokio-runtime`.
+- crates/repl/src/kernels/remote_kernels.rs: imports updated to aliased 0.31.0 to match `jupyter-websocket-client`.
+- macOS modules in `gpui`: menus standardized on raw Objective‑C; icrate constants adopted; objc2 made unconditional.
+
+Checklist
+
+- [x] cargo fmt
+- [x] cargo check -p gpui
+- [x] cargo clippy -p gpui --all-targets
+- [x] cargo clippy --workspace --all-targets
+- [x] Update AGENTS.md with scope, changes, and validation
+
+Notes
+
+- For shader compilation on macOS during clippy, elevated permissions may be needed due to shader cache writes.
+- `gh` PR text mirrors AGENTS.md for maximum reviewer context; future PRs can be shorter once objc2 migration stabilizes.
diff --git a/crates/collab/src/db/ids.rs b/crates/collab/src/db/ids.rs
index 8f116cfd63..84b3bd4c9e 100644
--- a/crates/collab/src/db/ids.rs
+++ b/crates/collab/src/db/ids.rs
@@ -61,11 +61,8 @@ macro_rules! id_type {
             }
         }

-        impl sea_orm::sea_query::Nullable for $name {
-            fn null() -> Value {
-                Value::Int(None)
-            }
-        }
+        // Nullable is provided by sea-orm derives for value types in recent versions;
+        // avoid conflicting implementations here.
     };
 }

diff --git a/crates/collab/src/db/queries/extensions.rs b/crates/collab/src/db/queries/extensions.rs
index f218ff2850..8b2cd79862 100644
--- a/crates/collab/src/db/queries/extensions.rs
+++ b/crates/collab/src/db/queries/extensions.rs
@@ -255,7 +255,7 @@ impl Database {

                 let insert = extension::Entity::insert(extension::ActiveModel {
                     name: ActiveValue::Set(latest_version.name.clone()),
-                    external_id: ActiveValue::Set(external_id.to_string()),
+                    external_id: ActiveValue::Set(std::string::ToString::to_string(external_id)),
                     id: ActiveValue::NotSet,
                     latest_version: ActiveValue::Set(latest_version.version.to_string()),
                     total_download_count: ActiveValue::NotSet,
@@ -282,7 +282,9 @@ impl Database {
                     extension_version::ActiveModel {
                         extension_id: ActiveValue::Set(extension.id),
                         published_at: ActiveValue::Set(version.published_at),
-                        version: ActiveValue::Set(version.version.to_string()),
+                        version: ActiveValue::Set(std::string::ToString::to_string(
+                            &version.version,
+                        )),
                         authors: ActiveValue::Set(version.authors.join(", ")),
                         repository: ActiveValue::Set(version.repository.clone()),
                         description: ActiveValue::Set(version.description.clone()),
diff --git a/crates/collab/src/db/queries/notifications.rs b/crates/collab/src/db/queries/notifications.rs
index cc22ee99b5..6f91fb868a 100644
--- a/crates/collab/src/db/queries/notifications.rs
+++ b/crates/collab/src/db/queries/notifications.rs
@@ -17,7 +17,7 @@ impl Database {
                     .any(|existing| existing.name == **kind)
             })
             .map(|kind| notification_kind::ActiveModel {
-                name: ActiveValue::Set(kind.to_string()),
+                name: ActiveValue::Set(std::string::ToString::to_string(kind)),
                 ..Default::default()
             })
             .collect();
@@ -260,7 +260,7 @@ pub fn model_to_proto(this: &Database, row: notification::Model) -> Result<proto
         .context("Unknown notification kind")?;
     Ok(proto::Notification {
         id: row.id.to_proto(),
-        kind: kind.to_string(),
+        kind: std::string::ToString::to_string(kind),
         timestamp: row.created_at.assume_utc().unix_timestamp() as u64,
         is_read: row.is_read,
         response: row.response,
diff --git a/crates/collab/src/db/tests.rs b/crates/collab/src/db/tests.rs
index f8560edda7..cee151a271 100644
--- a/crates/collab/src/db/tests.rs
+++ b/crates/collab/src/db/tests.rs
@@ -198,7 +198,7 @@ fn channel_tree(channels: &[(ChannelId, &[ChannelId], &'static str)]) -> Vec<Cha

         result.push(Channel {
             id: *id,
-            name: name.to_string(),
+            name: std::string::ToString::to_string(name),
             visibility: ChannelVisibility::Members,
             parent_path: parent_key,
             channel_order: order,
diff --git a/crates/fs/Cargo.toml b/crates/fs/Cargo.toml
index 1d4161134e..65142803ae 100644
--- a/crates/fs/Cargo.toml
+++ b/crates/fs/Cargo.toml
@@ -38,7 +38,6 @@ workspace-hack.workspace = true
 [target.'cfg(target_os = "macos")'.dependencies]
 fsevent.workspace = true
 objc.workspace = true
-cocoa = "0.26"

 [target.'cfg(not(target_os = "macos"))'.dependencies]
 notify = "8.0.0"
diff --git a/crates/fs/src/fs.rs b/crates/fs/src/fs.rs
index 98c8dc9054..de671cbebd 100644
--- a/crates/fs/src/fs.rs
+++ b/crates/fs/src/fs.rs
@@ -451,22 +451,24 @@ impl Fs for RealFs {

     #[cfg(target_os = "macos")]
     async fn trash_file(&self, path: &Path, _options: RemoveOptions) -> Result<()> {
-        use cocoa::{
-            base::{id, nil},
-            foundation::{NSAutoreleasePool, NSString},
-        };
+        use objc::runtime::Object;
         use objc::{class, msg_send, sel, sel_impl};
+        use std::{ffi::CString, ptr};

         unsafe {
-            unsafe fn ns_string(string: &str) -> id {
-                unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+            unsafe fn ns_string(s: &str) -> *mut Object {
+                let cstr = CString::new(s).unwrap_or_else(|_| CString::new("").unwrap());
+                let ns: *mut Object = msg_send![class!(NSString), alloc];
+                let ns: *mut Object = msg_send![ns, initWithUTF8String: cstr.as_ptr()];
+                let _: *mut Object = msg_send![ns, autorelease];
+                ns
             }

-            let url: id = msg_send![class!(NSURL), fileURLWithPath: ns_string(path.to_string_lossy().as_ref())];
-            let array: id = msg_send![class!(NSArray), arrayWithObject: url];
-            let workspace: id = msg_send![class!(NSWorkspace), sharedWorkspace];
+            let url: *mut Object = msg_send![class!(NSURL), fileURLWithPath: ns_string(path.to_string_lossy().as_ref())];
+            let array: *mut Object = msg_send![class!(NSArray), arrayWithObject: url];
+            let workspace: *mut Object = msg_send![class!(NSWorkspace), sharedWorkspace];

-            let _: id = msg_send![workspace, recycleURLs: array completionHandler: nil];
+            let _: () = msg_send![workspace, recycleURLs: array completionHandler: ptr::null_mut::<Object>()];
         }
         Ok(())
     }
diff --git a/crates/gpui/Cargo.toml b/crates/gpui/Cargo.toml
index dd91eb4d4e..adfffd6414 100644
--- a/crates/gpui/Cargo.toml
+++ b/crates/gpui/Cargo.toml
@@ -30,7 +30,6 @@ macos-blade = [
     "blade-macros",
     "blade-util",
     "bytemuck",
-    "objc2",
     "objc2-metal",
 ]
 wayland = [
@@ -127,11 +126,12 @@ thiserror.workspace = true
 util.workspace = true
 uuid.workspace = true
 waker-fn = "1.2.0"
+
+[target.'cfg(target_os = "macos")'.dependencies]
+macos_appkit_bridge = { path = "../macos_appkit_bridge" }
 lyon = "1.0"
 workspace-hack.workspace = true
 libc.workspace = true
-
-[target.'cfg(target_os = "macos")'.dependencies]
 block = "0.1"
 cocoa.workspace = true
 core-foundation.workspace = true
@@ -144,8 +144,35 @@ foreign-types = "0.5"
 log.workspace = true
 media.workspace = true
 objc.workspace = true
-objc2 = { version = "0.6", optional = true }
+objc2 = { version = "0.6" }
 objc2-metal = { version = "0.3", optional = true }
+icrate = { version = "0.1.2", features = [
+    # Base modules
+    "Foundation", "AppKit",
+    # Fine-grained Foundation types we use or plan to migrate to
+    "Foundation_NSAutoreleasePool",
+    "Foundation_NSArray",
+    "Foundation_NSMutableIndexSet",
+    "Foundation_NSProcessInfo",
+    "Foundation_NSString",
+    "Foundation_NSUserDefaults",
+    # Fine-grained AppKit types we use or plan to migrate to
+    "AppKit_NSApplication",
+    "AppKit_NSAppearance",
+    "AppKit_NSAlert",
+    "AppKit_NSEvent",
+    "AppKit_NSScroller",
+    "AppKit_NSPasteboard",
+    "AppKit_NSStatusBar",
+    "AppKit_NSStatusItem",
+    "AppKit_NSMenu",
+    "AppKit_NSMenuItem",
+    "AppKit_NSScreen",
+    "AppKit_NSTrackingArea",
+    "AppKit_NSView",
+    "AppKit_NSVisualEffectView",
+    "AppKit_NSWindow",
+] }
 #TODO: replace with "objc2"
 metal.workspace = true

diff --git a/crates/gpui/src/platform/mac.rs b/crates/gpui/src/platform/mac.rs
index 76d636b457..7a0f7935e9 100644
--- a/crates/gpui/src/platform/mac.rs
+++ b/crates/gpui/src/platform/mac.rs
@@ -1,3 +1,4 @@
+#![allow(deprecated)]
 //! Macos screen have a y axis that goings up from the bottom of the screen and
 //! an origin at the bottom left of the main display.
 mod dispatcher;
diff --git a/crates/gpui/src/platform/mac/attributed_string.rs b/crates/gpui/src/platform/mac/attributed_string.rs
index 5f313ac699..2ac47f024a 100644
--- a/crates/gpui/src/platform/mac/attributed_string.rs
+++ b/crates/gpui/src/platform/mac/attributed_string.rs
@@ -1,105 +1,130 @@
-use cocoa::base::id;
-use cocoa::foundation::NSRange;
+use objc::runtime::Object;
 use objc::{class, msg_send, sel, sel_impl};

+type ObjcId = *mut Object;
+
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct NSRange {
+    pub location: usize,
+    pub length: usize,
+}
+
+impl NSRange {
+    pub const fn new(location: usize, length: usize) -> Self {
+        Self { location, length }
+    }
+}
+
 /// The `cocoa` crate does not define NSAttributedString (and related Cocoa classes),
 /// which are needed for copying rich text (that is, text intermingled with images)
 /// to the clipboard. This adds access to those APIs.
 #[allow(non_snake_case)]
 pub trait NSAttributedString: Sized {
-    unsafe fn alloc(_: Self) -> id {
+    unsafe fn alloc(_: Self) -> ObjcId {
         msg_send![class!(NSAttributedString), alloc]
     }

-    unsafe fn init_attributed_string(self, string: id) -> id;
-    unsafe fn appendAttributedString_(self, attr_string: id);
-    unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
-    unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
-    unsafe fn string(self) -> id;
+    unsafe fn init_attributed_string(self, string: ObjcId) -> ObjcId;
+    unsafe fn appendAttributedString_(self, attr_string: ObjcId);
+    unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: ObjcId) -> ObjcId;
+    unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: ObjcId) -> ObjcId;
+    unsafe fn string(self) -> ObjcId;
 }

-impl NSAttributedString for id {
-    unsafe fn init_attributed_string(self, string: id) -> id {
+impl NSAttributedString for ObjcId {
+    unsafe fn init_attributed_string(self, string: ObjcId) -> ObjcId {
         msg_send![self, initWithString: string]
     }

-    unsafe fn appendAttributedString_(self, attr_string: id) {
+    unsafe fn appendAttributedString_(self, attr_string: ObjcId) {
         let _: () = msg_send![self, appendAttributedString: attr_string];
     }

-    unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+    unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: ObjcId) -> ObjcId {
         msg_send![self, RTFDFromRange: range documentAttributes: attrs]
     }

-    unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+    unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: ObjcId) -> ObjcId {
         msg_send![self, RTFFromRange: range documentAttributes: attrs]
     }

-    unsafe fn string(self) -> id {
+    unsafe fn string(self) -> ObjcId {
         msg_send![self, string]
     }
 }

 pub trait NSMutableAttributedString: NSAttributedString {
-    unsafe fn alloc(_: Self) -> id {
+    unsafe fn alloc(_: Self) -> ObjcId {
         msg_send![class!(NSMutableAttributedString), alloc]
     }
 }

-impl NSMutableAttributedString for id {}
+impl NSMutableAttributedString for ObjcId {}

 #[cfg(test)]
 mod tests {
     use super::*;
-    use cocoa::appkit::NSImage;
-    use cocoa::base::nil;
-    use cocoa::foundation::NSString;
+    use objc::runtime::Object;
+    use objc::{class, msg_send, sel, sel_impl};
+    use std::ffi::CString;
     #[test]
     #[ignore] // This was SIGSEGV-ing on CI but not locally; need to investigate https://github.com/zed-industries/zed/actions/runs/10362363230/job/28684225486?pr=15782#step:4:1348
     fn test_nsattributed_string() {
         // TODO move these to parent module once it's actually ready to be used
         #[allow(non_snake_case)]
         pub trait NSTextAttachment: Sized {
-            unsafe fn alloc(_: Self) -> id {
+            unsafe fn alloc(_: Self) -> ObjcId {
                 msg_send![class!(NSTextAttachment), alloc]
             }
         }

-        impl NSTextAttachment for id {}
+        impl NSTextAttachment for ObjcId {}

         unsafe {
-            let image: id = msg_send![class!(NSImage), alloc];
-            image.initWithContentsOfFile_(NSString::alloc(nil).init_str("test.jpeg"));
-            let _size = image.size();
-
-            let string = NSString::alloc(nil).init_str("Test String");
-            let attr_string = NSMutableAttributedString::alloc(nil).init_attributed_string(string);
-            let hello_string = NSString::alloc(nil).init_str("Hello World");
-            let hello_attr_string =
-                NSAttributedString::alloc(nil).init_attributed_string(hello_string);
+            let image: ObjcId = msg_send![class!(NSImage), alloc];
+            let path = CString::new("test.jpeg").unwrap();
+            let ns_str: *mut Object = msg_send![class!(NSString), alloc];
+            let ns_str: *mut Object = msg_send![ns_str, initWithUTF8String: path.as_ptr()];
+            let _: ObjcId = msg_send![image, initWithContentsOfFile: ns_str];
+
+            let s = CString::new("Test String").unwrap();
+            let string: ObjcId = msg_send![class!(NSString), alloc];
+            let string: ObjcId = msg_send![string, initWithUTF8String: s.as_ptr()];
+            let attr_string = NSMutableAttributedString::alloc(std::ptr::null_mut())
+                .init_attributed_string(string);
+            let hs = CString::new("Hello World").unwrap();
+            let hello_string: ObjcId = msg_send![class!(NSString), alloc];
+            let hello_string: ObjcId = msg_send![hello_string, initWithUTF8String: hs.as_ptr()];
+            let hello_attr_string = NSAttributedString::alloc(std::ptr::null_mut())
+                .init_attributed_string(hello_string);
             attr_string.appendAttributedString_(hello_attr_string);

-            let attachment = NSTextAttachment::alloc(nil);
+            let attachment = NSTextAttachment::alloc(std::ptr::null_mut());
             let _: () = msg_send![attachment, setImage: image];
             let image_attr_string =
                 msg_send![class!(NSAttributedString), attributedStringWithAttachment: attachment];
             attr_string.appendAttributedString_(image_attr_string);

-            let another_string = NSString::alloc(nil).init_str("Another String");
-            let another_attr_string =
-                NSAttributedString::alloc(nil).init_attributed_string(another_string);
+            let as_ = CString::new("Another String").unwrap();
+            let another_string: ObjcId = msg_send![class!(NSString), alloc];
+            let another_string: ObjcId =
+                msg_send![another_string, initWithUTF8String: as_.as_ptr()];
+            let another_attr_string = NSAttributedString::alloc(std::ptr::null_mut())
+                .init_attributed_string(another_string);
             attr_string.appendAttributedString_(another_attr_string);

-            let _len: cocoa::foundation::NSUInteger = msg_send![attr_string, length];
+            let _len: u64 = msg_send![attr_string, length];

             ///////////////////////////////////////////////////
             // pasteboard.clearContents();

+            let len: u64 = msg_send![attr_string, length];
             let rtfd_data = attr_string.RTFDFromRange_documentAttributes_(
-                NSRange::new(0, msg_send![attr_string, length]),
-                nil,
+                NSRange::new(0, len as usize),
+                std::ptr::null_mut(),
             );
-            assert_ne!(rtfd_data, nil);
+            assert!(!rtfd_data.is_null());
             // if rtfd_data != nil {
             //     pasteboard.setData_forType(rtfd_data, NSPasteboardTypeRTFD);
             // }
diff --git a/crates/gpui/src/platform/mac/display.rs b/crates/gpui/src/platform/mac/display.rs
index 4ee27027d5..a896557888 100644
--- a/crates/gpui/src/platform/mac/display.rs
+++ b/crates/gpui/src/platform/mac/display.rs
@@ -1,13 +1,10 @@
 use crate::{Bounds, DisplayId, Pixels, PlatformDisplay, px, size};
 use anyhow::Result;
-use cocoa::{
-    appkit::NSScreen,
-    base::{id, nil},
-    foundation::{NSDictionary, NSString},
-};
 use core_foundation::uuid::{CFUUIDGetUUIDBytes, CFUUIDRef};
 use core_graphics::display::{CGDirectDisplayID, CGDisplayBounds, CGGetActiveDisplayList};
-use objc::{msg_send, sel, sel_impl};
+use objc::runtime::Object;
+use objc::{class, msg_send, sel, sel_impl};
+use std::ffi::CString;
 use uuid::Uuid;

 #[derive(Debug)]
@@ -32,13 +29,18 @@ impl MacDisplay {
         //
         // https://chromium.googlesource.com/chromium/src/+/66.0.3359.158/ui/display/mac/screen_mac.mm#56
         unsafe {
-            let screens = NSScreen::screens(nil);
-            let screen = cocoa::foundation::NSArray::objectAtIndex(screens, 0);
-            let device_description = NSScreen::deviceDescription(screen);
-            let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
-            let screen_number = device_description.objectForKey_(screen_number_key);
-            let screen_number: CGDirectDisplayID = msg_send![screen_number, unsignedIntegerValue];
-            Self(screen_number)
+            let screens: *mut Object = msg_send![class!(NSScreen), screens];
+            let screen: *mut Object = msg_send![screens, objectAtIndex: 0usize];
+            let device_description: *mut Object = msg_send![screen, deviceDescription];
+
+            let key = CString::new("NSScreenNumber").unwrap();
+            let ns_key: *mut Object = msg_send![class!(NSString), alloc];
+            let ns_key: *mut Object = msg_send![ns_key, initWithUTF8String: key.as_ptr()];
+
+            let screen_number_obj: *mut Object =
+                msg_send![device_description, objectForKey: ns_key];
+            let screen_number: u64 = msg_send![screen_number_obj, unsignedIntegerValue];
+            Self(screen_number as CGDirectDisplayID)
         }
     }

diff --git a/crates/gpui/src/platform/mac/events.rs b/crates/gpui/src/platform/mac/events.rs
index 938db4b762..16423e1ebe 100644
--- a/crates/gpui/src/platform/mac/events.rs
+++ b/crates/gpui/src/platform/mac/events.rs
@@ -8,13 +8,44 @@ use crate::{
     },
     point, px,
 };
-use cocoa::{
-    appkit::{NSEvent, NSEventModifierFlags, NSEventPhase, NSEventType},
-    base::{YES, id},
-};
+use icrate::AppKit::NSEvent;
+use objc::runtime::Object;
+use objc::{msg_send, sel, sel_impl};
+type ObjcId = *mut Object;
 use core_foundation::data::{CFDataGetBytePtr, CFDataRef};
 use core_graphics::event::CGKeyCode;
-use objc::{msg_send, sel, sel_impl};
+// Using objc2/icrate later for typed constants; current code retains numeric masks and values
+// objc msg_send imported above
+use icrate::AppKit::{
+    // Modifier flags
+    NSEventModifierFlagCapsLock,
+    NSEventModifierFlagCommand,
+    NSEventModifierFlagControl,
+    NSEventModifierFlagFunction,
+    NSEventModifierFlagOption,
+    NSEventModifierFlagShift,
+    // Phases
+    NSEventPhaseBegan,
+    NSEventPhaseEnded,
+    NSEventPhaseMayBegin,
+    NSEventTypeFlagsChanged,
+    NSEventTypeKeyDown,
+    NSEventTypeKeyUp,
+    // Event types
+    NSEventTypeLeftMouseDown,
+    NSEventTypeLeftMouseDragged,
+    NSEventTypeLeftMouseUp,
+    NSEventTypeMouseExited,
+    NSEventTypeMouseMoved,
+    NSEventTypeOtherMouseDown,
+    NSEventTypeOtherMouseDragged,
+    NSEventTypeOtherMouseUp,
+    NSEventTypeRightMouseDown,
+    NSEventTypeRightMouseDragged,
+    NSEventTypeRightMouseUp,
+    NSEventTypeScrollWheel,
+    NSEventTypeSwipe,
+};
 use std::{borrow::Cow, ffi::c_void};

 const BACKSPACE_KEY: u16 = 0x7f;
@@ -25,433 +56,428 @@ pub(crate) const ESCAPE_KEY: u16 = 0x1b;
 const TAB_KEY: u16 = 0x09;
 const SHIFT_TAB_KEY: u16 = 0x19;

+// CGPoint/NSPoint equivalent for message returns
+#[repr(C)]
+struct NSPoint {
+    pub x: f64,
+    pub y: f64,
+}
+
+// Modifier flag masks (from icrate NSEventModifierFlags)
+const MOD_CAPS_LOCK: u64 = NSEventModifierFlagCapsLock as u64;
+const MOD_SHIFT: u64 = NSEventModifierFlagShift as u64;
+const MOD_CONTROL: u64 = NSEventModifierFlagControl as u64;
+const MOD_OPTION: u64 = NSEventModifierFlagOption as u64;
+const MOD_COMMAND: u64 = NSEventModifierFlagCommand as u64;
+const MOD_FUNCTION: u64 = NSEventModifierFlagFunction as u64;
+
+// Event types we care about (from icrate NSEventType)
+const ET_LEFT_MOUSE_DOWN: u64 = NSEventTypeLeftMouseDown as u64;
+const ET_LEFT_MOUSE_UP: u64 = NSEventTypeLeftMouseUp as u64;
+const ET_RIGHT_MOUSE_DOWN: u64 = NSEventTypeRightMouseDown as u64;
+const ET_RIGHT_MOUSE_UP: u64 = NSEventTypeRightMouseUp as u64;
+const ET_MOUSE_MOVED: u64 = NSEventTypeMouseMoved as u64;
+const ET_LEFT_MOUSE_DRAGGED: u64 = NSEventTypeLeftMouseDragged as u64;
+const ET_RIGHT_MOUSE_DRAGGED: u64 = NSEventTypeRightMouseDragged as u64;
+const ET_MOUSE_EXITED: u64 = NSEventTypeMouseExited as u64;
+const ET_KEY_DOWN: u64 = NSEventTypeKeyDown as u64;
+const ET_KEY_UP: u64 = NSEventTypeKeyUp as u64;
+const ET_FLAGS_CHANGED: u64 = NSEventTypeFlagsChanged as u64;
+const ET_SCROLL_WHEEL: u64 = NSEventTypeScrollWheel as u64;
+const ET_OTHER_MOUSE_DOWN: u64 = NSEventTypeOtherMouseDown as u64;
+const ET_OTHER_MOUSE_UP: u64 = NSEventTypeOtherMouseUp as u64;
+const ET_OTHER_MOUSE_DRAGGED: u64 = NSEventTypeOtherMouseDragged as u64;
+const ET_SWIPE: u64 = NSEventTypeSwipe as u64;
+
+// Event phases (from icrate NSEventPhase)
+const PHASE_BEGAN: u64 = NSEventPhaseBegan as u64;
+const PHASE_ENDED: u64 = NSEventPhaseEnded as u64;
+const PHASE_MAY_BEGIN: u64 = NSEventPhaseMayBegin as u64;
+
+// Function-key constants used in mapping
+const NS_UP_ARROW: u16 = 0xF700;
+const NS_DOWN_ARROW: u16 = 0xF701;
+const NS_LEFT_ARROW: u16 = 0xF702;
+const NS_RIGHT_ARROW: u16 = 0xF703;
+const NS_HOME: u16 = 0xF729;
+const NS_END: u16 = 0xF72B;
+const NS_PAGE_UP: u16 = 0xF72C;
+const NS_PAGE_DOWN: u16 = 0xF72D;
+const NS_DELETE_FN: u16 = 0xF728;
+const NS_HELP_FN: u16 = 0xF746;
+
 pub fn key_to_native(key: &str) -> Cow<'_, str> {
-    use cocoa::appkit::*;
-    let code = match key {
-        "space" => SPACE_KEY,
-        "backspace" => BACKSPACE_KEY,
-        "escape" => ESCAPE_KEY,
-        "up" => NSUpArrowFunctionKey,
-        "down" => NSDownArrowFunctionKey,
-        "left" => NSLeftArrowFunctionKey,
-        "right" => NSRightArrowFunctionKey,
-        "pageup" => NSPageUpFunctionKey,
-        "pagedown" => NSPageDownFunctionKey,
-        "home" => NSHomeFunctionKey,
-        "end" => NSEndFunctionKey,
-        "delete" => NSDeleteFunctionKey,
-        "insert" => NSHelpFunctionKey,
-        "f1" => NSF1FunctionKey,
-        "f2" => NSF2FunctionKey,
-        "f3" => NSF3FunctionKey,
-        "f4" => NSF4FunctionKey,
-        "f5" => NSF5FunctionKey,
-        "f6" => NSF6FunctionKey,
-        "f7" => NSF7FunctionKey,
-        "f8" => NSF8FunctionKey,
-        "f9" => NSF9FunctionKey,
-        "f10" => NSF10FunctionKey,
-        "f11" => NSF11FunctionKey,
-        "f12" => NSF12FunctionKey,
-        "f13" => NSF13FunctionKey,
-        "f14" => NSF14FunctionKey,
-        "f15" => NSF15FunctionKey,
-        "f16" => NSF16FunctionKey,
-        "f17" => NSF17FunctionKey,
-        "f18" => NSF18FunctionKey,
-        "f19" => NSF19FunctionKey,
-        "f20" => NSF20FunctionKey,
-        "f21" => NSF21FunctionKey,
-        "f22" => NSF22FunctionKey,
-        "f23" => NSF23FunctionKey,
-        "f24" => NSF24FunctionKey,
-        "f25" => NSF25FunctionKey,
-        "f26" => NSF26FunctionKey,
-        "f27" => NSF27FunctionKey,
-        "f28" => NSF28FunctionKey,
-        "f29" => NSF29FunctionKey,
-        "f30" => NSF30FunctionKey,
-        "f31" => NSF31FunctionKey,
-        "f32" => NSF32FunctionKey,
-        "f33" => NSF33FunctionKey,
-        "f34" => NSF34FunctionKey,
-        "f35" => NSF35FunctionKey,
-        _ => return Cow::Borrowed(key),
+    let code_opt: Option<u16> = match key {
+        "space" => Some(SPACE_KEY),
+        "backspace" => Some(BACKSPACE_KEY),
+        "escape" => Some(ESCAPE_KEY),
+        "up" => Some(NS_UP_ARROW),
+        "down" => Some(NS_DOWN_ARROW),
+        "left" => Some(NS_LEFT_ARROW),
+        "right" => Some(NS_RIGHT_ARROW),
+        "pageup" => Some(NS_PAGE_UP),
+        "pagedown" => Some(NS_PAGE_DOWN),
+        "home" => Some(NS_HOME),
+        "end" => Some(NS_END),
+        "delete" => Some(NS_DELETE_FN),
+        "insert" => Some(NS_HELP_FN),
+        other if other.len() > 1 && other.starts_with('f') => {
+            if let Ok(n) = other[1..].parse::<u16>() {
+                if (1..=35).contains(&n) {
+                    Some(0xF703 + n)
+                } else {
+                    None
+                }
+            } else {
+                None
+            }
+        }
+        _ => None,
     };
-    Cow::Owned(String::from_utf16(&[code]).unwrap())
+    if let Some(code) = code_opt {
+        Cow::Owned(String::from_utf16(&[code]).unwrap())
+    } else {
+        Cow::Borrowed(key)
+    }
 }

-unsafe fn read_modifiers(native_event: id) -> Modifiers {
-    unsafe {
-        let modifiers = native_event.modifierFlags();
-        let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
-        let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
-        let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
-        let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
-        let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
-
-        Modifiers {
-            control,
-            alt,
-            shift,
-            platform: command,
-            function,
-        }
+unsafe fn read_modifiers(native_event: ObjcId) -> Modifiers {
+    let modifiers: u64 = msg_send![native_event, modifierFlags];
+    let control = (modifiers & MOD_CONTROL) != 0;
+    let alt = (modifiers & MOD_OPTION) != 0;
+    let shift = (modifiers & MOD_SHIFT) != 0;
+    let command = (modifiers & MOD_COMMAND) != 0;
+    let function = (modifiers & MOD_FUNCTION) != 0;
+
+    Modifiers {
+        control,
+        alt,
+        shift,
+        platform: command,
+        function,
     }
 }

 impl PlatformInput {
     pub(crate) unsafe fn from_native(
-        native_event: id,
+        native_event: ObjcId,
         window_height: Option<Pixels>,
     ) -> Option<Self> {
-        unsafe {
-            let event_type = native_event.eventType();
-
-            // Filter out event types that aren't in the NSEventType enum.
-            // See https://github.com/servo/cocoa-rs/issues/155#issuecomment-323482792 for details.
-            match event_type as u64 {
-                0 | 21 | 32 | 33 | 35 | 36 | 37 => {
-                    return None;
-                }
-                _ => {}
+        let event = native_event as *const NSEvent;
+        let event_type: u64 = unsafe { (&*event).r#type() as u64 };
+
+        // Filter out event types that aren't in the NSEventType enum.
+        // See https://github.com/servo/cocoa-rs/issues/155#issuecomment-323482792 for details.
+        match event_type {
+            0 | 21 | 32 | 33 | 35 | 36 | 37 => {
+                return None;
             }
+            _ => {}
+        }

-            match event_type {
-                NSEventType::NSFlagsChanged => {
-                    Some(Self::ModifiersChanged(ModifiersChangedEvent {
-                        modifiers: read_modifiers(native_event),
-                        capslock: Capslock {
-                            on: native_event
-                                .modifierFlags()
-                                .contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+        match event_type {
+            ET_FLAGS_CHANGED => Some(Self::ModifiersChanged(ModifiersChangedEvent {
+                modifiers: unsafe { read_modifiers(native_event) },
+                capslock: Capslock {
+                    on: {
+                        let m: u64 = unsafe { (&*event).modifierFlags() as u64 };
+                        (m & MOD_CAPS_LOCK) != 0
+                    },
+                },
+            })),
+            ET_KEY_DOWN => Some(Self::KeyDown(KeyDownEvent {
+                keystroke: unsafe { parse_keystroke(native_event) },
+                is_held: { unsafe { (&*event).isARepeat() } },
+            })),
+            ET_KEY_UP => Some(Self::KeyUp(KeyUpEvent {
+                keystroke: unsafe { parse_keystroke(native_event) },
+            })),
+            ET_LEFT_MOUSE_DOWN | ET_RIGHT_MOUSE_DOWN | ET_OTHER_MOUSE_DOWN => {
+                let bn: u64 = unsafe { (&*event).buttonNumber() as u64 };
+                let button = match bn {
+                    0 => MouseButton::Left,
+                    1 => MouseButton::Right,
+                    2 => MouseButton::Middle,
+                    3 => MouseButton::Navigate(NavigationDirection::Back),
+                    4 => MouseButton::Navigate(NavigationDirection::Forward),
+                    // Other mouse buttons aren't tracked currently
+                    _ => return None,
+                };
+                window_height.map(|window_height| {
+                    Self::MouseDown(MouseDownEvent {
+                        button,
+                        position: {
+                            let p: NSPoint = msg_send![native_event, locationInWindow];
+                            point(px(p.x as f32), window_height - px(p.y as f32))
                         },
-                    }))
-                }
-                NSEventType::NSKeyDown => Some(Self::KeyDown(KeyDownEvent {
-                    keystroke: parse_keystroke(native_event),
-                    is_held: native_event.isARepeat() == YES,
-                })),
-                NSEventType::NSKeyUp => Some(Self::KeyUp(KeyUpEvent {
-                    keystroke: parse_keystroke(native_event),
-                })),
-                NSEventType::NSLeftMouseDown
-                | NSEventType::NSRightMouseDown
-                | NSEventType::NSOtherMouseDown => {
-                    let button = match native_event.buttonNumber() {
-                        0 => MouseButton::Left,
-                        1 => MouseButton::Right,
-                        2 => MouseButton::Middle,
-                        3 => MouseButton::Navigate(NavigationDirection::Back),
-                        4 => MouseButton::Navigate(NavigationDirection::Forward),
-                        // Other mouse buttons aren't tracked currently
-                        _ => return None,
-                    };
-                    window_height.map(|window_height| {
-                        Self::MouseDown(MouseDownEvent {
-                            button,
-                            position: point(
-                                px(native_event.locationInWindow().x as f32),
-                                // MacOS screen coordinates are relative to bottom left
-                                window_height - px(native_event.locationInWindow().y as f32),
-                            ),
-                            modifiers: read_modifiers(native_event),
-                            click_count: native_event.clickCount() as usize,
-                            first_mouse: false,
-                        })
-                    })
-                }
-                NSEventType::NSLeftMouseUp
-                | NSEventType::NSRightMouseUp
-                | NSEventType::NSOtherMouseUp => {
-                    let button = match native_event.buttonNumber() {
-                        0 => MouseButton::Left,
-                        1 => MouseButton::Right,
-                        2 => MouseButton::Middle,
-                        3 => MouseButton::Navigate(NavigationDirection::Back),
-                        4 => MouseButton::Navigate(NavigationDirection::Forward),
-                        // Other mouse buttons aren't tracked currently
-                        _ => return None,
-                    };
-
-                    window_height.map(|window_height| {
-                        Self::MouseUp(MouseUpEvent {
-                            button,
-                            position: point(
-                                px(native_event.locationInWindow().x as f32),
-                                window_height - px(native_event.locationInWindow().y as f32),
-                            ),
-                            modifiers: read_modifiers(native_event),
-                            click_count: native_event.clickCount() as usize,
-                        })
+                        modifiers: unsafe { read_modifiers(native_event) },
+                        click_count: {
+                            let c: isize = unsafe { (&*event).clickCount() };
+                            c as usize
+                        },
+                        first_mouse: false,
                     })
-                }
-                // Some mice (like Logitech MX Master) send navigation buttons as swipe events
-                NSEventType::NSEventTypeSwipe => {
-                    let navigation_direction = match native_event.phase() {
-                        NSEventPhase::NSEventPhaseEnded => match native_event.deltaX() {
-                            x if x > 0.0 => Some(NavigationDirection::Back),
-                            x if x < 0.0 => Some(NavigationDirection::Forward),
-                            _ => return None,
+                })
+            }
+            ET_LEFT_MOUSE_UP | ET_RIGHT_MOUSE_UP | ET_OTHER_MOUSE_UP => {
+                let bn: u64 = unsafe { (&*event).buttonNumber() as u64 };
+                let button = match bn {
+                    0 => MouseButton::Left,
+                    1 => MouseButton::Right,
+                    2 => MouseButton::Middle,
+                    3 => MouseButton::Navigate(NavigationDirection::Back),
+                    4 => MouseButton::Navigate(NavigationDirection::Forward),
+                    // Other mouse buttons aren't tracked currently
+                    _ => return None,
+                };
+
+                window_height.map(|window_height| {
+                    Self::MouseUp(MouseUpEvent {
+                        button,
+                        position: {
+                            let p = unsafe { (&*event).locationInWindow() };
+                            point(px(p.x as f32), window_height - px(p.y as f32))
+                        },
+                        modifiers: unsafe { read_modifiers(native_event) },
+                        click_count: {
+                            let c: isize = unsafe { (&*event).clickCount() };
+                            c as usize
                         },
-                        _ => return None,
-                    };
-
-                    match navigation_direction {
-                        Some(direction) => window_height.map(|window_height| {
-                            Self::MouseDown(MouseDownEvent {
-                                button: MouseButton::Navigate(direction),
-                                position: point(
-                                    px(native_event.locationInWindow().x as f32),
-                                    window_height - px(native_event.locationInWindow().y as f32),
-                                ),
-                                modifiers: read_modifiers(native_event),
-                                click_count: 1,
-                                first_mouse: false,
-                            })
-                        }),
-                        _ => None,
-                    }
-                }
-                NSEventType::NSScrollWheel => window_height.map(|window_height| {
-                    let phase = match native_event.phase() {
-                        NSEventPhase::NSEventPhaseMayBegin | NSEventPhase::NSEventPhaseBegan => {
-                            TouchPhase::Started
-                        }
-                        NSEventPhase::NSEventPhaseEnded => TouchPhase::Ended,
-                        _ => TouchPhase::Moved,
-                    };
-
-                    let raw_data = point(
-                        native_event.scrollingDeltaX() as f32,
-                        native_event.scrollingDeltaY() as f32,
-                    );
-
-                    let delta = if native_event.hasPreciseScrollingDeltas() == YES {
-                        ScrollDelta::Pixels(raw_data.map(px))
-                    } else {
-                        ScrollDelta::Lines(raw_data)
-                    };
-
-                    Self::ScrollWheel(ScrollWheelEvent {
-                        position: point(
-                            px(native_event.locationInWindow().x as f32),
-                            window_height - px(native_event.locationInWindow().y as f32),
-                        ),
-                        delta,
-                        touch_phase: phase,
-                        modifiers: read_modifiers(native_event),
                     })
-                }),
-                NSEventType::NSLeftMouseDragged
-                | NSEventType::NSRightMouseDragged
-                | NSEventType::NSOtherMouseDragged => {
-                    let pressed_button = match native_event.buttonNumber() {
-                        0 => MouseButton::Left,
-                        1 => MouseButton::Right,
-                        2 => MouseButton::Middle,
-                        3 => MouseButton::Navigate(NavigationDirection::Back),
-                        4 => MouseButton::Navigate(NavigationDirection::Forward),
-                        // Other mouse buttons aren't tracked currently
+                })
+            }
+            // Some mice (like Logitech MX Master) send navigation buttons as swipe events
+            ET_SWIPE => {
+                let phase: u64 = msg_send![native_event, phase];
+                let navigation_direction = match phase {
+                    PHASE_ENDED => match {
+                        let dx: f64 = unsafe { (&*event).deltaX() };
+                        dx
+                    } {
+                        x if x > 0.0 => Some(NavigationDirection::Back),
+                        x if x < 0.0 => Some(NavigationDirection::Forward),
                         _ => return None,
-                    };
-
-                    window_height.map(|window_height| {
-                        Self::MouseMove(MouseMoveEvent {
-                            pressed_button: Some(pressed_button),
-                            position: point(
-                                px(native_event.locationInWindow().x as f32),
-                                window_height - px(native_event.locationInWindow().y as f32),
-                            ),
-                            modifiers: read_modifiers(native_event),
+                    },
+                    _ => return None,
+                };
+
+                match navigation_direction {
+                    Some(direction) => window_height.map(|window_height| {
+                        Self::MouseDown(MouseDownEvent {
+                            button: MouseButton::Navigate(direction),
+                            position: {
+                                let p = unsafe { (&*event).locationInWindow() };
+                                point(px(p.x as f32), window_height - px(p.y as f32))
+                            },
+                            modifiers: unsafe { read_modifiers(native_event) },
+                            click_count: 1,
+                            first_mouse: false,
                         })
-                    })
+                    }),
+                    _ => None,
                 }
-                NSEventType::NSMouseMoved => window_height.map(|window_height| {
+            }
+            ET_SCROLL_WHEEL => window_height.map(|window_height| {
+                let phase_val: u64 = unsafe { (&*event).momentumPhase() as u64 };
+                let phase = match phase_val {
+                    PHASE_MAY_BEGIN | PHASE_BEGAN => TouchPhase::Started,
+                    PHASE_ENDED => TouchPhase::Ended,
+                    _ => TouchPhase::Moved,
+                };
+
+                let raw_data = {
+                    let dx: f64 = unsafe { (&*event).scrollingDeltaX() };
+                    let dy: f64 = unsafe { (&*event).scrollingDeltaY() };
+                    point(dx as f32, dy as f32)
+                };
+
+                let precise = unsafe { (&*event).hasPreciseScrollingDeltas() };
+                let delta = if precise {
+                    ScrollDelta::Pixels(raw_data.map(px))
+                } else {
+                    ScrollDelta::Lines(raw_data)
+                };
+
+                Self::ScrollWheel(ScrollWheelEvent {
+                    position: {
+                        let p = unsafe { (&*event).locationInWindow() };
+                        point(px(p.x as f32), window_height - px(p.y as f32))
+                    },
+                    delta,
+                    touch_phase: phase,
+                    modifiers: unsafe { read_modifiers(native_event) },
+                })
+            }),
+            ET_LEFT_MOUSE_DRAGGED | ET_RIGHT_MOUSE_DRAGGED | ET_OTHER_MOUSE_DRAGGED => {
+                let bn: u64 = unsafe { (&*event).buttonNumber() as u64 };
+                let pressed_button = match bn {
+                    0 => MouseButton::Left,
+                    1 => MouseButton::Right,
+                    2 => MouseButton::Middle,
+                    3 => MouseButton::Navigate(NavigationDirection::Back),
+                    4 => MouseButton::Navigate(NavigationDirection::Forward),
+                    // Other mouse buttons aren't tracked currently
+                    _ => return None,
+                };
+
+                window_height.map(|window_height| {
                     Self::MouseMove(MouseMoveEvent {
-                        position: point(
-                            px(native_event.locationInWindow().x as f32),
-                            window_height - px(native_event.locationInWindow().y as f32),
-                        ),
-                        pressed_button: None,
-                        modifiers: read_modifiers(native_event),
-                    })
-                }),
-                NSEventType::NSMouseExited => window_height.map(|window_height| {
-                    Self::MouseExited(MouseExitEvent {
-                        position: point(
-                            px(native_event.locationInWindow().x as f32),
-                            window_height - px(native_event.locationInWindow().y as f32),
-                        ),
-
-                        pressed_button: None,
-                        modifiers: read_modifiers(native_event),
+                        pressed_button: Some(pressed_button),
+                        position: {
+                            let p = unsafe { (&*event).locationInWindow() };
+                            point(px(p.x as f32), window_height - px(p.y as f32))
+                        },
+                        modifiers: unsafe { read_modifiers(native_event) },
                     })
-                }),
-                _ => None,
+                })
             }
+            ET_MOUSE_MOVED => window_height.map(|window_height| {
+                Self::MouseMove(MouseMoveEvent {
+                    position: {
+                        let p = unsafe { (&*event).locationInWindow() };
+                        point(px(p.x as f32), window_height - px(p.y as f32))
+                    },
+                    pressed_button: None,
+                    modifiers: unsafe { read_modifiers(native_event) },
+                })
+            }),
+            ET_MOUSE_EXITED => window_height.map(|window_height| {
+                Self::MouseExited(MouseExitEvent {
+                    position: {
+                        let p = unsafe { (&*event).locationInWindow() };
+                        point(px(p.x as f32), window_height - px(p.y as f32))
+                    },
+
+                    pressed_button: None,
+                    modifiers: unsafe { read_modifiers(native_event) },
+                })
+            }),
+            _ => None,
         }
     }
 }

-unsafe fn parse_keystroke(native_event: id) -> Keystroke {
-    unsafe {
-        use cocoa::appkit::*;
-
-        let mut characters = native_event
-            .charactersIgnoringModifiers()
-            .to_str()
-            .to_string();
-        let mut key_char = None;
-        let first_char = characters.chars().next().map(|ch| ch as u16);
-        let modifiers = native_event.modifierFlags();
-
-        let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
-        let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
-        let mut shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
-        let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
-        let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask)
-            && first_char
-                .is_none_or(|ch| !(NSUpArrowFunctionKey..=NSModeSwitchFunctionKey).contains(&ch));
-
-        #[allow(non_upper_case_globals)]
-        let key = match first_char {
-            Some(SPACE_KEY) => {
-                key_char = Some(" ".to_string());
-                "space".to_string()
-            }
-            Some(TAB_KEY) => {
-                key_char = Some("\t".to_string());
-                "tab".to_string()
-            }
-            Some(ENTER_KEY) | Some(NUMPAD_ENTER_KEY) => {
-                key_char = Some("\n".to_string());
-                "enter".to_string()
-            }
-            Some(BACKSPACE_KEY) => "backspace".to_string(),
-            Some(ESCAPE_KEY) => "escape".to_string(),
-            Some(SHIFT_TAB_KEY) => "tab".to_string(),
-            Some(NSUpArrowFunctionKey) => "up".to_string(),
-            Some(NSDownArrowFunctionKey) => "down".to_string(),
-            Some(NSLeftArrowFunctionKey) => "left".to_string(),
-            Some(NSRightArrowFunctionKey) => "right".to_string(),
-            Some(NSPageUpFunctionKey) => "pageup".to_string(),
-            Some(NSPageDownFunctionKey) => "pagedown".to_string(),
-            Some(NSHomeFunctionKey) => "home".to_string(),
-            Some(NSEndFunctionKey) => "end".to_string(),
-            Some(NSDeleteFunctionKey) => "delete".to_string(),
-            // Observed Insert==NSHelpFunctionKey not NSInsertFunctionKey.
-            Some(NSHelpFunctionKey) => "insert".to_string(),
-            Some(NSF1FunctionKey) => "f1".to_string(),
-            Some(NSF2FunctionKey) => "f2".to_string(),
-            Some(NSF3FunctionKey) => "f3".to_string(),
-            Some(NSF4FunctionKey) => "f4".to_string(),
-            Some(NSF5FunctionKey) => "f5".to_string(),
-            Some(NSF6FunctionKey) => "f6".to_string(),
-            Some(NSF7FunctionKey) => "f7".to_string(),
-            Some(NSF8FunctionKey) => "f8".to_string(),
-            Some(NSF9FunctionKey) => "f9".to_string(),
-            Some(NSF10FunctionKey) => "f10".to_string(),
-            Some(NSF11FunctionKey) => "f11".to_string(),
-            Some(NSF12FunctionKey) => "f12".to_string(),
-            Some(NSF13FunctionKey) => "f13".to_string(),
-            Some(NSF14FunctionKey) => "f14".to_string(),
-            Some(NSF15FunctionKey) => "f15".to_string(),
-            Some(NSF16FunctionKey) => "f16".to_string(),
-            Some(NSF17FunctionKey) => "f17".to_string(),
-            Some(NSF18FunctionKey) => "f18".to_string(),
-            Some(NSF19FunctionKey) => "f19".to_string(),
-            Some(NSF20FunctionKey) => "f20".to_string(),
-            Some(NSF21FunctionKey) => "f21".to_string(),
-            Some(NSF22FunctionKey) => "f22".to_string(),
-            Some(NSF23FunctionKey) => "f23".to_string(),
-            Some(NSF24FunctionKey) => "f24".to_string(),
-            Some(NSF25FunctionKey) => "f25".to_string(),
-            Some(NSF26FunctionKey) => "f26".to_string(),
-            Some(NSF27FunctionKey) => "f27".to_string(),
-            Some(NSF28FunctionKey) => "f28".to_string(),
-            Some(NSF29FunctionKey) => "f29".to_string(),
-            Some(NSF30FunctionKey) => "f30".to_string(),
-            Some(NSF31FunctionKey) => "f31".to_string(),
-            Some(NSF32FunctionKey) => "f32".to_string(),
-            Some(NSF33FunctionKey) => "f33".to_string(),
-            Some(NSF34FunctionKey) => "f34".to_string(),
-            Some(NSF35FunctionKey) => "f35".to_string(),
-            _ => {
-                // Cases to test when modifying this:
-                //
-                //           qwerty key | none | cmd   | cmd-shift
-                // * Armenian         s | ս    | cmd-s | cmd-shift-s  (layout is non-ASCII, so we use cmd layout)
-                // * Dvorak+QWERTY    s | o    | cmd-s | cmd-shift-s  (layout switches on cmd)
-                // * Ukrainian+QWERTY s | с    | cmd-s | cmd-shift-s  (macOS reports cmd-s instead of cmd-S)
-                // * Czech            7 | ý    | cmd-ý | cmd-7        (layout has shifted numbers)
-                // * Norwegian        7 | 7    | cmd-7 | cmd-/        (macOS reports cmd-shift-7 instead of cmd-/)
-                // * Russian          7 | 7    | cmd-7 | cmd-&        (shift-7 is . but when cmd is down, should use cmd layout)
-                // * German QWERTZ    ; | ö    | cmd-ö | cmd-Ö        (Zed's shift special case only applies to a-z)
-                //
-                let mut chars_ignoring_modifiers =
-                    chars_for_modified_key(native_event.keyCode(), NO_MOD);
-                let mut chars_with_shift =
-                    chars_for_modified_key(native_event.keyCode(), SHIFT_MOD);
-                let always_use_cmd_layout = always_use_command_layout();
-
-                // Handle Dvorak+QWERTY / Russian / Armenian
-                if command || always_use_cmd_layout {
-                    let chars_with_cmd = chars_for_modified_key(native_event.keyCode(), CMD_MOD);
-                    let chars_with_both =
-                        chars_for_modified_key(native_event.keyCode(), CMD_MOD | SHIFT_MOD);
-
-                    // We don't do this in the case that the shifted command key generates
-                    // the same character as the unshifted command key (Norwegian, e.g.)
-                    if chars_with_both != chars_with_cmd {
-                        chars_with_shift = chars_with_both;
-
-                    // Handle edge-case where cmd-shift-s reports cmd-s instead of
-                    // cmd-shift-s (Ukrainian, etc.)
-                    } else if chars_with_cmd.to_ascii_uppercase() != chars_with_cmd {
-                        chars_with_shift = chars_with_cmd.to_ascii_uppercase();
-                    }
-                    chars_ignoring_modifiers = chars_with_cmd;
-                }
+unsafe fn parse_keystroke(native_event: ObjcId) -> Keystroke {
+    let event = native_event as *const NSEvent;
+    // Keep msg_send for charactersIgnoringModifiers for now; bridging Id<NSString>
+    // from icrate would add conversion complexity without clear benefit here.
+    let cim: ObjcId = msg_send![native_event, charactersIgnoringModifiers];
+    let mut characters = unsafe { cim.to_str() }.to_string();
+    let mut key_char = None;
+    let first_char = characters.chars().next().map(|ch| ch as u16);
+    let modifiers: u64 = unsafe { (&*event).modifierFlags() as u64 };
+
+    let control = (modifiers & MOD_CONTROL) != 0;
+    let alt = (modifiers & MOD_OPTION) != 0;
+    let mut shift = (modifiers & MOD_SHIFT) != 0;
+    let command = (modifiers & MOD_COMMAND) != 0;
+    let function = (modifiers & MOD_FUNCTION) != 0
+        && first_char.is_none_or(|ch| !(0xF700..=0xF8FF).contains(&ch));

-                if !control && !command && !function {
-                    let mut mods = NO_MOD;
-                    if shift {
-                        mods |= SHIFT_MOD;
-                    }
-                    if alt {
-                        mods |= OPTION_MOD;
-                    }
-
-                    key_char = Some(chars_for_modified_key(native_event.keyCode(), mods));
+    #[allow(non_upper_case_globals)]
+    let key = match first_char {
+        Some(SPACE_KEY) => {
+            key_char = Some(" ".to_string());
+            "space".to_string()
+        }
+        Some(TAB_KEY) => {
+            key_char = Some("\t".to_string());
+            "tab".to_string()
+        }
+        Some(ENTER_KEY) | Some(NUMPAD_ENTER_KEY) => {
+            key_char = Some("\n".to_string());
+            "enter".to_string()
+        }
+        Some(BACKSPACE_KEY) => "backspace".to_string(),
+        Some(ESCAPE_KEY) => "escape".to_string(),
+        Some(SHIFT_TAB_KEY) => "tab".to_string(),
+        Some(NS_UP_ARROW) => "up".to_string(),
+        Some(NS_DOWN_ARROW) => "down".to_string(),
+        Some(NS_LEFT_ARROW) => "left".to_string(),
+        Some(NS_RIGHT_ARROW) => "right".to_string(),
+        Some(NS_PAGE_UP) => "pageup".to_string(),
+        Some(NS_PAGE_DOWN) => "pagedown".to_string(),
+        Some(NS_HOME) => "home".to_string(),
+        Some(NS_END) => "end".to_string(),
+        Some(NS_DELETE_FN) => "delete".to_string(),
+        // Observed Insert==NSHelpFunctionKey not NSInsertFunctionKey.
+        Some(NS_HELP_FN) => "insert".to_string(),
+        Some(fc) if (0xF704..=0xF726).contains(&fc) => {
+            let n = fc - 0xF703u16;
+            format!("f{}", n)
+        }
+        _ => {
+            // Cases to test when modifying this:
+            //
+            //           qwerty key | none | cmd   | cmd-shift
+            // * Armenian         s | ս    | cmd-s | cmd-shift-s  (layout is non-ASCII, so we use cmd layout)
+            // * Dvorak+QWERTY    s | o    | cmd-s | cmd-shift-s  (layout switches on cmd)
+            // * Ukrainian+QWERTY s | с    | cmd-s | cmd-shift-s  (macOS reports cmd-s instead of cmd-S)
+            // * Czech            7 | ý    | cmd-ý | cmd-7        (layout has shifted numbers)
+            // * Norwegian        7 | 7    | cmd-7 | cmd-/        (macOS reports cmd-shift-7 instead of cmd-/)
+            // * Russian          7 | 7    | cmd-7 | cmd-&        (shift-7 is . but when cmd is down, should use cmd layout)
+            // * German QWERTZ    ; | ö    | cmd-ö | cmd-Ö        (Zed's shift special case only applies to a-z)
+            //
+            let key_code: u16 = unsafe { (&*event).keyCode() };
+            let mut chars_ignoring_modifiers = chars_for_modified_key(key_code, NO_MOD);
+            let mut chars_with_shift = chars_for_modified_key(key_code, SHIFT_MOD);
+            let always_use_cmd_layout = always_use_command_layout();
+
+            // Handle Dvorak+QWERTY / Russian / Armenian
+            if command || always_use_cmd_layout {
+                let chars_with_cmd = chars_for_modified_key(key_code, CMD_MOD);
+                let chars_with_both = chars_for_modified_key(key_code, CMD_MOD | SHIFT_MOD);
+
+                // We don't do this in the case that the shifted command key generates
+                // the same character as the unshifted command key (Norwegian, e.g.)
+                if chars_with_both != chars_with_cmd {
+                    chars_with_shift = chars_with_both;
+
+                // Handle edge-case where cmd-shift-s reports cmd-s instead of
+                // cmd-shift-s (Ukrainian, etc.)
+                } else if chars_with_cmd.to_ascii_uppercase() != chars_with_cmd {
+                    chars_with_shift = chars_with_cmd.to_ascii_uppercase();
                 }
+                chars_ignoring_modifiers = chars_with_cmd;
+            }

-                if shift
-                    && chars_ignoring_modifiers
-                        .chars()
-                        .all(|c| c.is_ascii_lowercase())
-                {
-                    chars_ignoring_modifiers
-                } else if shift {
-                    shift = false;
-                    chars_with_shift
-                } else {
-                    chars_ignoring_modifiers
+            if !control && !command && !function {
+                let mut mods = NO_MOD;
+                if shift {
+                    mods |= SHIFT_MOD;
+                }
+                if alt {
+                    mods |= OPTION_MOD;
                 }
+
+                key_char = Some(chars_for_modified_key(key_code, mods));
+            }
+
+            if shift
+                && chars_ignoring_modifiers
+                    .chars()
+                    .all(|c| c.is_ascii_lowercase())
+            {
+                chars_ignoring_modifiers
+            } else if shift {
+                shift = false;
+                chars_with_shift
+            } else {
+                chars_ignoring_modifiers
             }
-        };
-
-        Keystroke {
-            modifiers: Modifiers {
-                control,
-                alt,
-                shift,
-                platform: command,
-                function,
-            },
-            key,
-            key_char,
         }
+    };
+
+    Keystroke {
+        modifiers: Modifiers {
+            control,
+            alt,
+            shift,
+            platform: command,
+            function,
+        },
+        key,
+        key_char,
     }
 }

diff --git a/crates/gpui/src/platform/mac/keyboard.rs b/crates/gpui/src/platform/mac/keyboard.rs
index 1409731246..7898ffe345 100644
--- a/crates/gpui/src/platform/mac/keyboard.rs
+++ b/crates/gpui/src/platform/mac/keyboard.rs
@@ -55,19 +55,41 @@ impl MacKeyboardLayout {
         unsafe {
             let current_keyboard = TISCopyCurrentKeyboardLayoutInputSource();

-            let id: *mut Object = TISGetInputSourceProperty(
+            // Default values if the system does not report a current layout
+            if current_keyboard.is_null() {
+                return Self {
+                    id: "unknown".to_string(),
+                    name: "Unknown".to_string(),
+                };
+            }
+
+            // Helper to read a UTF8String from an Objective‑C string-like object
+            unsafe fn utf8(obj: *mut Object) -> Option<String> {
+                if obj.is_null() {
+                    return None;
+                }
+                let ptr: *const std::os::raw::c_char = msg_send![obj, UTF8String];
+                if ptr.is_null() {
+                    return None;
+                }
+                // SAFETY: `ptr` is valid for the duration of this call; we copy into an owned String
+                Some(unsafe { CStr::from_ptr(ptr) }.to_str().ok()?.to_string())
+            }
+
+            let id_obj: *mut Object = TISGetInputSourceProperty(
                 current_keyboard,
                 kTISPropertyInputSourceID as *const c_void,
             );
-            let id: *const std::os::raw::c_char = msg_send![id, UTF8String];
-            let id = CStr::from_ptr(id).to_str().unwrap().to_string();
-
-            let name: *mut Object = TISGetInputSourceProperty(
+            let name_obj: *mut Object = TISGetInputSourceProperty(
                 current_keyboard,
                 kTISPropertyLocalizedName as *const c_void,
             );
-            let name: *const std::os::raw::c_char = msg_send![name, UTF8String];
-            let name = CStr::from_ptr(name).to_str().unwrap().to_string();
+
+            let id = utf8(id_obj).unwrap_or_else(|| "unknown".to_string());
+            let name = utf8(name_obj).unwrap_or_else(|| "Unknown".to_string());
+
+            // TISCopy* follows the Create/Copy rule; release when done to avoid leaks
+            let _: () = msg_send![current_keyboard, release];

             Self { id, name }
         }
diff --git a/crates/gpui/src/platform/mac/open_type.rs b/crates/gpui/src/platform/mac/open_type.rs
index 37a29559fd..d63fa74796 100644
--- a/crates/gpui/src/platform/mac/open_type.rs
+++ b/crates/gpui/src/platform/mac/open_type.rs
@@ -1,7 +1,6 @@
 #![allow(unused, non_upper_case_globals)]

 use crate::{FontFallbacks, FontFeatures};
-use cocoa::appkit::CGFloat;
 use core_foundation::{
     array::{
         CFArray, CFArrayAppendArray, CFArrayAppendValue, CFArrayCreateMutable, CFArrayGetCount,
@@ -15,6 +14,7 @@ use core_foundation::{
     string::{CFString, CFStringRef},
 };
 use core_foundation_sys::locale::CFLocaleCopyPreferredLanguages;
+use core_graphics::base::CGFloat;
 use core_graphics::{display::CFDictionary, geometry::CGAffineTransform};
 use core_text::{
     font::{CTFont, CTFontRef, cascade_list_for_languages},
diff --git a/crates/gpui/src/platform/mac/platform.rs b/crates/gpui/src/platform/mac/platform.rs
index dea04d89a0..971a2e8856 100644
--- a/crates/gpui/src/platform/mac/platform.rs
+++ b/crates/gpui/src/platform/mac/platform.rs
@@ -1,6 +1,6 @@
 use super::{
     BoolExt, MacKeyboardLayout, MacKeyboardMapper,
-    attributed_string::{NSAttributedString, NSMutableAttributedString},
+    attributed_string::{NSAttributedString, NSMutableAttributedString, NSRange},
     events::key_to_native,
     renderer,
 };
@@ -17,13 +17,11 @@ use block::ConcreteBlock;
 use cocoa::{
     appkit::{
         NSApplication, NSApplicationActivationPolicy::NSApplicationActivationPolicyRegular,
-        NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
-        NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
-        NSPasteboardTypeTIFF, NSSavePanel, NSWindow,
+        NSEventModifierFlags, NSPasteboard, NSWindow,
     },
     base::{BOOL, NO, YES, id, nil, selector},
     foundation::{
-        NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+        NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSString,
         NSUInteger, NSURL,
     },
 };
@@ -37,6 +35,10 @@ use core_foundation::{
 };
 use ctor::ctor;
 use futures::channel::oneshot;
+use icrate::AppKit::{
+    NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
+    NSPasteboardTypeTIFF, NSScrollerStyleOverlay,
+};
 use itertools::Itertools;
 use objc::{
     class,
@@ -45,7 +47,108 @@ use objc::{
     runtime::{Class, Object, Sel},
     sel, sel_impl,
 };
+// objc2 typed migration will be introduced incrementally in focused sections.
+// Swift C-ABI functions provided by the macOS AppKit shim
 use parking_lot::Mutex;
+#[cfg(target_os = "macos")]
+unsafe extern "C" {
+    fn zed_register_menu_handler();
+    fn zed_set_main_menu_json(json: *const ::std::os::raw::c_char);
+    fn zed_open_panel(request_id: u64, json: *const ::std::os::raw::c_char);
+    fn zed_save_panel(request_id: u64, json: *const ::std::os::raw::c_char);
+    fn zed_pasteboard_write_text(text: *const ::std::os::raw::c_char);
+    fn zed_pasteboard_write_image(bytes: *const u8, len: usize, uti: *const ::std::os::raw::c_char);
+    fn zed_pasteboard_read_image(
+        uti: *const ::std::os::raw::c_char,
+        out_len: *mut usize,
+    ) -> *mut u8;
+}
+#[cfg(target_os = "macos")]
+#[unsafe(no_mangle)]
+pub extern "C" fn gpui_menu_action(tag: u64) {
+    unsafe {
+        let app: id = msg_send![APP_CLASS, sharedApplication];
+        let app_obj: &mut Object = &mut *app;
+        let platform = get_mac_platform(app_obj);
+        let mut lock = platform.0.lock();
+        if let Some(mut callback) = lock.menu_command.take() {
+            let index = tag as usize;
+            if let Some(action) = lock.menu_actions.get(index) {
+                let action = action.boxed_clone();
+                drop(lock);
+                callback(action.as_ref());
+                platform.0.lock().menu_command.get_or_insert(callback);
+                return;
+            }
+            // Put the callback back even if we did not find an action
+            platform.0.lock().menu_command.get_or_insert(callback);
+        }
+    }
+}
+
+#[cfg(target_os = "macos")]
+#[unsafe(no_mangle)]
+pub extern "C" fn gpui_validate_menu_action(tag: u64) -> bool {
+    unsafe {
+        let app: id = msg_send![APP_CLASS, sharedApplication];
+        let app_obj: &mut Object = &mut *app;
+        let platform = get_mac_platform(app_obj);
+        let mut lock = platform.0.lock();
+        if let Some(mut callback) = lock.validate_menu_command.take() {
+            let index = tag as usize;
+            if let Some(action) = lock.menu_actions.get(index) {
+                let action = action.boxed_clone();
+                drop(lock);
+                let result = callback(action.as_ref());
+                platform
+                    .0
+                    .lock()
+                    .validate_menu_command
+                    .get_or_insert(callback);
+                return result;
+            }
+            platform
+                .0
+                .lock()
+                .validate_menu_command
+                .get_or_insert(callback);
+        }
+        // Default to enabled when no validator is registered or tag not found
+        true
+    }
+}
+
+#[cfg(target_os = "macos")]
+#[unsafe(no_mangle)]
+pub extern "C" fn gpui_menu_will_open() {
+    unsafe {
+        let app: id = msg_send![APP_CLASS, sharedApplication];
+        let app_obj: &mut Object = &mut *app;
+        let platform = get_mac_platform(app_obj);
+        if let Some(mut callback) = platform.0.lock().will_open_menu.take() {
+            callback();
+            platform.0.lock().will_open_menu.get_or_insert(callback);
+        }
+    }
+}
+
+// Expose a dispatcher for status item menus to reuse the same app-level menu callback
+pub(crate) fn dispatch_menu_action(action: &dyn crate::Action) {
+    unsafe {
+        let app: id = msg_send![APP_CLASS, sharedApplication];
+        let app_obj: &mut Object = &mut *app;
+        let platform = get_mac_platform(app_obj);
+        let mut lock = platform.0.lock();
+        if let Some(mut callback) = lock.menu_command.take() {
+            let act = action.boxed_clone();
+            drop(lock);
+            callback(act.as_ref());
+            platform.0.lock().menu_command.get_or_insert(callback);
+        }
+    }
+}
+
+// (Status item click callback is exported by status_item.rs)
 use ptr::null_mut;
 use std::{
     cell::Cell,
@@ -232,6 +335,8 @@ impl MacPlatform {
         }
     }

+    #[cfg(not(target_os = "macos"))]
+    #[allow(dead_code)]
     unsafe fn create_menu_bar(
         &self,
         menus: &Vec<Menu>,
@@ -240,32 +345,31 @@ impl MacPlatform {
         keymap: &Keymap,
     ) -> id {
         unsafe {
-            let application_menu = NSMenu::new(nil).autorelease();
-            application_menu.setDelegate_(delegate);
+            let mut application_menu: id = msg_send![class!(NSMenu), new];
+            application_menu = msg_send![application_menu, autorelease];
+            let _: () = msg_send![application_menu, setDelegate: delegate];

             for menu_config in menus {
-                let menu = NSMenu::new(nil).autorelease();
+                let mut menu: id = msg_send![class!(NSMenu), new];
+                menu = msg_send![menu, autorelease];
                 let menu_title = ns_string(&menu_config.name);
-                menu.setTitle_(menu_title);
-                menu.setDelegate_(delegate);
+                let _: () = msg_send![menu, setTitle: menu_title];
+                let _: () = msg_send![menu, setDelegate: delegate];

                 for item_config in &menu_config.items {
-                    menu.addItem_(Self::create_menu_item(
-                        item_config,
-                        delegate,
-                        actions,
-                        keymap,
-                    ));
+                    Self::add_menu_item(menu, item_config, delegate, actions, keymap);
                 }

-                let menu_item = NSMenuItem::new(nil).autorelease();
-                menu_item.setTitle_(menu_title);
-                menu_item.setSubmenu_(menu);
-                application_menu.addItem_(menu_item);
+                let mut menu_item: id = msg_send![class!(NSMenuItem), alloc];
+                menu_item = msg_send![menu_item, init];
+                menu_item = msg_send![menu_item, autorelease];
+                let _: () = msg_send![menu_item, setTitle: menu_title];
+                let _: () = msg_send![menu_item, setSubmenu: menu];
+                let _: () = msg_send![application_menu, addItem: menu_item];

                 if menu_config.name == "Window" {
                     let app: id = msg_send![APP_CLASS, sharedApplication];
-                    app.setWindowsMenu_(menu);
+                    let _: () = msg_send![app, setWindowsMenu: menu];
                 }
             }

@@ -281,21 +385,170 @@ impl MacPlatform {
         keymap: &Keymap,
     ) -> id {
         unsafe {
-            let dock_menu = NSMenu::new(nil);
-            dock_menu.setDelegate_(delegate);
+            let dock_menu: id = msg_send![class!(NSMenu), new];
+            let _: () = msg_send![dock_menu, setDelegate: delegate];
             for item_config in menu_items {
-                dock_menu.addItem_(Self::create_menu_item(
-                    &item_config,
-                    delegate,
-                    actions,
-                    keymap,
-                ));
+                Self::add_menu_item(dock_menu, &item_config, delegate, actions, keymap);
             }

             dock_menu
         }
     }

+    unsafe fn add_menu_item(
+        parent_menu: id,
+        item: &MenuItem,
+        delegate: id,
+        actions: &mut Vec<Box<dyn Action>>,
+        keymap: &Keymap,
+    ) {
+        static DEFAULT_CONTEXT: OnceLock<Vec<KeyContext>> = OnceLock::new();
+
+        unsafe {
+            match item {
+                MenuItem::Separator => {
+                    let sep: id = msg_send![class!(NSMenuItem), separatorItem];
+                    let _: () = msg_send![parent_menu, addItem: sep];
+                }
+                MenuItem::Action {
+                    name,
+                    action,
+                    os_action,
+                } => {
+                    let keystrokes = keymap
+                        .bindings_for_action(action.as_ref())
+                        .find_or_first(|binding| {
+                            binding.predicate().is_none_or(|predicate| {
+                                predicate.eval(DEFAULT_CONTEXT.get_or_init(|| {
+                                    let mut workspace_context = KeyContext::new_with_defaults();
+                                    workspace_context.add("Workspace");
+                                    let mut pane_context = KeyContext::new_with_defaults();
+                                    pane_context.add("Pane");
+                                    let mut editor_context = KeyContext::new_with_defaults();
+                                    editor_context.add("Editor");
+
+                                    pane_context.extend(&editor_context);
+                                    workspace_context.extend(&pane_context);
+                                    vec![workspace_context]
+                                }))
+                            })
+                        })
+                        .map(|binding| binding.keystrokes());
+
+                    let selector = match os_action {
+                        Some(crate::OsAction::Cut) => selector("cut:"),
+                        Some(crate::OsAction::Copy) => selector("copy:"),
+                        Some(crate::OsAction::Paste) => selector("paste:"),
+                        Some(crate::OsAction::SelectAll) => selector("selectAll:"),
+                        Some(crate::OsAction::Undo) => selector("handleGPUIMenuItem:"),
+                        Some(crate::OsAction::Redo) => selector("handleGPUIMenuItem:"),
+                        None => selector("handleGPUIMenuItem:"),
+                    };
+
+                    let item: id = if let Some(keystrokes) = keystrokes {
+                        if keystrokes.len() == 1 {
+                            let keystroke = &keystrokes[0];
+                            let mut mask = NSEventModifierFlags::empty();
+                            for (modifier, flag) in &[
+                                (
+                                    keystroke.modifiers().platform,
+                                    NSEventModifierFlags::NSCommandKeyMask,
+                                ),
+                                (
+                                    keystroke.modifiers().control,
+                                    NSEventModifierFlags::NSControlKeyMask,
+                                ),
+                                (
+                                    keystroke.modifiers().alt,
+                                    NSEventModifierFlags::NSAlternateKeyMask,
+                                ),
+                                (
+                                    keystroke.modifiers().shift,
+                                    NSEventModifierFlags::NSShiftKeyMask,
+                                ),
+                            ] {
+                                if *modifier {
+                                    mask |= *flag;
+                                }
+                            }
+
+                            let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                            tmp = msg_send![
+                                tmp,
+                                initWithTitle: ns_string(name)
+                                action: selector
+                                keyEquivalent: ns_string(key_to_native(keystroke.key()).as_ref())
+                            ];
+                            let item: id = msg_send![tmp, autorelease];
+                            if Self::os_version() >= SemanticVersion::new(12, 0, 0) {
+                                let _: () = msg_send![item, setAllowsAutomaticKeyEquivalentLocalization: NO];
+                            }
+                            let _: () = msg_send![item, setKeyEquivalentModifierMask: mask];
+                            item
+                        } else {
+                            let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                            tmp = msg_send![
+                                tmp,
+                                initWithTitle: ns_string(name)
+                                action: selector
+                                keyEquivalent: ns_string("")
+                            ];
+                            msg_send![tmp, autorelease]
+                        }
+                    } else {
+                        let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                        tmp = msg_send![
+                            tmp,
+                            initWithTitle: ns_string(name)
+                            action: selector
+                            keyEquivalent: ns_string("")
+                        ];
+                        msg_send![tmp, autorelease]
+                    };
+
+                    let tag = actions.len() as NSInteger;
+                    let _: () = msg_send![item, setTag: tag];
+                    actions.push(action.boxed_clone());
+                    let _: () = msg_send![parent_menu, addItem: item];
+                }
+                MenuItem::Submenu(Menu { name, items }) => {
+                    let mut item: id = msg_send![class!(NSMenuItem), alloc];
+                    item = msg_send![item, init];
+                    item = msg_send![item, autorelease];
+                    let mut submenu: id = msg_send![class!(NSMenu), new];
+                    submenu = msg_send![submenu, autorelease];
+                    let _: () = msg_send![submenu, setDelegate: delegate];
+                    for subitem in items {
+                        Self::add_menu_item(submenu, subitem, delegate, actions, keymap);
+                    }
+                    let _: () = msg_send![item, setSubmenu: submenu];
+                    let _: () = msg_send![item, setTitle: ns_string(name)];
+                    let _: () = msg_send![parent_menu, addItem: item];
+                }
+                MenuItem::SystemMenu(OsMenu { name, menu_type }) => {
+                    let mut item: id = msg_send![class!(NSMenuItem), alloc];
+                    item = msg_send![item, init];
+                    item = msg_send![item, autorelease];
+                    let mut submenu: id = msg_send![class!(NSMenu), new];
+                    submenu = msg_send![submenu, autorelease];
+                    let _: () = msg_send![submenu, setDelegate: delegate];
+                    let _: () = msg_send![item, setSubmenu: submenu];
+                    let _: () = msg_send![item, setTitle: ns_string(name)];
+
+                    match menu_type {
+                        SystemMenuType::Services => {
+                            let app: id = msg_send![APP_CLASS, sharedApplication];
+                            let _: () = msg_send![app, setServicesMenu: item];
+                        }
+                    }
+
+                    let _: () = msg_send![parent_menu, addItem: item];
+                }
+            }
+        }
+    }
+    // Legacy helper removed; use add_menu_item instead
+    /*
     unsafe fn create_menu_item(
         item: &MenuItem,
         delegate: id,
@@ -306,7 +559,7 @@ impl MacPlatform {

         unsafe {
             match item {
-                MenuItem::Separator => NSMenuItem::separatorItem(nil),
+                MenuItem::Separator => msg_send![class!(NSMenuItem), separatorItem],
                 MenuItem::Action {
                     name,
                     action,
@@ -347,7 +600,7 @@ impl MacPlatform {
                         None => selector("handleGPUIMenuItem:"),
                     };

-                    let item;
+                    let mut item: id;
                     if let Some(keystrokes) = keystrokes {
                         if keystrokes.len() == 1 {
                             let keystroke = &keystrokes[0];
@@ -375,34 +628,37 @@ impl MacPlatform {
                                 }
                             }

-                            item = NSMenuItem::alloc(nil)
-                                .initWithTitle_action_keyEquivalent_(
-                                    ns_string(name),
-                                    selector,
-                                    ns_string(key_to_native(keystroke.key()).as_ref()),
-                                )
-                                .autorelease();
+                            let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                            tmp = msg_send![
+                                tmp,
+                                initWithTitle: ns_string(name)
+                                action: selector
+                                keyEquivalent: ns_string(key_to_native(keystroke.key()).as_ref())
+                            ];
+                            item = msg_send![tmp, autorelease];
                             if Self::os_version() >= SemanticVersion::new(12, 0, 0) {
                                 let _: () = msg_send![item, setAllowsAutomaticKeyEquivalentLocalization: NO];
                             }
-                            item.setKeyEquivalentModifierMask_(mask);
+                            let _: () = msg_send![item, setKeyEquivalentModifierMask: mask];
                         } else {
-                            item = NSMenuItem::alloc(nil)
-                                .initWithTitle_action_keyEquivalent_(
-                                    ns_string(name),
-                                    selector,
-                                    ns_string(""),
-                                )
-                                .autorelease();
+                            let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                            tmp = msg_send![
+                                tmp,
+                                initWithTitle: ns_string(name)
+                                action: selector
+                                keyEquivalent: ns_string("")
+                            ];
+                            item = msg_send![tmp, autorelease];
                         }
                     } else {
-                        item = NSMenuItem::alloc(nil)
-                            .initWithTitle_action_keyEquivalent_(
-                                ns_string(name),
-                                selector,
-                                ns_string(""),
-                            )
-                            .autorelease();
+                        let mut tmp: id = msg_send![class!(NSMenuItem), alloc];
+                        tmp = msg_send![
+                            tmp,
+                            initWithTitle: ns_string(name)
+                            action: selector
+                            keyEquivalent: ns_string("")
+                        ];
+                        item = msg_send![tmp, autorelease];
                     }

                     let tag = actions.len() as NSInteger;
@@ -411,27 +667,33 @@ impl MacPlatform {
                     item
                 }
                 MenuItem::Submenu(Menu { name, items }) => {
-                    let item = NSMenuItem::new(nil).autorelease();
-                    let submenu = NSMenu::new(nil).autorelease();
-                    submenu.setDelegate_(delegate);
+                    let mut item: id = msg_send![class!(NSMenuItem), alloc];
+                    item = msg_send![item, init];
+                    item = msg_send![item, autorelease];
+                    let mut submenu: id = msg_send![class!(NSMenu), new];
+                    submenu = msg_send![submenu, autorelease];
+                    let _: () = msg_send![submenu, setDelegate: delegate];
                     for item in items {
-                        submenu.addItem_(Self::create_menu_item(item, delegate, actions, keymap));
+                        let _: () = msg_send![submenu, addItem: Self::create_menu_item(item, delegate, actions, keymap)];
                     }
-                    item.setSubmenu_(submenu);
-                    item.setTitle_(ns_string(name));
+                    let _: () = msg_send![item, setSubmenu: submenu];
+                    let _: () = msg_send![item, setTitle: ns_string(name)];
                     item
                 }
                 MenuItem::SystemMenu(OsMenu { name, menu_type }) => {
-                    let item = NSMenuItem::new(nil).autorelease();
-                    let submenu = NSMenu::new(nil).autorelease();
-                    submenu.setDelegate_(delegate);
-                    item.setSubmenu_(submenu);
-                    item.setTitle_(ns_string(name));
+                    let mut item: id = msg_send![class!(NSMenuItem), alloc];
+                    item = msg_send![item, init];
+                    item = msg_send![item, autorelease];
+                    let mut submenu: id = msg_send![class!(NSMenu), new];
+                    submenu = msg_send![submenu, autorelease];
+                    let _: () = msg_send![submenu, setDelegate: delegate];
+                    let _: () = msg_send![item, setSubmenu: submenu];
+                    let _: () = msg_send![item, setTitle: ns_string(name)];

                     match menu_type {
                         SystemMenuType::Services => {
                             let app: id = msg_send![APP_CLASS, sharedApplication];
-                            app.setServicesMenu_(item);
+                            let _: () = msg_send![app, setServicesMenu: item];
                         }
                     }

@@ -440,6 +702,7 @@ impl MacPlatform {
             }
         }
     }
+    */

     fn os_version() -> SemanticVersion {
         let version = unsafe {
@@ -593,7 +856,12 @@ impl Platform for MacPlatform {

     #[cfg(feature = "screen-capture")]
     fn is_screen_capture_supported(&self) -> bool {
-        let min_version = cocoa::foundation::NSOperatingSystemVersion::new(12, 3, 0);
+        use icrate::Foundation::NSOperatingSystemVersion;
+        let min_version = NSOperatingSystemVersion {
+            majorVersion: 12,
+            minorVersion: 3,
+            patchVersion: 0,
+        };
         super::is_macos_version_at_least(min_version)
     }

@@ -703,50 +971,51 @@ impl Platform for MacPlatform {
         &self,
         options: PathPromptOptions,
     ) -> oneshot::Receiver<Result<Option<Vec<PathBuf>>>> {
-        let (done_tx, done_rx) = oneshot::channel();
-        self.foreground_executor()
-            .spawn(async move {
-                unsafe {
-                    let panel = NSOpenPanel::openPanel(nil);
-                    panel.setCanChooseDirectories_(options.directories.to_objc());
-                    panel.setCanChooseFiles_(options.files.to_objc());
-                    panel.setAllowsMultipleSelection_(options.multiple.to_objc());
-
-                    panel.setCanCreateDirectories(true.to_objc());
-                    panel.setResolvesAliases_(false.to_objc());
-                    let done_tx = Cell::new(Some(done_tx));
-                    let block = ConcreteBlock::new(move |response: NSModalResponse| {
-                        let result = if response == NSModalResponse::NSModalResponseOk {
-                            let mut result = Vec::new();
-                            let urls = panel.URLs();
-                            for i in 0..urls.count() {
-                                let url = urls.objectAtIndex(i);
-                                if url.isFileURL() == YES
-                                    && let Ok(path) = ns_url_to_path(url)
-                                {
-                                    result.push(path)
-                                }
-                            }
-                            Some(result)
-                        } else {
-                            None
-                        };
-
-                        if let Some(done_tx) = done_tx.take() {
-                            let _ = done_tx.send(Ok(result));
-                        }
-                    });
-                    let block = block.copy();
+        #[cfg(target_os = "macos")]
+        {
+            use std::collections::HashMap;
+            use std::sync::{Mutex as StdMutex, OnceLock};
+            type OpenTx = oneshot::Sender<Result<Option<Vec<PathBuf>>>>;
+            static OPEN_SENDERS: OnceLock<StdMutex<HashMap<u64, OpenTx>>> = OnceLock::new();
+            static REQ_COUNTER: OnceLock<std::sync::atomic::AtomicU64> = OnceLock::new();
+
+            #[derive(serde::Serialize)]
+            struct OpenOpts {
+                directories: bool,
+                files: bool,
+                multiple: bool,
+                #[serde(skip_serializing_if = "Option::is_none")]
+                prompt: Option<String>,
+            }

-                    if let Some(prompt) = options.prompt {
-                        let _: () = msg_send![panel, setPrompt: ns_string(&prompt)];
-                    }
+            let (tx, rx) = oneshot::channel();
+            let req_id = REQ_COUNTER
+                .get_or_init(|| std::sync::atomic::AtomicU64::new(1))
+                .fetch_add(1, std::sync::atomic::Ordering::SeqCst);
+            OPEN_SENDERS
+                .get_or_init(|| StdMutex::new(HashMap::new()))
+                .lock()
+                .unwrap()
+                .insert(req_id, tx);
+
+            let opts = OpenOpts {
+                directories: options.directories,
+                files: options.files,
+                multiple: options.multiple,
+                prompt: options.prompt.as_deref().map(|s| s.to_string()),
+            };
+            let json = serde_json::to_string(&opts).unwrap_or_else(|_| "{}".into());
+            if let Ok(cjson) = std::ffi::CString::new(json) {
+                unsafe { zed_open_panel(req_id, cjson.as_ptr()) };
+            }

-                    let _: () = msg_send![panel, beginWithCompletionHandler: block];
-                }
-            })
-            .detach();
-        done_rx
+            return rx;
+        }
+        #[cfg(not(target_os = "macos"))]
+        {
+            let (_tx, rx) = oneshot::channel();
+            rx
+        }
     }

     fn prompt_for_new_path(
@@ -754,71 +1023,46 @@ impl Platform for MacPlatform {
         directory: &Path,
         suggested_name: Option<&str>,
     ) -> oneshot::Receiver<Result<Option<PathBuf>>> {
-        let directory = directory.to_owned();
-        let suggested_name = suggested_name.map(|s| s.to_owned());
-        let (done_tx, done_rx) = oneshot::channel();
-        self.foreground_executor()
-            .spawn(async move {
-                unsafe {
-                    let panel = NSSavePanel::savePanel(nil);
-                    let path = ns_string(directory.to_string_lossy().as_ref());
-                    let url = NSURL::fileURLWithPath_isDirectory_(nil, path, true.to_objc());
-                    panel.setDirectoryURL(url);
-
-                    if let Some(suggested_name) = suggested_name {
-                        let name_string = ns_string(&suggested_name);
-                        let _: () = msg_send![panel, setNameFieldStringValue: name_string];
-                    }
-
-                    let done_tx = Cell::new(Some(done_tx));
-                    let block = ConcreteBlock::new(move |response: NSModalResponse| {
-                        let mut result = None;
-                        if response == NSModalResponse::NSModalResponseOk {
-                            let url = panel.URL();
-                            if url.isFileURL() == YES {
-                                result = ns_url_to_path(panel.URL()).ok().map(|mut result| {
-                                    let Some(filename) = result.file_name() else {
-                                        return result;
-                                    };
-                                    let chunks = filename
-                                        .as_bytes()
-                                        .split(|&b| b == b'.')
-                                        .collect::<Vec<_>>();
-
-                                    // https://github.com/zed-industries/zed/issues/16969
-                                    // Workaround a bug in macOS Sequoia that adds an extra file-extension
-                                    // sometimes. e.g. `a.sql` becomes `a.sql.s` or `a.txtx` becomes `a.txtx.txt`
-                                    //
-                                    // This is conditional on OS version because I'd like to get rid of it, so that
-                                    // you can manually create a file called `a.sql.s`. That said it seems better
-                                    // to break that use-case than breaking `a.sql`.
-                                    if chunks.len() == 3
-                                        && chunks[1].starts_with(chunks[2])
-                                        && Self::os_version() >= SemanticVersion::new(15, 0, 0)
-                                    {
-                                        let new_filename = OsStr::from_bytes(
-                                            &filename.as_bytes()
-                                                [..chunks[0].len() + 1 + chunks[1].len()],
-                                        )
-                                        .to_owned();
-                                        result.set_file_name(&new_filename);
-                                    }
-                                    result
-                                })
-                            }
-                        }
+        #[cfg(target_os = "macos")]
+        {
+            use std::collections::HashMap;
+            use std::sync::{Mutex as StdMutex, OnceLock};
+            type SaveTx = oneshot::Sender<Result<Option<PathBuf>>>;
+            static SAVE_SENDERS: OnceLock<StdMutex<HashMap<u64, SaveTx>>> = OnceLock::new();
+            static REQ_COUNTER: OnceLock<std::sync::atomic::AtomicU64> = OnceLock::new();
+            #[derive(serde::Serialize)]
+            struct SaveOpts<'a> {
+                directory: &'a str,
+                #[serde(skip_serializing_if = "Option::is_none")]
+                suggested_name: Option<&'a str>,
+            }

-                        if let Some(done_tx) = done_tx.take() {
-                            let _ = done_tx.send(Ok(result));
-                        }
-                    });
-                    let block = block.copy();
-                    let _: () = msg_send![panel, beginWithCompletionHandler: block];
-                }
-            })
-            .detach();
+            let (tx, rx) = oneshot::channel();
+            let req_id = REQ_COUNTER
+                .get_or_init(|| std::sync::atomic::AtomicU64::new(1))
+                .fetch_add(1, std::sync::atomic::Ordering::SeqCst);
+            SAVE_SENDERS
+                .get_or_init(|| StdMutex::new(HashMap::new()))
+                .lock()
+                .unwrap()
+                .insert(req_id, tx);

-        done_rx
+            let dir_str = directory.to_string_lossy().to_string();
+            let opts = SaveOpts {
+                directory: &dir_str,
+                suggested_name,
+            };
+            let json = serde_json::to_string(&opts).unwrap_or_else(|_| "{}".into());
+            if let Ok(cjson) = std::ffi::CString::new(json) {
+                unsafe { zed_save_panel(req_id, cjson.as_ptr()) };
+            }
+            return rx;
+        }
+        #[cfg(not(target_os = "macos"))]
+        {
+            let (_tx, rx) = oneshot::channel();
+            rx
+        }
     }

     fn can_select_mixed_files_and_dirs(&self) -> bool {
@@ -901,15 +1145,159 @@ impl Platform for MacPlatform {
     }

     fn set_menus(&self, menus: Vec<Menu>, keymap: &Keymap) {
-        unsafe {
-            let app: id = msg_send![APP_CLASS, sharedApplication];
+        // Swift-native path: full JSON menu with action tags and shortcuts.
+        #[cfg(target_os = "macos")]
+        {
+            #[derive(serde::Serialize)]
+            #[serde(tag = "kind", rename_all = "lowercase")]
+            enum JsItem<'a> {
+                Action {
+                    title: &'a str,
+                    tag: u64,
+                    #[serde(skip_serializing_if = "Option::is_none")]
+                    key_equivalent: Option<String>,
+                    #[serde(skip_serializing_if = "Vec::is_empty")]
+                    modifiers: Vec<&'static str>,
+                },
+                Separator,
+                Submenu {
+                    title: &'a str,
+                    items: Vec<JsItem<'a>>,
+                },
+                System {
+                    title: &'a str,
+                    system_type: &'static str,
+                    items: Vec<JsItem<'a>>,
+                },
+            }
+            #[derive(serde::Serialize)]
+            struct JsMenu<'a> {
+                title: &'a str,
+                items: Vec<JsItem<'a>>,
+            }
+            #[derive(serde::Serialize)]
+            struct JsSpec<'a> {
+                menus: Vec<JsMenu<'a>>,
+            }
+
             let mut state = self.0.lock();
+            state.menu_actions.clear();
             let actions = &mut state.menu_actions;
-            let menu = self.create_menu_bar(&menus, NSWindow::delegate(app), actions, keymap);
-            drop(state);
-            app.setMainMenu_(menu);
+
+            fn action_shortcut(
+                action: &dyn Action,
+                keymap: &Keymap,
+            ) -> (Option<String>, Vec<&'static str>) {
+                use crate::KeyContext;
+                let mut workspace_context = KeyContext::new_with_defaults();
+                workspace_context.add("Workspace");
+                let mut pane_context = KeyContext::new_with_defaults();
+                pane_context.add("Pane");
+                let mut editor_context = KeyContext::new_with_defaults();
+                editor_context.add("Editor");
+                pane_context.extend(&editor_context);
+                workspace_context.extend(&pane_context);
+                let default_contexts = vec![workspace_context];
+                let keystrokes = keymap
+                    .bindings_for_action(action)
+                    .find_or_first(|binding| {
+                        binding
+                            .predicate()
+                            .is_none_or(|p| p.eval(&default_contexts))
+                    })
+                    .map(|binding| binding.keystrokes());
+                if let Some(ks) = keystrokes {
+                    if ks.len() == 1 {
+                        let k = &ks[0];
+                        let key = key_to_native(k.key()).to_string();
+                        let mut mods = Vec::new();
+                        if k.modifiers().platform {
+                            mods.push("command");
+                        }
+                        if k.modifiers().control {
+                            mods.push("control");
+                        }
+                        if k.modifiers().alt {
+                            mods.push("option");
+                        }
+                        if k.modifiers().shift {
+                            mods.push("shift");
+                        }
+                        return (Some(key), mods);
+                    }
+                }
+                (None, Vec::new())
+            }
+
+            fn encode_items<'a>(
+                src: &'a [MenuItem],
+                keymap: &Keymap,
+                actions: &mut Vec<Box<dyn Action>>,
+                out: &mut Vec<JsItem<'a>>,
+            ) {
+                for item in src {
+                    match item {
+                        MenuItem::Separator => out.push(JsItem::Separator),
+                        MenuItem::Action { name, action, .. } => {
+                            let tag = actions.len() as u64;
+                            actions.push(action.boxed_clone());
+                            let (key, mods) = action_shortcut(action.as_ref(), keymap);
+                            out.push(JsItem::Action {
+                                title: name,
+                                tag,
+                                key_equivalent: key,
+                                modifiers: mods,
+                            });
+                        }
+                        MenuItem::Submenu(Menu { name, items }) => {
+                            let mut sub = Vec::new();
+                            encode_items(items, keymap, actions, &mut sub);
+                            out.push(JsItem::Submenu {
+                                title: name,
+                                items: sub,
+                            });
+                        }
+                        MenuItem::SystemMenu(OsMenu { name, menu_type }) => {
+                            let mut sub = Vec::new();
+                            let system_type = match menu_type {
+                                SystemMenuType::Services => "services",
+                            };
+                            out.push(JsItem::System {
+                                title: name,
+                                system_type,
+                                items: sub,
+                            });
+                        }
+                    }
+                }
+            }
+
+            let mut js_menus = Vec::new();
+            for m in &menus {
+                let mut items = Vec::new();
+                encode_items(&m.items, keymap, actions, &mut items);
+                js_menus.push(JsMenu {
+                    title: &m.name,
+                    items,
+                });
+            }
+            let spec = JsSpec { menus: js_menus };
+            let json = serde_json::to_string(&spec).unwrap_or_else(|_| "{\"menus\":[]}".into());
+            unsafe { zed_register_menu_handler() };
+            use std::ffi::CString;
+            if let Ok(cjson) = CString::new(json) {
+                unsafe { zed_set_main_menu_json(cjson.as_ptr()) };
+            }
+
+            state.menus = Some(menus.into_iter().map(|menu| menu.owned()).collect());
+            return;
+        }
+
+        // Non-macOS: keep menus in state only.
+        #[cfg(not(target_os = "macos"))]
+        {
+            self.0.lock().menus = Some(menus.into_iter().map(|menu| menu.owned()).collect());
         }
-        self.0.lock().menus = Some(menus.into_iter().map(|menu| menu.owned()).collect());
     }

     fn get_menus(&self) -> Option<Vec<OwnedMenu>> {
@@ -921,7 +1309,8 @@ impl Platform for MacPlatform {
             let app: id = msg_send![APP_CLASS, sharedApplication];
             let mut state = self.0.lock();
             let actions = &mut state.menu_actions;
-            let new = self.create_dock_menu(menu, NSWindow::delegate(app), actions, keymap);
+            let delegate: id = msg_send![app, delegate];
+            let new = self.create_dock_menu(menu, delegate, actions, keymap);
             if let Some(old) = state.dock_menu.replace(new) {
                 CFRelease(old as _)
             }
@@ -1004,12 +1393,9 @@ impl Platform for MacPlatform {
     }

     fn should_auto_hide_scrollbars(&self) -> bool {
-        #[allow(non_upper_case_globals)]
-        const NSScrollerStyleOverlay: NSInteger = 1;
-
         unsafe {
             let style: NSInteger = msg_send![class!(NSScroller), preferredScrollerStyle];
-            style == NSScrollerStyleOverlay
+            style == (NSScrollerStyleOverlay as NSInteger)
         }
     }

@@ -1059,31 +1445,29 @@ impl Platform for MacPlatform {

                 // Only set rich text clipboard types if we actually have 1+ images to include.
                 if any_images {
-                    let rtfd_data = attributed_string.RTFDFromRange_documentAttributes_(
-                        NSRange::new(0, msg_send![attributed_string, length]),
-                        nil,
-                    );
+                    let len: u64 = msg_send![attributed_string, length];
+                    let rtfd_data = attributed_string
+                        .RTFDFromRange_documentAttributes_(NSRange::new(0, len as usize), nil);
                     if rtfd_data != nil {
                         state
                             .pasteboard
-                            .setData_forType(rtfd_data, NSPasteboardTypeRTFD);
+                            .setData_forType(rtfd_data, NSPasteboardTypeRTFD as *const _ as id);
                     }

-                    let rtf_data = attributed_string.RTFFromRange_documentAttributes_(
-                        NSRange::new(0, attributed_string.length()),
-                        nil,
-                    );
+                    let len2: u64 = attributed_string.length();
+                    let rtf_data = attributed_string
+                        .RTFFromRange_documentAttributes_(NSRange::new(0, len2 as usize), nil);
                     if rtf_data != nil {
                         state
                             .pasteboard
-                            .setData_forType(rtf_data, NSPasteboardTypeRTF);
+                            .setData_forType(rtf_data, NSPasteboardTypeRTF as *const _ as id);
                     }
                 }

                 let plain_text = attributed_string.string();
                 state
                     .pasteboard
-                    .setString_forType(plain_text, NSPasteboardTypeString);
+                    .setString_forType(plain_text, NSPasteboardTypeString as *const _ as id);
             }
         }
     }
@@ -1092,7 +1476,7 @@ impl Platform for MacPlatform {
         let state = self.0.lock();
         let pasteboard = state.pasteboard;

-        // First, see if it's a string.
+        // Preserve original behavior (metadata-aware) for text; use Swift only for images.
         unsafe {
             let types: id = pasteboard.types();
             let string_type: id = ns_string("public.utf8-plain-text");
@@ -1262,6 +1646,13 @@ impl MacPlatform {

     unsafe fn write_plaintext_to_clipboard(&self, string: &ClipboardString) {
         unsafe {
+            // Fast path: if there is no metadata, use Swift-native pasteboard write for text.
+            if string.metadata.is_none() {
+                if let Ok(cstr) = std::ffi::CString::new(string.text.as_str()) {
+                    zed_pasteboard_write_text(cstr.as_ptr());
+                    return;
+                }
+            }
             let state = self.0.lock();
             state.pasteboard.clearContents();

@@ -1272,7 +1663,7 @@ impl MacPlatform {
             );
             state
                 .pasteboard
-                .setData_forType(text_bytes, NSPasteboardTypeString);
+                .setData_forType(text_bytes, NSPasteboardTypeString as *const _ as id);

             if let Some(metadata) = string.metadata.as_ref() {
                 let hash_bytes = ClipboardString::text_hash(&string.text).to_be_bytes();
@@ -1299,15 +1690,27 @@ impl MacPlatform {

     unsafe fn write_image_to_clipboard(&self, image: &Image) {
         unsafe {
+            let uti = match image.format {
+                ImageFormat::Png => "public.png",
+                ImageFormat::Jpeg => "public.jpeg",
+                ImageFormat::Tiff => "public.tiff",
+                ImageFormat::Webp => "org.webmproject.webp",
+                ImageFormat::Gif => "com.compuserve.gif",
+                ImageFormat::Bmp => "com.microsoft.bmp",
+                ImageFormat::Svg => "public.svg-image",
+            };
+            if let Ok(cuti) = std::ffi::CString::new(uti) {
+                zed_pasteboard_write_image(image.bytes.as_ptr(), image.bytes.len(), cuti.as_ptr());
+                return;
+            }
+            // Fallback to legacy path if UTI conversion failed
             let state = self.0.lock();
             state.pasteboard.clearContents();
-
             let bytes = NSData::dataWithBytes_length_(
                 nil,
                 image.bytes.as_ptr() as *const c_void,
                 image.bytes.len() as u64,
             );
-
             state
                 .pasteboard
                 .setData_forType(bytes, Into::<UTType>::into(image.format).inner_mut());
@@ -1319,22 +1722,51 @@ fn try_clipboard_image(pasteboard: id, format: ImageFormat) -> Option<ClipboardI
     let mut ut_type: UTType = format.into();

     unsafe {
+        // Use Swift-native pasteboard read for the given UTI
+        let uti = match format {
+            ImageFormat::Png => "public.png",
+            ImageFormat::Jpeg => "public.jpeg",
+            ImageFormat::Tiff => "public.tiff",
+            ImageFormat::Webp => "org.webmproject.webp",
+            ImageFormat::Gif => "com.compuserve.gif",
+            ImageFormat::Bmp => "com.microsoft.bmp",
+            ImageFormat::Svg => "public.svg-image",
+        };
+        if let Ok(cuti) = std::ffi::CString::new(uti) {
+            let mut len: usize = 0;
+            let ptr = zed_pasteboard_read_image(cuti.as_ptr(), &mut len as *mut usize);
+            if !ptr.is_null() && len > 0 {
+                let bytes = Vec::from_raw_parts(ptr, len, len);
+                let id_val = hash(&bytes);
+                // We must not free ptr after Vec::from_raw_parts
+                return Some(ClipboardItem {
+                    entries: vec![ClipboardEntry::Image(Image {
+                        format,
+                        bytes,
+                        id: id_val,
+                    })],
+                });
+            }
+        }
+        // Fallback to legacy path
         let types: id = pasteboard.types();
         if msg_send![types, containsObject: ut_type.inner()] {
             let data = pasteboard.dataForType(ut_type.inner_mut());
             if data == nil {
-                None
-            } else {
-                let bytes = Vec::from(slice::from_raw_parts(
-                    data.bytes() as *mut u8,
-                    data.length() as usize,
-                ));
-                let id = hash(&bytes);
-
-                Some(ClipboardItem {
-                    entries: vec![ClipboardEntry::Image(Image { format, bytes, id })],
-                })
+                return None;
             }
+            let bytes = Vec::from(slice::from_raw_parts(
+                data.bytes() as *mut u8,
+                data.length() as usize,
+            ));
+            let id_val = hash(&bytes);
+            Some(ClipboardItem {
+                entries: vec![ClipboardEntry::Image(Image {
+                    format,
+                    bytes,
+                    id: id_val,
+                })],
+            })
         } else {
             None
         }
@@ -1518,6 +1950,82 @@ unsafe fn ns_url_to_path(url: id) -> Result<PathBuf> {
     })))
 }

+// Panel callbacks from Swift (C ABI)
+#[cfg(target_os = "macos")]
+#[unsafe(no_mangle)]
+pub extern "C" fn gpui_open_panel_result(request_id: u64, json: *const ::std::os::raw::c_char) {
+    use futures::channel::oneshot;
+    use std::collections::HashMap;
+    use std::ffi::CStr;
+    use std::sync::{Mutex as StdMutex, OnceLock};
+    type OpenTx = oneshot::Sender<Result<Option<Vec<PathBuf>>>>;
+    static OPEN_SENDERS: OnceLock<StdMutex<HashMap<u64, OpenTx>>> = OnceLock::new();
+    let map_lock = OPEN_SENDERS.get_or_init(|| StdMutex::new(HashMap::new()));
+    let sender = map_lock.lock().unwrap().remove(&request_id);
+    if let Some(tx) = sender {
+        let s = unsafe { CStr::from_ptr(json) }
+            .to_string_lossy()
+            .to_string();
+        #[derive(serde::Deserialize)]
+        struct OpenRes {
+            paths: Option<Vec<String>>,
+        }
+        let parsed: Result<OpenRes> = serde_json::from_str(&s).map_err(|e| anyhow!(e));
+        let result = parsed.map(|res| {
+            res.paths
+                .map(|v| v.into_iter().map(PathBuf::from).collect())
+        });
+        let _ = tx.send(result);
+    }
+}
+
+#[cfg(target_os = "macos")]
+#[unsafe(no_mangle)]
+pub extern "C" fn gpui_save_panel_result(request_id: u64, json: *const ::std::os::raw::c_char) {
+    use futures::channel::oneshot;
+    use std::collections::HashMap;
+    use std::ffi::CStr;
+    use std::sync::{Mutex as StdMutex, OnceLock};
+    type SaveTx = oneshot::Sender<Result<Option<PathBuf>>>;
+    static SAVE_SENDERS: OnceLock<StdMutex<HashMap<u64, SaveTx>>> = OnceLock::new();
+    let map_lock = SAVE_SENDERS.get_or_init(|| StdMutex::new(HashMap::new()));
+    let sender = map_lock.lock().unwrap().remove(&request_id);
+    if let Some(tx) = sender {
+        let s = unsafe { CStr::from_ptr(json) }
+            .to_string_lossy()
+            .to_string();
+        #[derive(serde::Deserialize)]
+        struct SaveRes {
+            path: Option<String>,
+        }
+        let parsed: Result<SaveRes> = serde_json::from_str(&s).map_err(|e| anyhow!(e));
+        let result = parsed.map(|res| {
+            res.path.map(|p| {
+                let mut result = PathBuf::from(p);
+                // Apply Sequoia filename fix from legacy path for parity
+                if let Some(filename) = result.file_name() {
+                    let chunks: Vec<_> = filename.as_bytes().split(|&b| b == b'.').collect();
+                    if chunks.len() == 3
+                        && chunks[1].starts_with(chunks[2])
+                        && MacPlatform::os_version() >= SemanticVersion::new(15, 0, 0)
+                    {
+                        use std::ffi::OsStr;
+                        let new_filename = OsStr::from_bytes(
+                            &filename.as_bytes()[..chunks[0].len() + 1 + chunks[1].len()],
+                        )
+                        .to_owned();
+                        result.set_file_name(&new_filename);
+                    }
+                }
+                result
+            })
+        });
+        let _ = tx.send(result);
+    }
+}
+
+// (Helper conversions for typed objc2 objects will be added when migrating sections.)
+
 #[link(name = "Carbon", kind = "framework")]
 unsafe extern "C" {
     pub(super) fn TISCopyCurrentKeyboardLayoutInputSource() -> *mut Object;
@@ -1589,7 +2097,7 @@ struct UTType(id);
 impl UTType {
     pub fn png() -> Self {
         // https://developer.apple.com/documentation/uniformtypeidentifiers/uttype-swift.struct/png
-        Self(unsafe { NSPasteboardTypePNG }) // This is a rare case where there's a built-in NSPasteboardType
+        Self(unsafe { NSPasteboardTypePNG } as *const _ as id) // Built-in NSPasteboardType
     }

     pub fn jpeg() -> Self {
@@ -1619,7 +2127,7 @@ impl UTType {

     pub fn tiff() -> Self {
         // https://developer.apple.com/documentation/uniformtypeidentifiers/uttype-swift.struct/tiff
-        Self(unsafe { NSPasteboardTypeTIFF }) // This is a rare case where there's a built-in NSPasteboardType
+        Self(unsafe { NSPasteboardTypeTIFF } as *const _ as id) // Built-in NSPasteboardType
     }

     fn inner(&self) -> *const Object {
@@ -1665,7 +2173,7 @@ mod tests {
                 .0
                 .lock()
                 .pasteboard
-                .setData_forType(bytes, NSPasteboardTypeString);
+                .setData_forType(bytes, NSPasteboardTypeString as *const _ as id);
         }
         assert_eq!(
             platform.read_from_clipboard(),
diff --git a/crates/gpui/src/platform/mac/status_item.rs b/crates/gpui/src/platform/mac/status_item.rs
index 21cc86090c..652aec192b 100644
--- a/crates/gpui/src/platform/mac/status_item.rs
+++ b/crates/gpui/src/platform/mac/status_item.rs
@@ -1,388 +1,171 @@
-use crate::{
-    geometry::{
-        rect::RectF,
-        vector::{vec2f, Vector2F},
-    },
-    platform::{
-        self,
-        mac::{platform::NSViewLayerContentsRedrawDuringViewResize, renderer::Renderer},
-        Event, FontSystem, WindowBounds,
-    },
-    Scene,
-};
-use cocoa::{
-    appkit::{NSScreen, NSSquareStatusItemLength, NSStatusBar, NSStatusItem, NSView, NSWindow},
-    base::{id, nil, YES},
-    foundation::{NSPoint, NSRect, NSSize},
-};
-use ctor::ctor;
-use foreign_types::ForeignTypeRef;
-use objc::{
-    class,
-    declare::ClassDecl,
-    msg_send,
-    rc::StrongPtr,
-    runtime::{Class, Object, Protocol, Sel},
-    sel, sel_impl,
-};
-use std::{
-    cell::RefCell,
-    ffi::c_void,
-    ptr,
-    rc::{Rc, Weak},
-    sync::Arc,
-};
-
-use super::screen::Screen;
-
-static mut VIEW_CLASS: *const Class = ptr::null();
-const STATE_IVAR: &str = "state";
-
-#[ctor]
-unsafe fn build_classes() {
-    VIEW_CLASS = {
-        let mut decl = ClassDecl::new("GPUIStatusItemView", class!(NSView)).unwrap();
-        decl.add_ivar::<*mut c_void>(STATE_IVAR);
-
-        decl.add_method(sel!(dealloc), dealloc_view as extern "C" fn(&Object, Sel));
-
-        decl.add_method(
-            sel!(mouseDown:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(mouseUp:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(rightMouseDown:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(rightMouseUp:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(otherMouseDown:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(otherMouseUp:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(mouseMoved:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(mouseDragged:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(scrollWheel:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(flagsChanged:),
-            handle_view_event as extern "C" fn(&Object, Sel, id),
-        );
-        decl.add_method(
-            sel!(makeBackingLayer),
-            make_backing_layer as extern "C" fn(&Object, Sel) -> id,
-        );
-        decl.add_method(
-            sel!(viewDidChangeEffectiveAppearance),
-            view_did_change_effective_appearance as extern "C" fn(&Object, Sel),
-        );
-
-        decl.add_protocol(Protocol::get("CALayerDelegate").unwrap());
-        decl.add_method(
-            sel!(displayLayer:),
-            display_layer as extern "C" fn(&Object, Sel, id),
-        );
-
-        decl.register()
-    };
+use std::sync::Arc;
+
+use crate::platform::FontSystem;
+
+extern "C" {
+    fn zed_status_item_create() -> u64;
+    fn zed_status_item_set_title(id: u64, title: *const ::std::os::raw::c_char);
+    fn zed_status_item_remove(id: u64);
+    fn zed_status_item_set_image(
+        id: u64,
+        bytes: *const u8,
+        len: usize,
+        uti: *const ::std::os::raw::c_char,
+        is_template: bool,
+    );
+    fn zed_status_item_set_menu(id: u64, json: *const ::std::os::raw::c_char);
 }

-pub struct StatusItem(Rc<RefCell<StatusItemState>>);
-
-struct StatusItemState {
-    native_item: StrongPtr,
-    native_view: StrongPtr,
-    renderer: Renderer,
-    scene: Option<Scene>,
-    event_callback: Option<Box<dyn FnMut(Event) -> bool>>,
-    appearance_changed_callback: Option<Box<dyn FnMut()>>,
+pub struct StatusItem {
+    id: u64,
 }

 impl StatusItem {
-    pub fn add(fonts: Arc<dyn FontSystem>) -> Self {
-        unsafe {
-            let renderer = Renderer::new(false, fonts);
-            let status_bar = NSStatusBar::systemStatusBar(nil);
-            let native_item =
-                StrongPtr::retain(status_bar.statusItemWithLength_(NSSquareStatusItemLength));
-
-            let button = native_item.button();
-            let _: () = msg_send![button, setHidden: YES];
-
-            let native_view = msg_send![VIEW_CLASS, alloc];
-            let state = Rc::new(RefCell::new(StatusItemState {
-                native_item,
-                native_view: StrongPtr::new(native_view),
-                renderer,
-                scene: None,
-                event_callback: None,
-                appearance_changed_callback: None,
-            }));
-
-            let parent_view = button.superview().superview();
-            NSView::initWithFrame_(
-                native_view,
-                NSRect::new(NSPoint::new(0., 0.), NSView::frame(parent_view).size),
-            );
-            (*native_view).set_ivar(
-                STATE_IVAR,
-                Weak::into_raw(Rc::downgrade(&state)) as *const c_void,
-            );
-            native_view.setWantsBestResolutionOpenGLSurface_(YES);
-            native_view.setWantsLayer(YES);
-            let _: () = msg_send![
-                native_view,
-                setLayerContentsRedrawPolicy: NSViewLayerContentsRedrawDuringViewResize
-            ];
-
-            parent_view.addSubview_(native_view);
-
-            {
-                let state = state.borrow();
-                let layer = state.renderer.layer();
-                let scale_factor = state.scale_factor();
-                let size = state.content_size() * scale_factor;
-                layer.set_contents_scale(scale_factor.into());
-                layer.set_drawable_size(metal::CGSize::new(size.x().into(), size.y().into()));
-            }
-
-            Self(state)
+    pub fn add(_fonts: Arc<dyn FontSystem>) -> Self {
+        let id = unsafe { zed_status_item_create() };
+        // Give it a default title for now; callers can change it
+        if let Ok(c) = std::ffi::CString::new("Zed") {
+            unsafe { zed_status_item_set_title(id, c.as_ptr()) };
         }
-    }
-}
-
-impl platform::Window for StatusItem {
-    fn bounds(&self) -> WindowBounds {
-        self.0.borrow().bounds()
-    }
-
-    fn content_size(&self) -> Vector2F {
-        self.0.borrow().content_size()
+        Self { id }
     }

-    fn scale_factor(&self) -> f32 {
-        self.0.borrow().scale_factor()
-    }
-
-    fn appearance(&self) -> platform::Appearance {
-        unsafe {
-            let appearance: id =
-                msg_send![self.0.borrow().native_item.button(), effectiveAppearance];
-            platform::Appearance::from_native(appearance)
-        }
-    }
-
-    fn screen(&self) -> Rc<dyn platform::Screen> {
-        unsafe {
-            Rc::new(Screen {
-                native_screen: self.0.borrow().native_window().screen(),
-            })
+    pub fn set_title(&self, title: &str) {
+        if let Ok(c) = std::ffi::CString::new(title) {
+            unsafe { zed_status_item_set_title(self.id, c.as_ptr()) };
         }
     }

-    fn mouse_position(&self) -> Vector2F {
-        unimplemented!()
-    }
-
-    fn as_any_mut(&mut self) -> &mut dyn std::any::Any {
-        self
-    }
-
-    fn set_input_handler(&mut self, _: Box<dyn platform::InputHandler>) {}
-
-    fn prompt(
-        &self,
-        _: crate::platform::PromptLevel,
-        _: &str,
-        _: &[&str],
-    ) -> postage::oneshot::Receiver<usize> {
-        unimplemented!()
-    }
-
-    fn activate(&self) {
-        unimplemented!()
-    }
-
-    fn set_title(&mut self, _: &str) {
-        unimplemented!()
-    }
-
-    fn set_edited(&mut self, _: bool) {
-        unimplemented!()
-    }
-
-    fn show_character_palette(&self) {
-        unimplemented!()
-    }
-
-    fn minimize(&self) {
-        unimplemented!()
-    }
-
-    fn zoom(&self) {
-        unimplemented!()
-    }
-
-    fn present_scene(&mut self, scene: Scene) {
-        self.0.borrow_mut().scene = Some(scene);
-        unsafe {
-            let _: () = msg_send![*self.0.borrow().native_view, setNeedsDisplay: YES];
+    pub fn set_click_handler(&self, handler: Box<dyn FnMut() + Send>) {
+        register_status_item_handler(self.id, handler);
+    }
+
+    pub fn set_image(&self, format: crate::ImageFormat, bytes: &[u8], template: bool) {
+        let uti = match format {
+            crate::ImageFormat::Png => "public.png",
+            crate::ImageFormat::Jpeg => "public.jpeg",
+            crate::ImageFormat::Tiff => "public.tiff",
+            crate::ImageFormat::Webp => "org.webmproject.webp",
+            crate::ImageFormat::Gif => "com.compuserve.gif",
+            crate::ImageFormat::Bmp => "com.microsoft.bmp",
+            crate::ImageFormat::Svg => "public.svg-image",
+        };
+        if let Ok(cuti) = std::ffi::CString::new(uti) {
+            unsafe {
+                zed_status_item_set_image(
+                    self.id,
+                    bytes.as_ptr(),
+                    bytes.len(),
+                    cuti.as_ptr(),
+                    template,
+                )
+            };
         }
     }
+}

-    fn toggle_fullscreen(&self) {
-        unimplemented!()
-    }
-
-    fn on_event(&mut self, callback: Box<dyn FnMut(platform::Event) -> bool>) {
-        self.0.borrow_mut().event_callback = Some(callback);
+impl Drop for StatusItem {
+    fn drop(&mut self) {
+        unregister_status_item_handler(self.id);
+        unsafe { zed_status_item_remove(self.id) };
     }
+}

-    fn on_active_status_change(&mut self, _: Box<dyn FnMut(bool)>) {}
-
-    fn on_resize(&mut self, _: Box<dyn FnMut()>) {}
-
-    fn on_fullscreen(&mut self, _: Box<dyn FnMut(bool)>) {}
-
-    fn on_moved(&mut self, _: Box<dyn FnMut()>) {}
-
-    fn on_should_close(&mut self, _: Box<dyn FnMut() -> bool>) {}
-
-    fn on_close(&mut self, _: Box<dyn FnOnce()>) {}
+// Click handler registry
+use std::collections::HashMap;
+use std::sync::{Mutex, OnceLock};

-    fn on_appearance_changed(&mut self, callback: Box<dyn FnMut()>) {
-        self.0.borrow_mut().appearance_changed_callback = Some(callback);
-    }
+static STATUS_ITEM_HANDLERS: OnceLock<Mutex<HashMap<u64, Box<dyn FnMut() + Send>>>> = OnceLock::new();

-    fn is_topmost_for_position(&self, _: Vector2F) -> bool {
-        true
-    }
+fn register_status_item_handler(id: u64, handler: Box<dyn FnMut() + Send>) {
+    STATUS_ITEM_HANDLERS
+        .get_or_init(|| Mutex::new(HashMap::new()))
+        .lock()
+        .unwrap()
+        .insert(id, handler);
 }

-impl StatusItemState {
-    fn bounds(&self) -> WindowBounds {
-        unsafe {
-            let window: id = self.native_window();
-            let screen_frame = window.screen().visibleFrame();
-            let window_frame = NSWindow::frame(window);
-            let origin = vec2f(
-                window_frame.origin.x as f32,
-                (window_frame.origin.y - screen_frame.size.height - window_frame.size.height)
-                    as f32,
-            );
-            let size = vec2f(
-                window_frame.size.width as f32,
-                window_frame.size.height as f32,
-            );
-            WindowBounds::Fixed(RectF::new(origin, size))
-        }
-    }
-
-    fn content_size(&self) -> Vector2F {
-        unsafe {
-            let NSSize { width, height, .. } =
-                NSView::frame(self.native_item.button().superview().superview()).size;
-            vec2f(width as f32, height as f32)
-        }
-    }
-
-    fn scale_factor(&self) -> f32 {
-        unsafe {
-            let window: id = msg_send![self.native_item.button(), window];
-            NSScreen::backingScaleFactor(window.screen()) as f32
-        }
-    }
+fn unregister_status_item_handler(id: u64) {
+    STATUS_ITEM_HANDLERS
+        .get_or_init(|| Mutex::new(HashMap::new()))
+        .lock()
+        .unwrap()
+        .remove(&id);
+}

-    pub fn native_window(&self) -> id {
-        unsafe { msg_send![self.native_item.button(), window] }
+#[no_mangle]
+pub extern "C" fn gpui_status_item_clicked(id: u64) {
+    if let Some(mut handler) = STATUS_ITEM_HANDLERS
+        .get_or_init(|| Mutex::new(HashMap::new()))
+        .lock()
+        .unwrap()
+        .get_mut(&id)
+    {
+        handler();
     }
 }

-extern "C" fn dealloc_view(this: &Object, _: Sel) {
-    unsafe {
-        drop_state(this);
+// Status item menu support
+use crate::menu::{Menu as AppMenu, MenuItem as AppMenuItem};

-        let _: () = msg_send![super(this, class!(NSView)), dealloc];
-    }
-}
+static STATUS_ITEM_MENU_ACTIONS: OnceLock<Mutex<HashMap<u64, Vec<Box<dyn crate::Action + Send>>>>> = OnceLock::new();

-extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: id) {
-    unsafe {
-        if let Some(state) = get_state(this).upgrade() {
-            let mut state_borrow = state.as_ref().borrow_mut();
-            if let Some(event) =
-                Event::from_native(native_event, Some(state_borrow.content_size().y()))
-            {
-                if let Some(mut callback) = state_borrow.event_callback.take() {
-                    drop(state_borrow);
-                    callback(event);
-                    state.borrow_mut().event_callback = Some(callback);
+impl StatusItem {
+    pub fn set_menu(&self, menu: &AppMenu) {
+        // Build JSON and tag -> action map per status item id
+        #[derive(serde::Serialize)]
+        #[serde(tag = "kind", rename_all = "lowercase")]
+        enum JsItem<'a> { Action { title: &'a str, tag: u64 }, Separator, Submenu { title: &'a str, items: Vec<JsItem<'a>> } }
+        #[derive(serde::Serialize)]
+        struct JsSpec<'a> { items: Vec<JsItem<'a>> }
+
+        let mut actions = Vec::<Box<dyn crate::Action + Send>>::new();
+        fn encode_items<'a>(src: &'a [AppMenuItem], actions: &mut Vec<Box<dyn crate::Action + Send>>, out: &mut Vec<JsItem<'a>>) {
+            for item in src {
+                match item {
+                    AppMenuItem::Separator => out.push(JsItem::Separator),
+                    AppMenuItem::Action { name, action, .. } => {
+                        let tag = actions.len() as u64;
+                        actions.push(action.boxed_clone());
+                        out.push(JsItem::Action { title: name, tag });
+                    }
+                    AppMenuItem::Submenu(AppMenu { name, items }) => {
+                        let mut sub = Vec::new();
+                        encode_items(items, actions, &mut sub);
+                        out.push(JsItem::Submenu { title: name, items: sub });
+                    }
+                    AppMenuItem::SystemMenu(_) => {
+                        // Not supported in status item menu context currently
+                    }
                 }
             }
         }
-    }
-}

-extern "C" fn make_backing_layer(this: &Object, _: Sel) -> id {
-    if let Some(state) = unsafe { get_state(this).upgrade() } {
-        let state = state.borrow();
-        state.renderer.layer().as_ptr() as id
-    } else {
-        nil
-    }
-}
-
-extern "C" fn display_layer(this: &Object, _: Sel, _: id) {
-    unsafe {
-        if let Some(state) = get_state(this).upgrade() {
-            let mut state = state.borrow_mut();
-            if let Some(scene) = state.scene.take() {
-                state.renderer.render(&scene);
-            }
+        let mut js_items = Vec::new();
+        encode_items(&menu.items, &mut actions, &mut js_items);
+        let spec = JsSpec { items: js_items };
+        let json = serde_json::to_string(&spec).unwrap_or_else(|_| "{\"items\":[]}".into());
+        STATUS_ITEM_MENU_ACTIONS
+            .get_or_init(|| Mutex::new(HashMap::new()))
+            .lock()
+            .unwrap()
+            .insert(self.id, actions);
+        if let Ok(cjson) = std::ffi::CString::new(json) {
+            unsafe { zed_status_item_set_menu(self.id, cjson.as_ptr()) };
         }
     }
 }

-extern "C" fn view_did_change_effective_appearance(this: &Object, _: Sel) {
-    unsafe {
-        if let Some(state) = get_state(this).upgrade() {
-            let mut state_borrow = state.as_ref().borrow_mut();
-            if let Some(mut callback) = state_borrow.appearance_changed_callback.take() {
-                drop(state_borrow);
-                callback();
-                state.borrow_mut().appearance_changed_callback = Some(callback);
-            }
+#[no_mangle]
+pub extern "C" fn gpui_status_item_menu_action(id: u64, tag: u64) {
+    if let Some(vec) = STATUS_ITEM_MENU_ACTIONS
+        .get_or_init(|| Mutex::new(HashMap::new()))
+        .lock()
+        .unwrap()
+        .get_mut(&id)
+    {
+        if let Some(action) = vec.get(tag as usize) {
+            super::platform::dispatch_menu_action(action.as_ref());
         }
     }
 }
-
-unsafe fn get_state(object: &Object) -> Weak<RefCell<StatusItemState>> {
-    let raw: *mut c_void = *object.get_ivar(STATE_IVAR);
-    let weak1 = Weak::from_raw(raw as *mut RefCell<StatusItemState>);
-    let weak2 = weak1.clone();
-    let _ = Weak::into_raw(weak1);
-    weak2
-}
-
-unsafe fn drop_state(object: &Object) {
-    let raw: *const c_void = *object.get_ivar(STATE_IVAR);
-    Weak::from_raw(raw as *const RefCell<StatusItemState>);
-}
diff --git a/crates/gpui/src/platform/mac/text_system.rs b/crates/gpui/src/platform/mac/text_system.rs
index 72a0f2e565..e0487406f4 100644
--- a/crates/gpui/src/platform/mac/text_system.rs
+++ b/crates/gpui/src/platform/mac/text_system.rs
@@ -660,11 +660,10 @@ mod lenient_font_attributes {
     }

     unsafe fn wrap_under_get_rule(reference: CFStringRef) -> CFString {
-        unsafe {
-            assert!(!reference.is_null(), "Attempted to create a NULL object.");
-            let reference = CFRetain(reference as *const ::std::os::raw::c_void) as CFStringRef;
-            TCFType::wrap_under_create_rule(reference)
-        }
+        assert!(!reference.is_null(), "Attempted to create a NULL object.");
+        let reference =
+            unsafe { CFRetain(reference as *const ::std::os::raw::c_void) as CFStringRef };
+        unsafe { TCFType::wrap_under_create_rule(reference) }
     }
 }

diff --git a/crates/gpui/src/platform/mac/window.rs b/crates/gpui/src/platform/mac/window.rs
index 1230a70406..da28ede04d 100644
--- a/crates/gpui/src/platform/mac/window.rs
+++ b/crates/gpui/src/platform/mac/window.rs
@@ -9,26 +9,74 @@ use crate::{
     dispatch_sys::dispatch_async_f, platform::PlatformInputHandler, point, px, size,
 };
 use block::ConcreteBlock;
-use cocoa::{
-    appkit::{
-        NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
-        NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
-        NSView, NSViewHeightSizable, NSViewWidthSizable, NSVisualEffectMaterial,
-        NSVisualEffectState, NSVisualEffectView, NSWindow, NSWindowButton,
-        NSWindowCollectionBehavior, NSWindowOcclusionState, NSWindowOrderingMode,
-        NSWindowStyleMask, NSWindowTitleVisibility,
-    },
-    base::{id, nil},
-    foundation::{
-        NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
-        NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
-        NSUserDefaults,
-    },
-};
+// Remove Cocoa trait usage; rely on Objective-C runtime + typed constants later

+// No Cocoa enums/flags needed here after migration
+use cocoa::foundation::{
+    NSAutoreleasePool, NSNotFound, NSPoint, NSRect, NSSize, NSString, NSUserDefaults,
+};
 use core_graphics::display::{CGDirectDisplayID, CGPoint, CGRect};
 use ctor::ctor;
 use futures::channel::oneshot;
+use icrate::AppKit::{
+    // Alert styles
+    NSAlertStyleCritical,
+    NSAlertStyleInformational,
+    NSAlertStyleWarning,
+    NSAppKitVersionNumber,
+    NSAppKitVersionNumber12_0,
+    NSBackingStoreBuffered,
+    // Drag operation flags
+    NSDragOperation,
+    NSDragOperationCopy,
+    NSDragOperationNone,
+    // Event modifier flags
+    NSEventModifierFlagCapsLock,
+    NSEventModifierFlagCommand,
+    NSEventModifierFlagControl,
+    NSEventModifierFlagFunction,
+    NSEventModifierFlagOption,
+    NSEventModifierFlagShift,
+    // Pasteboard types
+    NSFilenamesPboardType,
+    NSTrackingActiveAlways,
+    NSTrackingInVisibleRect,
+    // Tracking area flags
+    NSTrackingMouseEnteredAndExited,
+    NSTrackingMouseMoved,
+    NSViewHeightSizable,
+    // View layer redraw policy
+    NSViewLayerContentsRedrawDuringViewResize,
+    // Autoresizing mask options
+    NSViewWidthSizable,
+    // Visual effect
+    NSVisualEffectStateActive,
+    // Ordering
+    NSWindowAbove,
+    // Animation behavior
+    NSWindowAnimationBehaviorUtilityWindow,
+    NSWindowBelow,
+    // Window button enum values
+    NSWindowCloseButton,
+    // Collection behavior
+    NSWindowCollectionBehaviorCanJoinAllSpaces,
+    NSWindowCollectionBehaviorFullScreenAuxiliary,
+    NSWindowMiniaturizeButton,
+    // Style masks
+    NSWindowStyleMask,
+    NSWindowStyleMaskClosable,
+    NSWindowStyleMaskFullScreen,
+    NSWindowStyleMaskFullSizeContentView,
+    NSWindowStyleMaskMiniaturizable,
+    NSWindowStyleMaskNonactivatingPanel,
+    NSWindowStyleMaskResizable,
+    NSWindowStyleMaskTitled,
+    // Title visibility
+    NSWindowTitleHidden,
+    NSWindowZoomButton,
+};
+use icrate::Foundation::NSOperatingSystemVersion;
+use icrate::Foundation::{NSInteger, NSUInteger};
 use objc::{
     class,
     declare::ClassDecl,
@@ -36,6 +84,8 @@ use objc::{
     runtime::{BOOL, Class, NO, Object, Protocol, Sel, YES},
     sel, sel_impl,
 };
+type ObjcId = *mut Object;
+const NIL: ObjcId = std::ptr::null_mut();
 use parking_lot::Mutex;
 use raw_window_handle as rwh;
 use smallvec::SmallVec;
@@ -59,31 +109,18 @@ static mut PANEL_CLASS: *const Class = ptr::null();
 static mut VIEW_CLASS: *const Class = ptr::null();
 static mut BLURRED_VIEW_CLASS: *const Class = ptr::null();

+use icrate::AppKit::NSWindowLevel;
 #[allow(non_upper_case_globals)]
-const NSWindowStyleMaskNonactivatingPanel: NSWindowStyleMask =
-    NSWindowStyleMask::from_bits_retain(1 << 7);
-#[allow(non_upper_case_globals)]
-const NSNormalWindowLevel: NSInteger = 0;
-#[allow(non_upper_case_globals)]
-const NSPopUpWindowLevel: NSInteger = 101;
-#[allow(non_upper_case_globals)]
-const NSTrackingMouseEnteredAndExited: NSUInteger = 0x01;
-#[allow(non_upper_case_globals)]
-const NSTrackingMouseMoved: NSUInteger = 0x02;
-#[allow(non_upper_case_globals)]
-const NSTrackingActiveAlways: NSUInteger = 0x80;
+const WINDOW_LEVEL_NORMAL: NSWindowLevel = 0;
 #[allow(non_upper_case_globals)]
-const NSTrackingInVisibleRect: NSUInteger = 0x200;
-#[allow(non_upper_case_globals)]
-const NSWindowAnimationBehaviorUtilityWindow: NSInteger = 4;
-#[allow(non_upper_case_globals)]
-const NSViewLayerContentsRedrawDuringViewResize: NSInteger = 2;
-// https://developer.apple.com/documentation/appkit/nsdragoperation
-type NSDragOperation = NSUInteger;
-#[allow(non_upper_case_globals)]
-const NSDragOperationNone: NSDragOperation = 0;
-#[allow(non_upper_case_globals)]
-const NSDragOperationCopy: NSDragOperation = 1;
+const WINDOW_LEVEL_POPUP: NSWindowLevel = 101;
+// Event modifier masks
+const MOD_CAPS_LOCK: u64 = NSEventModifierFlagCapsLock as u64;
+const MOD_SHIFT: u64 = NSEventModifierFlagShift as u64;
+const MOD_CONTROL: u64 = NSEventModifierFlagControl as u64;
+const MOD_OPTION: u64 = NSEventModifierFlagOption as u64;
+const MOD_COMMAND: u64 = NSEventModifierFlagCommand as u64;
+const MOD_FUNCTION: u64 = NSEventModifierFlagFunction as u64;
 #[derive(PartialEq)]
 pub enum UserTabbingPreference {
     Never,
@@ -94,9 +131,9 @@ pub enum UserTabbingPreference {
 #[link(name = "CoreGraphics", kind = "framework")]
 unsafe extern "C" {
     // Widely used private APIs; Apple uses them for their Terminal.app.
-    fn CGSMainConnectionID() -> id;
+    fn CGSMainConnectionID() -> ObjcId;
     fn CGSSetWindowBackgroundBlurRadius(
-        connection_id: id,
+        connection_id: ObjcId,
         window_id: NSInteger,
         radius: i64,
     ) -> i32;
@@ -115,68 +152,68 @@ unsafe fn build_classes() {

                 decl.add_method(
                     sel!(performKeyEquivalent:),
-                    handle_key_equivalent as extern "C" fn(&Object, Sel, id) -> BOOL,
+                    handle_key_equivalent as extern "C" fn(&Object, Sel, ObjcId) -> BOOL,
                 );
                 decl.add_method(
                     sel!(keyDown:),
-                    handle_key_down as extern "C" fn(&Object, Sel, id),
+                    handle_key_down as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(keyUp:),
-                    handle_key_up as extern "C" fn(&Object, Sel, id),
+                    handle_key_up as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(mouseDown:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(mouseUp:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(rightMouseDown:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(rightMouseUp:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(otherMouseDown:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(otherMouseUp:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(mouseMoved:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(mouseExited:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(mouseDragged:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(scrollWheel:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(swipeWithEvent:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );
                 decl.add_method(
                     sel!(flagsChanged:),
-                    handle_view_event as extern "C" fn(&Object, Sel, id),
+                    handle_view_event as extern "C" fn(&Object, Sel, ObjcId),
                 );

                 decl.add_method(
                     sel!(makeBackingLayer),
-                    make_backing_layer as extern "C" fn(&Object, Sel) -> id,
+                    make_backing_layer as extern "C" fn(&Object, Sel) -> ObjcId,
                 );

                 decl.add_protocol(Protocol::get("CALayerDelegate").unwrap());
@@ -190,13 +227,13 @@ unsafe fn build_classes() {
                 );
                 decl.add_method(
                     sel!(displayLayer:),
-                    display_layer as extern "C" fn(&Object, Sel, id),
+                    display_layer as extern "C" fn(&Object, Sel, ObjcId),
                 );

                 decl.add_protocol(Protocol::get("NSTextInputClient").unwrap());
                 decl.add_method(
                     sel!(validAttributesForMarkedText),
-                    valid_attributes_for_marked_text as extern "C" fn(&Object, Sel) -> id,
+                    valid_attributes_for_marked_text as extern "C" fn(&Object, Sel) -> ObjcId,
                 );
                 decl.add_method(
                     sel!(hasMarkedText),
@@ -213,21 +250,21 @@ unsafe fn build_classes() {
                 decl.add_method(
                     sel!(firstRectForCharacterRange:actualRange:),
                     first_rect_for_character_range
-                        as extern "C" fn(&Object, Sel, NSRange, id) -> NSRect,
+                        as extern "C" fn(&Object, Sel, NSRange, ObjcId) -> NSRect,
                 );
                 decl.add_method(
                     sel!(insertText:replacementRange:),
-                    insert_text as extern "C" fn(&Object, Sel, id, NSRange),
+                    insert_text as extern "C" fn(&Object, Sel, ObjcId, NSRange),
                 );
                 decl.add_method(
                     sel!(setMarkedText:selectedRange:replacementRange:),
-                    set_marked_text as extern "C" fn(&Object, Sel, id, NSRange, NSRange),
+                    set_marked_text as extern "C" fn(&Object, Sel, ObjcId, NSRange, NSRange),
                 );
                 decl.add_method(sel!(unmarkText), unmark_text as extern "C" fn(&Object, Sel));
                 decl.add_method(
                     sel!(attributedSubstringForProposedRange:actualRange:),
                     attributed_substring_for_proposed_range
-                        as extern "C" fn(&Object, Sel, NSRange, *mut c_void) -> id,
+                        as extern "C" fn(&Object, Sel, NSRange, *mut c_void) -> ObjcId,
                 );
                 decl.add_method(
                     sel!(viewDidChangeEffectiveAppearance),
@@ -242,7 +279,7 @@ unsafe fn build_classes() {

                 decl.add_method(
                     sel!(acceptsFirstMouse:),
-                    accepts_first_mouse as extern "C" fn(&Object, Sel, id) -> BOOL,
+                    accepts_first_mouse as extern "C" fn(&Object, Sel, ObjcId) -> BOOL,
                 );

                 decl.add_method(
@@ -257,7 +294,7 @@ unsafe fn build_classes() {
             unsafe {
                 decl.add_method(
                     sel!(initWithFrame:),
-                    blurred_view_init_with_frame as extern "C" fn(&Object, Sel, NSRect) -> id,
+                    blurred_view_init_with_frame as extern "C" fn(&Object, Sel, NSRect) -> ObjcId,
                 );
                 decl.add_method(
                     sel!(updateLayer),
@@ -293,92 +330,92 @@ unsafe fn build_window_class(name: &'static str, superclass: &Class) -> *const C
         );
         decl.add_method(
             sel!(windowDidResize:),
-            window_did_resize as extern "C" fn(&Object, Sel, id),
+            window_did_resize as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowDidChangeOcclusionState:),
-            window_did_change_occlusion_state as extern "C" fn(&Object, Sel, id),
+            window_did_change_occlusion_state as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowWillEnterFullScreen:),
-            window_will_enter_fullscreen as extern "C" fn(&Object, Sel, id),
+            window_will_enter_fullscreen as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowWillExitFullScreen:),
-            window_will_exit_fullscreen as extern "C" fn(&Object, Sel, id),
+            window_will_exit_fullscreen as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowDidMove:),
-            window_did_move as extern "C" fn(&Object, Sel, id),
+            window_did_move as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowDidChangeScreen:),
-            window_did_change_screen as extern "C" fn(&Object, Sel, id),
+            window_did_change_screen as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowDidBecomeKey:),
-            window_did_change_key_status as extern "C" fn(&Object, Sel, id),
+            window_did_change_key_status as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowDidResignKey:),
-            window_did_change_key_status as extern "C" fn(&Object, Sel, id),
+            window_did_change_key_status as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(windowShouldClose:),
-            window_should_close as extern "C" fn(&Object, Sel, id) -> BOOL,
+            window_should_close as extern "C" fn(&Object, Sel, ObjcId) -> BOOL,
         );

         decl.add_method(sel!(close), close_window as extern "C" fn(&Object, Sel));

         decl.add_method(
             sel!(draggingEntered:),
-            dragging_entered as extern "C" fn(&Object, Sel, id) -> NSDragOperation,
+            dragging_entered as extern "C" fn(&Object, Sel, ObjcId) -> NSDragOperation,
         );
         decl.add_method(
             sel!(draggingUpdated:),
-            dragging_updated as extern "C" fn(&Object, Sel, id) -> NSDragOperation,
+            dragging_updated as extern "C" fn(&Object, Sel, ObjcId) -> NSDragOperation,
         );
         decl.add_method(
             sel!(draggingExited:),
-            dragging_exited as extern "C" fn(&Object, Sel, id),
+            dragging_exited as extern "C" fn(&Object, Sel, ObjcId),
         );
         decl.add_method(
             sel!(performDragOperation:),
-            perform_drag_operation as extern "C" fn(&Object, Sel, id) -> BOOL,
+            perform_drag_operation as extern "C" fn(&Object, Sel, ObjcId) -> BOOL,
         );
         decl.add_method(
             sel!(concludeDragOperation:),
-            conclude_drag_operation as extern "C" fn(&Object, Sel, id),
+            conclude_drag_operation as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(addTitlebarAccessoryViewController:),
-            add_titlebar_accessory_view_controller as extern "C" fn(&Object, Sel, id),
+            add_titlebar_accessory_view_controller as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(moveTabToNewWindow:),
-            move_tab_to_new_window as extern "C" fn(&Object, Sel, id),
+            move_tab_to_new_window as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(mergeAllWindows:),
-            merge_all_windows as extern "C" fn(&Object, Sel, id),
+            merge_all_windows as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(selectNextTab:),
-            select_next_tab as extern "C" fn(&Object, Sel, id),
+            select_next_tab as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(selectPreviousTab:),
-            select_previous_tab as extern "C" fn(&Object, Sel, id),
+            select_previous_tab as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.add_method(
             sel!(toggleTabBar:),
-            toggle_tab_bar as extern "C" fn(&Object, Sel, id),
+            toggle_tab_bar as extern "C" fn(&Object, Sel, ObjcId),
         );

         decl.register()
@@ -388,9 +425,9 @@ unsafe fn build_window_class(name: &'static str, superclass: &Class) -> *const C
 struct MacWindowState {
     handle: AnyWindowHandle,
     executor: ForegroundExecutor,
-    native_window: id,
+    native_window: ObjcId,
     native_view: NonNull<Object>,
-    blurred_view: Option<id>,
+    blurred_view: Option<ObjcId>,
     display_link: Option<DisplayLink>,
     renderer: renderer::Renderer,
     request_frame_callback: Option<Box<dyn FnMut(RequestFrameOptions)>>,
@@ -432,17 +469,17 @@ impl MacWindowState {
             let titlebar_height = self.titlebar_height();

             unsafe {
-                let close_button: id = msg_send![
+                let close_button: ObjcId = msg_send![
                     self.native_window,
-                    standardWindowButton: NSWindowButton::NSWindowCloseButton
+                    standardWindowButton: NSWindowCloseButton
                 ];
-                let min_button: id = msg_send![
+                let min_button: ObjcId = msg_send![
                     self.native_window,
-                    standardWindowButton: NSWindowButton::NSWindowMiniaturizeButton
+                    standardWindowButton: NSWindowMiniaturizeButton
                 ];
-                let zoom_button: id = msg_send![
+                let zoom_button: ObjcId = msg_send![
                     self.native_window,
-                    standardWindowButton: NSWindowButton::NSWindowZoomButton
+                    standardWindowButton: NSWindowZoomButton
                 ];

                 let mut close_button_frame: CGRect = msg_send![close_button, frame];
@@ -475,15 +512,15 @@ impl MacWindowState {
     fn start_display_link(&mut self) {
         self.stop_display_link();
         unsafe {
-            if !self
-                .native_window
-                .occlusionState()
-                .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
-            {
+            let is_visible: BOOL = msg_send![self.native_window, isVisible];
+            if is_visible != YES {
                 return;
             }
         }
-        let display_id = unsafe { display_id_for_screen(self.native_window.screen()) };
+        let display_id = unsafe {
+            let screen: ObjcId = msg_send![self.native_window, screen];
+            display_id_for_screen(screen)
+        };
         if let Some(mut display_link) =
             DisplayLink::new(display_id, self.native_view.as_ptr() as *mut c_void, step).log_err()
         {
@@ -499,23 +536,25 @@ impl MacWindowState {
     fn is_maximized(&self) -> bool {
         unsafe {
             let bounds = self.bounds();
-            let screen_size = self.native_window.screen().visibleFrame().into();
+            let screen: ObjcId = msg_send![self.native_window, screen];
+            let vis: NSRect = msg_send![screen, visibleFrame];
+            let screen_size: Size<Pixels> = vis.into();
             bounds.size == screen_size
         }
     }

     fn is_fullscreen(&self) -> bool {
         unsafe {
-            let style_mask = self.native_window.styleMask();
-            style_mask.contains(NSWindowStyleMask::NSFullScreenWindowMask)
+            let style_mask: NSWindowStyleMask = msg_send![self.native_window, styleMask];
+            (style_mask & NSWindowStyleMaskFullScreen) != 0
         }
     }

     fn bounds(&self) -> Bounds<Pixels> {
-        let mut window_frame = unsafe { NSWindow::frame(self.native_window) };
-        let screen_frame = unsafe {
-            let screen = NSWindow::screen(self.native_window);
-            NSScreen::frame(screen)
+        let mut window_frame: NSRect = unsafe { msg_send![self.native_window, frame] };
+        let screen_frame: NSRect = unsafe {
+            let screen: ObjcId = msg_send![self.native_window, screen];
+            msg_send![screen, frame]
         };

         // Flip the y coordinate to be top-left origin
@@ -535,9 +574,11 @@ impl MacWindowState {
     }

     fn content_size(&self) -> Size<Pixels> {
-        let NSSize { width, height, .. } =
-            unsafe { NSView::frame(self.native_window.contentView()) }.size;
-        size(px(width as f32), px(height as f32))
+        unsafe {
+            let content_view: ObjcId = msg_send![self.native_window, contentView];
+            let frame: NSRect = msg_send![content_view, frame];
+            size(px(frame.size.width as f32), px(frame.size.height as f32))
+        }
     }

     fn scale_factor(&self) -> f32 {
@@ -546,7 +587,7 @@ impl MacWindowState {

     fn titlebar_height(&self) -> Pixels {
         unsafe {
-            let frame = NSWindow::frame(self.native_window);
+            let frame: NSRect = msg_send![self.native_window, frame];
             let content_layout_rect: CGRect = msg_send![self.native_window, contentLayoutRect];
             px((frame.size.height - content_layout_rect.size.height) as f32)
         }
@@ -585,7 +626,8 @@ impl MacWindow {
         renderer_context: renderer::Context,
     ) -> Self {
         unsafe {
-            let pool = NSAutoreleasePool::new(nil);
+            // Use an autorelease pool via raw Objective-C messaging
+            let pool: ObjcId = msg_send![class!(NSAutoreleasePool), new];

             let allows_automatic_window_tabbing = tabbing_identifier.is_some();
             if allows_automatic_window_tabbing {
@@ -596,26 +638,24 @@ impl MacWindow {

             let mut style_mask;
             if let Some(titlebar) = titlebar.as_ref() {
-                style_mask =
-                    NSWindowStyleMask::NSClosableWindowMask | NSWindowStyleMask::NSTitledWindowMask;
+                style_mask = NSWindowStyleMaskClosable | NSWindowStyleMaskTitled;

                 if is_resizable {
-                    style_mask |= NSWindowStyleMask::NSResizableWindowMask;
+                    style_mask |= NSWindowStyleMaskResizable;
                 }

                 if is_minimizable {
-                    style_mask |= NSWindowStyleMask::NSMiniaturizableWindowMask;
+                    style_mask |= NSWindowStyleMaskMiniaturizable;
                 }

                 if titlebar.appears_transparent {
-                    style_mask |= NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+                    style_mask |= NSWindowStyleMaskFullSizeContentView;
                 }
             } else {
-                style_mask = NSWindowStyleMask::NSTitledWindowMask
-                    | NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+                style_mask = NSWindowStyleMaskTitled | NSWindowStyleMaskFullSizeContentView;
             }

-            let native_window: id = match kind {
+            let native_window: ObjcId = match kind {
                 WindowKind::Normal => msg_send![WINDOW_CLASS, alloc],
                 WindowKind::PopUp => {
                     style_mask |= NSWindowStyleMaskNonactivatingPanel;
@@ -627,14 +667,14 @@ impl MacWindow {
                 .and_then(MacDisplay::find_by_id)
                 .unwrap_or_else(MacDisplay::primary);

-            let mut target_screen = nil;
+            let mut target_screen = NIL;
             let mut screen_frame = None;

-            let screens = NSScreen::screens(nil);
-            let count: u64 = cocoa::foundation::NSArray::count(screens);
+            let screens: ObjcId = msg_send![class!(NSScreen), screens];
+            let count: u64 = msg_send![screens, count];
             for i in 0..count {
-                let screen = cocoa::foundation::NSArray::objectAtIndex(screens, i);
-                let frame = NSScreen::frame(screen);
+                let screen: ObjcId = msg_send![screens, objectAtIndex: i];
+                let frame: NSRect = msg_send![screen, frame];
                 let display_id = display_id_for_screen(screen);
                 if display_id == display.0 {
                     screen_frame = Some(frame);
@@ -643,41 +683,43 @@ impl MacWindow {
             }

             let screen_frame = screen_frame.unwrap_or_else(|| {
-                let screen = NSScreen::mainScreen(nil);
+                let screen: ObjcId = msg_send![class!(NSScreen), mainScreen];
                 target_screen = screen;
-                NSScreen::frame(screen)
+                let frame: NSRect = msg_send![screen, frame];
+                frame
             });

-            let window_rect = NSRect::new(
-                NSPoint::new(
-                    screen_frame.origin.x + bounds.origin.x.0 as f64,
-                    screen_frame.origin.y
+            let window_rect = NSRect {
+                origin: NSPoint {
+                    x: screen_frame.origin.x + bounds.origin.x.0 as f64,
+                    y: screen_frame.origin.y
                         + (display.bounds().size.height - bounds.origin.y).0 as f64,
-                ),
-                NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
-            );
+                },
+                size: NSSize {
+                    width: bounds.size.width.0 as f64,
+                    height: bounds.size.height.0 as f64,
+                },
+            };

-            let native_window = native_window.initWithContentRect_styleMask_backing_defer_screen_(
-                window_rect,
-                style_mask,
-                NSBackingStoreBuffered,
-                NO,
-                target_screen,
-            );
-            assert!(!native_window.is_null());
-            let () = msg_send![
-                native_window,
-                registerForDraggedTypes:
-                    NSArray::arrayWithObject(nil, NSFilenamesPboardType)
+            let native_window: ObjcId = msg_send![native_window,
+                initWithContentRect: window_rect
+                styleMask: style_mask
+                backing: NSBackingStoreBuffered
+                defer: NO
+                screen: target_screen
             ];
+            assert!(!native_window.is_null());
+            let types: ObjcId = msg_send![class!(NSArray), arrayWithObject: NSFilenamesPboardType];
+            let () = msg_send![native_window, registerForDraggedTypes: types];
             let () = msg_send![
                 native_window,
                 setReleasedWhenClosed: NO
             ];

-            let content_view = native_window.contentView();
-            let native_view: id = msg_send![VIEW_CLASS, alloc];
-            let native_view = NSView::initWithFrame_(native_view, NSView::bounds(content_view));
+            let content_view: ObjcId = msg_send![native_window, contentView];
+            let native_view: ObjcId = msg_send![VIEW_CLASS, alloc];
+            let view_bounds: NSRect = msg_send![content_view, bounds];
+            let native_view: ObjcId = msg_send![native_view, initWithFrame: view_bounds];
             assert!(!native_view.is_null());

             let mut window = Self(Arc::new(Mutex::new(MacWindowState {
@@ -728,7 +770,7 @@ impl MacWindow {
                 WINDOW_STATE_IVAR,
                 Arc::into_raw(window.0.clone()) as *const c_void,
             );
-            native_window.setDelegate_(native_window);
+            let _: () = msg_send![native_window, setDelegate: native_window];
             (*native_view).set_ivar(
                 WINDOW_STATE_IVAR,
                 Arc::into_raw(window.0.clone()) as *const c_void,
@@ -741,85 +783,91 @@ impl MacWindow {
                 window.set_title(title);
             }

-            native_window.setMovable_(is_movable as BOOL);
+            let _: () = msg_send![native_window, setMovable: (is_movable as BOOL)];

             if let Some(window_min_size) = window_min_size {
-                native_window.setContentMinSize_(NSSize {
+                let min_size = NSSize {
                     width: window_min_size.width.to_f64(),
                     height: window_min_size.height.to_f64(),
-                });
+                };
+                let _: () = msg_send![native_window, setContentMinSize: min_size];
             }

             if titlebar.is_none_or(|titlebar| titlebar.appears_transparent) {
-                native_window.setTitlebarAppearsTransparent_(YES);
-                native_window.setTitleVisibility_(NSWindowTitleVisibility::NSWindowTitleHidden);
+                let _: () = msg_send![native_window, setTitlebarAppearsTransparent: YES];
+                let _: () = msg_send![native_window, setTitleVisibility: NSWindowTitleHidden];
             }

-            native_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
-            native_view.setWantsBestResolutionOpenGLSurface_(YES);
+            let _: () = msg_send![native_view, setAutoresizingMask: NSViewWidthSizable | NSViewHeightSizable];
+            let _: () = msg_send![native_view, setWantsBestResolutionOpenGLSurface: YES];

             // From winit crate: On Mojave, views automatically become layer-backed shortly after
             // being added to a native_window. Changing the layer-backedness of a view breaks the
             // association between the view and its associated OpenGL context. To work around this,
             // on we explicitly make the view layer-backed up front so that AppKit doesn't do it
             // itself and break the association with its context.
-            native_view.setWantsLayer(YES);
+            let _: () = msg_send![native_view, setWantsLayer: YES];
             let _: () = msg_send![
             native_view,
             setLayerContentsRedrawPolicy: NSViewLayerContentsRedrawDuringViewResize
             ];

-            content_view.addSubview_(native_view.autorelease());
-            native_window.makeFirstResponder_(native_view);
+            let native_view: ObjcId = msg_send![native_view, autorelease];
+            let _: () = msg_send![content_view, addSubview: native_view];
+            let _: () = msg_send![native_window, makeFirstResponder: native_view];

             match kind {
                 WindowKind::Normal => {
-                    native_window.setLevel_(NSNormalWindowLevel);
-                    native_window.setAcceptsMouseMovedEvents_(YES);
+                    let _: () = msg_send![native_window, setLevel: WINDOW_LEVEL_NORMAL];
+                    let _: () = msg_send![native_window, setAcceptsMouseMovedEvents: YES];

                     if let Some(tabbing_identifier) = tabbing_identifier {
-                        let tabbing_id = NSString::alloc(nil).init_str(tabbing_identifier.as_str());
+                        let tabbing_id = NSString::alloc(NIL).init_str(tabbing_identifier.as_str());
                         let _: () = msg_send![native_window, setTabbingIdentifier: tabbing_id];
                     } else {
-                        let _: () = msg_send![native_window, setTabbingIdentifier:nil];
+                        let _: () = msg_send![native_window, setTabbingIdentifier:NIL];
                     }
                 }
                 WindowKind::PopUp => {
                     // Use a tracking area to allow receiving MouseMoved events even when
                     // the window or application aren't active, which is often the case
                     // e.g. for notification windows.
-                    let tracking_area: id = msg_send![class!(NSTrackingArea), alloc];
-                    let _: () = msg_send![
-                        tracking_area,
-                        initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
-                        options: NSTrackingMouseEnteredAndExited | NSTrackingMouseMoved | NSTrackingActiveAlways | NSTrackingInVisibleRect
-                        owner: native_view
-                        userInfo: nil
+                    let tracking_area: ObjcId = msg_send![class!(NSTrackingArea), alloc];
+                    let zero_rect = NSRect {
+                        origin: NSPoint { x: 0.0, y: 0.0 },
+                        size: NSSize {
+                            width: 0.0,
+                            height: 0.0,
+                        },
+                    };
+                    let _: () = msg_send![tracking_area,
+                                initWithRect: zero_rect
+                                options: NSTrackingMouseEnteredAndExited | NSTrackingMouseMoved | NSTrackingActiveAlways | NSTrackingInVisibleRect
+                                owner: native_view
+                        userInfo: NIL
                     ];
                     let _: () =
                         msg_send![native_view, addTrackingArea: tracking_area.autorelease()];

-                    native_window.setLevel_(NSPopUpWindowLevel);
+                    let _: () = msg_send![native_window, setLevel: WINDOW_LEVEL_POPUP];
                     let _: () = msg_send![
                         native_window,
                         setAnimationBehavior: NSWindowAnimationBehaviorUtilityWindow
                     ];
-                    native_window.setCollectionBehavior_(
-                        NSWindowCollectionBehavior::NSWindowCollectionBehaviorCanJoinAllSpaces |
-                        NSWindowCollectionBehavior::NSWindowCollectionBehaviorFullScreenAuxiliary
-                    );
+                    let behavior = NSWindowCollectionBehaviorCanJoinAllSpaces
+                        | NSWindowCollectionBehaviorFullScreenAuxiliary;
+                    let _: () = msg_send![native_window, setCollectionBehavior: behavior];
                 }
             }

-            let app = NSApplication::sharedApplication(nil);
-            let main_window: id = msg_send![app, mainWindow];
+            let app: ObjcId = msg_send![class!(NSApplication), sharedApplication];
+            let main_window: ObjcId = msg_send![app, mainWindow];
             if allows_automatic_window_tabbing
                 && !main_window.is_null()
                 && main_window != native_window
             {
-                let main_window_is_fullscreen = main_window
-                    .styleMask()
-                    .contains(NSWindowStyleMask::NSFullScreenWindowMask);
+                let main_style: NSWindowStyleMask = msg_send![main_window, styleMask];
+                let main_window_is_fullscreen = (main_style & NSWindowStyleMaskFullScreen) != 0;
                 let user_tabbing_preference = Self::get_user_tabbing_preference()
                     .unwrap_or(UserTabbingPreference::InFullScreen);
                 let should_add_as_tab = user_tabbing_preference == UserTabbingPreference::Always
@@ -832,31 +880,31 @@ impl MacWindow {
                     let main_window_visible: BOOL = msg_send![main_window, isVisible];

                     if main_window_can_tab == YES && main_window_visible == YES {
-                        let _: () = msg_send![main_window, addTabbedWindow: native_window ordered: NSWindowOrderingMode::NSWindowAbove];
+                        let _: () = msg_send![main_window, addTabbedWindow: native_window ordered: NSWindowAbove];

                         // Ensure the window is visible immediately after adding the tab, since the tab bar is updated with a new entry at this point.
                         // Note: Calling orderFront here can break fullscreen mode (makes fullscreen windows exit fullscreen), so only do this if the main window is not fullscreen.
                         if !main_window_is_fullscreen {
-                            let _: () = msg_send![native_window, orderFront: nil];
+                            let _: () = msg_send![native_window, orderFront: NIL];
                         }
                     }
                 }
             }

             if focus && show {
-                native_window.makeKeyAndOrderFront_(nil);
+                let _: () = msg_send![native_window, makeKeyAndOrderFront: NIL];
             } else if show {
-                native_window.orderFront_(nil);
+                let _: () = msg_send![native_window, orderFront: NIL];
             }

             // Set the initial position of the window to the specified origin.
             // Although we already specified the position using `initWithContentRect_styleMask_backing_defer_screen_`,
             // the window position might be incorrect if the main screen (the screen that contains the window that has focus)
             //  is different from the primary screen.
-            NSWindow::setFrameTopLeftPoint_(native_window, window_rect.origin);
+            let _: () = msg_send![native_window, setFrameTopLeftPoint: window_rect.origin];
             window.0.lock().move_traffic_light();

-            pool.drain();
+            let _: () = msg_send![pool, drain];

             window
         }
@@ -864,8 +912,8 @@ impl MacWindow {

     pub fn active_window() -> Option<AnyWindowHandle> {
         unsafe {
-            let app = NSApplication::sharedApplication(nil);
-            let main_window: id = msg_send![app, mainWindow];
+            let app: ObjcId = msg_send![class!(NSApplication), sharedApplication];
+            let main_window: ObjcId = msg_send![app, mainWindow];
             if main_window.is_null() {
                 return None;
             }
@@ -881,13 +929,13 @@ impl MacWindow {

     pub fn ordered_windows() -> Vec<AnyWindowHandle> {
         unsafe {
-            let app = NSApplication::sharedApplication(nil);
-            let windows: id = msg_send![app, orderedWindows];
+            let app: ObjcId = msg_send![class!(NSApplication), sharedApplication];
+            let windows: ObjcId = msg_send![app, orderedWindows];
             let count: NSUInteger = msg_send![windows, count];

             let mut window_handles = Vec::new();
             for i in 0..count {
-                let window: id = msg_send![windows, objectAtIndex:i];
+                let window: ObjcId = msg_send![windows, objectAtIndex:i];
                 if msg_send![window, isKindOfClass: WINDOW_CLASS] {
                     let handle = get_window_state(&*window).lock().handle;
                     window_handles.push(handle);
@@ -900,15 +948,15 @@ impl MacWindow {

     pub fn get_user_tabbing_preference() -> Option<UserTabbingPreference> {
         unsafe {
-            let defaults: id = NSUserDefaults::standardUserDefaults();
-            let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
-            let key = NSString::alloc(nil).init_str("AppleWindowTabbingMode");
+            let defaults: ObjcId = NSUserDefaults::standardUserDefaults();
+            let domain = NSString::alloc(NIL).init_str("NSGlobalDomain");
+            let key = NSString::alloc(NIL).init_str("AppleWindowTabbingMode");

-            let dict: id = msg_send![defaults, persistentDomainForName: domain];
-            let value: id = if !dict.is_null() {
+            let dict: ObjcId = msg_send![defaults, persistentDomainForName: domain];
+            let value: ObjcId = if !dict.is_null() {
                 msg_send![dict, objectForKey: key]
             } else {
-                nil
+                NIL
             };

             let value_str = if !value.is_null() {
@@ -933,14 +981,14 @@ impl Drop for MacWindow {
         let window = this.native_window;
         this.display_link.take();
         unsafe {
-            this.native_window.setDelegate_(nil);
+            let _: () = msg_send![this.native_window, setDelegate: NIL];
         }
         this.input_handler.take();
         this.executor
             .spawn(async move {
                 unsafe {
-                    window.close();
-                    window.autorelease();
+                    let _: () = msg_send![window, close];
+                    let _: ObjcId = msg_send![window, autorelease];
                 }
             })
             .detach();
@@ -970,10 +1018,11 @@ impl PlatformWindow for MacWindow {
         this.executor
             .spawn(async move {
                 unsafe {
-                    window.setContentSize_(NSSize {
+                    let new_size = NSSize {
                         width: size.width.0 as f64,
                         height: size.height.0 as f64,
-                    });
+                    };
+                    let _: () = msg_send![window, setContentSize: new_size];
                 }
             })
             .detach();
@@ -982,8 +1031,8 @@ impl PlatformWindow for MacWindow {
     fn merge_all_windows(&self) {
         let native_window = self.0.lock().native_window;
         unsafe extern "C" fn merge_windows_async(context: *mut std::ffi::c_void) {
-            let native_window = context as id;
-            let _: () = msg_send![native_window, mergeAllWindows:nil];
+            let native_window = context as ObjcId;
+            let _: () = msg_send![native_window, mergeAllWindows:NIL];
         }

         unsafe {
@@ -998,9 +1047,9 @@ impl PlatformWindow for MacWindow {
     fn move_tab_to_new_window(&self) {
         let native_window = self.0.lock().native_window;
         unsafe extern "C" fn move_tab_async(context: *mut std::ffi::c_void) {
-            let native_window = context as id;
-            let _: () = msg_send![native_window, moveTabToNewWindow:nil];
-            let _: () = msg_send![native_window, makeKeyAndOrderFront: nil];
+            let native_window = context as ObjcId;
+            let _: () = msg_send![native_window, moveTabToNewWindow:NIL];
+            let _: () = msg_send![native_window, makeKeyAndOrderFront: NIL];
         }

         unsafe {
@@ -1015,7 +1064,7 @@ impl PlatformWindow for MacWindow {
     fn toggle_window_tab_overview(&self) {
         let native_window = self.0.lock().native_window;
         unsafe {
-            let _: () = msg_send![native_window, toggleTabOverview:nil];
+            let _: () = msg_send![native_window, toggleTabOverview:NIL];
         }
     }

@@ -1030,10 +1079,10 @@ impl PlatformWindow for MacWindow {
             }

             if let Some(tabbing_identifier) = tabbing_identifier {
-                let tabbing_id = NSString::alloc(nil).init_str(tabbing_identifier.as_str());
+                let tabbing_id = NSString::alloc(NIL).init_str(tabbing_identifier.as_str());
                 let _: () = msg_send![native_window, setTabbingIdentifier: tabbing_id];
             } else {
-                let _: () = msg_send![native_window, setTabbingIdentifier:nil];
+                let _: () = msg_send![native_window, setTabbingIdentifier:NIL];
             }
         }
     }
@@ -1044,48 +1093,43 @@ impl PlatformWindow for MacWindow {

     fn appearance(&self) -> WindowAppearance {
         unsafe {
-            let appearance: id = msg_send![self.0.lock().native_window, effectiveAppearance];
+            let appearance: ObjcId = msg_send![self.0.lock().native_window, effectiveAppearance];
             WindowAppearance::from_native(appearance)
         }
     }

     fn display(&self) -> Option<Rc<dyn PlatformDisplay>> {
         unsafe {
-            let screen = self.0.lock().native_window.screen();
+            let screen: ObjcId = msg_send![self.0.lock().native_window, screen];
             if screen.is_null() {
                 return None;
             }
-            let device_description: id = msg_send![screen, deviceDescription];
-            let screen_number: id = NSDictionary::valueForKey_(
-                device_description,
-                NSString::alloc(nil).init_str("NSScreenNumber"),
-            );
-
-            let screen_number: u32 = msg_send![screen_number, unsignedIntValue];
-
+            let device_description: ObjcId = msg_send![screen, deviceDescription];
+            let screen_number_obj: ObjcId =
+                msg_send![device_description, valueForKey: ns_string("NSScreenNumber")];
+            let screen_number: u32 = msg_send![screen_number_obj, unsignedIntValue];
             Some(Rc::new(MacDisplay(screen_number)))
         }
     }

     fn mouse_position(&self) -> Point<Pixels> {
         let position = unsafe {
-            self.0
-                .lock()
-                .native_window
-                .mouseLocationOutsideOfEventStream()
+            msg_send![
+                self.0.lock().native_window,
+                mouseLocationOutsideOfEventStream
+            ]
         };
         convert_mouse_position(position, self.content_size().height)
     }

     fn modifiers(&self) -> Modifiers {
         unsafe {
-            let modifiers: NSEventModifierFlags = msg_send![class!(NSEvent), modifierFlags];
-
-            let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
-            let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
-            let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
-            let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
-            let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+            let modifiers: u64 = msg_send![class!(NSEvent), modifierFlags];
+            let control = (modifiers & MOD_CONTROL) != 0;
+            let alt = (modifiers & MOD_OPTION) != 0;
+            let shift = (modifiers & MOD_SHIFT) != 0;
+            let command = (modifiers & MOD_COMMAND) != 0;
+            let function = (modifiers & MOD_FUNCTION) != 0;

             Modifiers {
                 control,
@@ -1099,10 +1143,9 @@ impl PlatformWindow for MacWindow {

     fn capslock(&self) -> Capslock {
         unsafe {
-            let modifiers: NSEventModifierFlags = msg_send![class!(NSEvent), modifierFlags];
-
+            let modifiers: u64 = msg_send![class!(NSEvent), modifierFlags];
             Capslock {
-                on: modifiers.contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+                on: (modifiers & MOD_CAPS_LOCK) != 0,
             }
         }
     }
@@ -1148,12 +1191,12 @@ impl PlatformWindow for MacWindow {
             .filter(|&(label_index, _)| label_index > 0);

         unsafe {
-            let alert: id = msg_send![class!(NSAlert), alloc];
-            let alert: id = msg_send![alert, init];
+            let alert: ObjcId = msg_send![class!(NSAlert), alloc];
+            let alert: ObjcId = msg_send![alert, init];
             let alert_style = match level {
-                PromptLevel::Info => 1,
-                PromptLevel::Warning => 0,
-                PromptLevel::Critical => 2,
+                PromptLevel::Info => NSAlertStyleInformational,
+                PromptLevel::Warning => NSAlertStyleWarning,
+                PromptLevel::Critical => NSAlertStyleCritical,
             };
             let _: () = msg_send![alert, setAlertStyle: alert_style];
             let _: () = msg_send![alert, setMessageText: ns_string(msg)];
@@ -1166,7 +1209,8 @@ impl PlatformWindow for MacWindow {
                 .enumerate()
                 .filter(|&(ix, _)| Some(ix) != latest_non_cancel_label.map(|(ix, _)| ix))
             {
-                let button: id = msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
+                let button: ObjcId =
+                    msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
                 let _: () = msg_send![button, setTag: ix as NSInteger];

                 if answer.is_cancel() {
@@ -1178,7 +1222,8 @@ impl PlatformWindow for MacWindow {
                 }
             }
             if let Some((ix, answer)) = latest_non_cancel_label {
-                let button: id = msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
+                let button: ObjcId =
+                    msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
                 let _: () = msg_send![button, setTag: ix as NSInteger];
             }

@@ -1212,14 +1257,17 @@ impl PlatformWindow for MacWindow {
         executor
             .spawn(async move {
                 unsafe {
-                    let _: () = msg_send![window, makeKeyAndOrderFront: nil];
+                    let _: () = msg_send![window, makeKeyAndOrderFront: NIL];
                 }
             })
             .detach();
     }

     fn is_active(&self) -> bool {
-        unsafe { self.0.lock().native_window.isKeyWindow() == YES }
+        unsafe {
+            let is_key: BOOL = msg_send![self.0.lock().native_window, isKeyWindow];
+            is_key == YES
+        }
     }

     // is_hovered is unused on macOS. See Window::is_window_hovered.
@@ -1229,7 +1277,7 @@ impl PlatformWindow for MacWindow {

     fn set_title(&mut self, title: &str) {
         unsafe {
-            let app = NSApplication::sharedApplication(nil);
+            let app: ObjcId = msg_send![class!(NSApplication), sharedApplication];
             let window = self.0.lock().native_window;
             let title = ns_string(title);
             let _: () = msg_send![app, changeWindowsItem:window title:title filename:false];
@@ -1240,7 +1288,7 @@ impl PlatformWindow for MacWindow {

     fn get_title(&self) -> String {
         unsafe {
-            let title: id = msg_send![self.0.lock().native_window, title];
+            let title: ObjcId = msg_send![self.0.lock().native_window, title];
             if title.is_null() {
                 "".to_string()
             } else {
@@ -1258,14 +1306,14 @@ impl PlatformWindow for MacWindow {
         this.renderer.update_transparency(!opaque);

         unsafe {
-            this.native_window.setOpaque_(opaque as BOOL);
-            let background_color = if opaque {
-                NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 1f64)
+            let _: () = msg_send![this.native_window, setOpaque: (opaque as BOOL)];
+            let background_color: ObjcId = if opaque {
+                msg_send![class!(NSColor), colorWithSRGBRed: 0f64 green: 0f64 blue: 0f64 alpha: 1f64]
             } else {
                 // Not using `+[NSColor clearColor]` to avoid broken shadow.
-                NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 0.0001)
+                msg_send![class!(NSColor), colorWithSRGBRed: 0f64 green: 0f64 blue: 0f64 alpha: 0.0001f64]
             };
-            this.native_window.setBackgroundColor_(background_color);
+            let _: () = msg_send![this.native_window, setBackgroundColor: background_color];

             if NSAppKitVersionNumber < NSAppKitVersionNumber12_0 {
                 // Whether `-[NSVisualEffectView respondsToSelector:@selector(_updateProxyLayer)]`.
@@ -1277,7 +1325,7 @@ impl PlatformWindow for MacWindow {
                     0
                 };

-                let window_number = this.native_window.windowNumber();
+                let window_number: NSInteger = msg_send![this.native_window, windowNumber];
                 CGSSetWindowBackgroundBlurRadius(CGSMainConnectionID(), window_number, blur_radius);
             } else {
                 // On newer macOS `NSVisualEffectView` manages the effect layer directly. Using it
@@ -1285,23 +1333,19 @@ impl PlatformWindow for MacWindow {
                 // over the effect layer.
                 if background_appearance != WindowBackgroundAppearance::Blurred {
                     if let Some(blur_view) = this.blurred_view {
-                        NSView::removeFromSuperview(blur_view);
+                        let _: () = msg_send![blur_view, removeFromSuperview];
                         this.blurred_view = None;
                     }
                 } else if this.blurred_view.is_none() {
-                    let content_view = this.native_window.contentView();
-                    let frame = NSView::bounds(content_view);
-                    let mut blur_view: id = msg_send![BLURRED_VIEW_CLASS, alloc];
-                    blur_view = NSView::initWithFrame_(blur_view, frame);
-                    blur_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
-
-                    let _: () = msg_send![
-                        content_view,
-                        addSubview: blur_view
-                        positioned: NSWindowOrderingMode::NSWindowBelow
-                        relativeTo: nil
-                    ];
-                    this.blurred_view = Some(blur_view.autorelease());
+                    let content_view: ObjcId = msg_send![this.native_window, contentView];
+                    let blur_frame: NSRect = msg_send![content_view, bounds];
+                    let mut blur_view: ObjcId = msg_send![BLURRED_VIEW_CLASS, alloc];
+                    blur_view = msg_send![blur_view, initWithFrame: blur_frame];
+                    let _: () = msg_send![blur_view, setAutoresizingMask: NSViewWidthSizable | NSViewHeightSizable];
+
+                    let _: () = msg_send![content_view, addSubview: blur_view positioned: NSWindowBelow relativeTo: NIL];
+                    let blur_view: ObjcId = msg_send![blur_view, autorelease];
+                    this.blurred_view = Some(blur_view);
                 }
             }
         }
@@ -1324,7 +1368,7 @@ impl PlatformWindow for MacWindow {
         this.executor
             .spawn(async move {
                 unsafe {
-                    let app = NSApplication::sharedApplication(nil);
+                    let app: ObjcId = msg_send![class!(NSApplication), sharedApplication];
                     let _: () = msg_send![app, orderFrontCharacterPalette: window];
                 }
             })
@@ -1334,7 +1378,7 @@ impl PlatformWindow for MacWindow {
     fn minimize(&self) {
         let window = self.0.lock().native_window;
         unsafe {
-            window.miniaturize_(nil);
+            let _: () = msg_send![window, miniaturize: NIL];
         }
     }

@@ -1344,7 +1388,7 @@ impl PlatformWindow for MacWindow {
         this.executor
             .spawn(async move {
                 unsafe {
-                    window.zoom_(nil);
+                    let _: () = msg_send![window, zoom: NIL];
                 }
             })
             .detach();
@@ -1356,7 +1400,7 @@ impl PlatformWindow for MacWindow {
         this.executor
             .spawn(async move {
                 unsafe {
-                    window.toggleFullScreen_(nil);
+                    let _: () = msg_send![window, toggleFullScreen: NIL];
                 }
             })
             .detach();
@@ -1367,9 +1411,8 @@ impl PlatformWindow for MacWindow {
         let window = this.native_window;

         unsafe {
-            window
-                .styleMask()
-                .contains(NSWindowStyleMask::NSFullScreenWindowMask)
+            let mask: NSWindowStyleMask = msg_send![window, styleMask];
+            (mask & NSWindowStyleMaskFullScreen) != 0
         }
     }

@@ -1412,7 +1455,7 @@ impl PlatformWindow for MacWindow {

     fn tabbed_windows(&self) -> Option<Vec<SystemWindowTab>> {
         unsafe {
-            let windows: id = msg_send![self.0.lock().native_window, tabbedWindows];
+            let windows: ObjcId = msg_send![self.0.lock().native_window, tabbedWindows];
             if windows.is_null() {
                 return None;
             }
@@ -1420,10 +1463,10 @@ impl PlatformWindow for MacWindow {
             let count: NSUInteger = msg_send![windows, count];
             let mut result = Vec::new();
             for i in 0..count {
-                let window: id = msg_send![windows, objectAtIndex:i];
+                let window: ObjcId = msg_send![windows, objectAtIndex:i];
                 if msg_send![window, isKindOfClass: WINDOW_CLASS] {
                     let handle = get_window_state(&*window).lock().handle;
-                    let title: id = msg_send![window, title];
+                    let title: ObjcId = msg_send![window, title];
                     let title = SharedString::from(title.to_str().to_string());

                     result.push(SystemWindowTab::new(title, handle));
@@ -1436,7 +1479,7 @@ impl PlatformWindow for MacWindow {

     fn tab_bar_visible(&self) -> bool {
         unsafe {
-            let tab_group: id = msg_send![self.0.lock().native_window, tabGroup];
+            let tab_group: ObjcId = msg_send![self.0.lock().native_window, tabGroup];
             if tab_group.is_null() {
                 false
             } else {
@@ -1484,7 +1527,7 @@ impl PlatformWindow for MacWindow {
         executor
             .spawn(async move {
                 unsafe {
-                    let input_context: id =
+                    let input_context: ObjcId =
                         msg_send![class!(NSTextInputContext), currentInputContext];
                     if input_context.is_null() {
                         return;
@@ -1501,15 +1544,15 @@ impl PlatformWindow for MacWindow {
         this.executor
             .spawn(async move {
                 unsafe {
-                    let defaults: id = NSUserDefaults::standardUserDefaults();
-                    let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
-                    let key = NSString::alloc(nil).init_str("AppleActionOnDoubleClick");
+                    let defaults: ObjcId = NSUserDefaults::standardUserDefaults();
+                    let domain = NSString::alloc(NIL).init_str("NSGlobalDomain");
+                    let key = NSString::alloc(NIL).init_str("AppleActionOnDoubleClick");

-                    let dict: id = msg_send![defaults, persistentDomainForName: domain];
-                    let action: id = if !dict.is_null() {
+                    let dict: ObjcId = msg_send![defaults, persistentDomainForName: domain];
+                    let action: ObjcId = if !dict.is_null() {
                         msg_send![dict, objectForKey: key]
                     } else {
-                        nil
+                        NIL
                     };

                     let action_str = if !action.is_null() {
@@ -1520,17 +1563,17 @@ impl PlatformWindow for MacWindow {

                     match action_str.as_ref() {
                         "Minimize" => {
-                            window.miniaturize_(nil);
+                            let _: () = msg_send![window, miniaturize: NIL];
                         }
                         "Maximize" => {
-                            window.zoom_(nil);
+                            let _: () = msg_send![window, zoom: NIL];
                         }
                         "Fill" => {
                             // There is no documented API for "Fill" action, so we'll just zoom the window
-                            window.zoom_(nil);
+                            let _: () = msg_send![window, zoom: NIL];
                         }
                         _ => {
-                            window.zoom_(nil);
+                            let _: () = msg_send![window, zoom: NIL];
                         }
                     }
                 }
@@ -1561,13 +1604,14 @@ impl rwh::HasDisplayHandle for MacWindow {
     }
 }

-fn get_scale_factor(native_window: id) -> f32 {
+fn get_scale_factor(native_window: ObjcId) -> f32 {
     let factor = unsafe {
-        let screen: id = msg_send![native_window, screen];
+        let screen: ObjcId = msg_send![native_window, screen];
         if screen.is_null() {
             return 1.0;
         }
-        NSScreen::backingScaleFactor(screen) as f32
+        let scale: f64 = msg_send![screen, backingScaleFactor];
+        scale as f32
     };

     // We are not certain what triggers this, but it seems that sometimes
@@ -1614,15 +1658,15 @@ extern "C" fn dealloc_view(this: &Object, _: Sel) {
     }
 }

-extern "C" fn handle_key_equivalent(this: &Object, _: Sel, native_event: id) -> BOOL {
+extern "C" fn handle_key_equivalent(this: &Object, _: Sel, native_event: ObjcId) -> BOOL {
     handle_key_event(this, native_event, true)
 }

-extern "C" fn handle_key_down(this: &Object, _: Sel, native_event: id) {
+extern "C" fn handle_key_down(this: &Object, _: Sel, native_event: ObjcId) {
     handle_key_event(this, native_event, false);
 }

-extern "C" fn handle_key_up(this: &Object, _: Sel, native_event: id) {
+extern "C" fn handle_key_up(this: &Object, _: Sel, native_event: ObjcId) {
     handle_key_event(this, native_event, false);
 }

@@ -1651,7 +1695,7 @@ extern "C" fn handle_key_up(this: &Object, _: Sel, native_event: id) {
 //   - in vim mode `option-4`  should go to end of line (same as $)
 //  Japanese (Romaji) layout:
 //   - type `a i left down up enter enter` should create an unmarked text "愛"
-extern "C" fn handle_key_event(this: &Object, native_event: id, key_equivalent: bool) -> BOOL {
+extern "C" fn handle_key_event(this: &Object, native_event: ObjcId, key_equivalent: bool) -> BOOL {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();

@@ -1713,7 +1757,7 @@ extern "C" fn handle_key_event(this: &Object, native_event: id, key_equivalent:
                 }

                 let handled: BOOL = unsafe {
-                    let input_context: id = msg_send![this, inputContext];
+                    let input_context: ObjcId = msg_send![this, inputContext];
                     msg_send![input_context, handleEvent: native_event]
                 };
                 window_state.as_ref().lock().keystroke_for_do_command.take();
@@ -1754,7 +1798,7 @@ extern "C" fn handle_key_event(this: &Object, native_event: id, key_equivalent:
             }

             unsafe {
-                let input_context: id = msg_send![this, inputContext];
+                let input_context: ObjcId = msg_send![this, inputContext];
                 msg_send![input_context, handleEvent: native_event]
             }
         }
@@ -1768,7 +1812,7 @@ extern "C" fn handle_key_event(this: &Object, native_event: id, key_equivalent:
     }
 }

-extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: id) {
+extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let weak_window_state = Arc::downgrade(&window_state);
     let mut lock = window_state.as_ref().lock();
@@ -1838,7 +1882,7 @@ extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: id) {
             PlatformInput::MouseDown(_) => {
                 drop(lock);
                 unsafe {
-                    let input_context: id = msg_send![this, inputContext];
+                    let input_context: ObjcId = msg_send![this, inputContext];
                     msg_send![input_context, handleEvent: native_event]
                 }
                 lock = window_state.as_ref().lock();
@@ -1898,15 +1942,12 @@ extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: id) {
     }
 }

-extern "C" fn window_did_change_occlusion_state(this: &Object, _: Sel, _: id) {
+extern "C" fn window_did_change_occlusion_state(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let lock = &mut *window_state.lock();
     unsafe {
-        if lock
-            .native_window
-            .occlusionState()
-            .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
-        {
+        let is_visible: BOOL = msg_send![lock.native_window, isVisible];
+        if is_visible == YES {
             lock.move_traffic_light();
             lock.start_display_link();
         } else {
@@ -1915,43 +1956,55 @@ extern "C" fn window_did_change_occlusion_state(this: &Object, _: Sel, _: id) {
     }
 }

-extern "C" fn window_did_resize(this: &Object, _: Sel, _: id) {
+extern "C" fn window_did_resize(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     window_state.as_ref().lock().move_traffic_light();
 }

-extern "C" fn window_will_enter_fullscreen(this: &Object, _: Sel, _: id) {
+extern "C" fn window_will_enter_fullscreen(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     lock.fullscreen_restore_bounds = lock.bounds();

-    let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+    let min_version = NSOperatingSystemVersion {
+        majorVersion: 15,
+        minorVersion: 3,
+        patchVersion: 0,
+    };

     if is_macos_version_at_least(min_version) {
         unsafe {
-            lock.native_window.setTitlebarAppearsTransparent_(NO);
+            let _: () = msg_send![lock.native_window, setTitlebarAppearsTransparent: NO];
         }
     }
 }

-extern "C" fn window_will_exit_fullscreen(this: &Object, _: Sel, _: id) {
+extern "C" fn window_will_exit_fullscreen(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();

-    let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+    let min_version = NSOperatingSystemVersion {
+        majorVersion: 15,
+        minorVersion: 3,
+        patchVersion: 0,
+    };

     if is_macos_version_at_least(min_version) && lock.transparent_titlebar {
         unsafe {
-            lock.native_window.setTitlebarAppearsTransparent_(YES);
+            let _: () = msg_send![lock.native_window, setTitlebarAppearsTransparent: YES];
         }
     }
 }

 pub(crate) fn is_macos_version_at_least(version: NSOperatingSystemVersion) -> bool {
-    unsafe { NSProcessInfo::processInfo(nil).isOperatingSystemAtLeastVersion(version) }
+    unsafe {
+        let process_info: ObjcId = msg_send![class!(NSProcessInfo), processInfo];
+        let ok: BOOL = msg_send![process_info, isOperatingSystemAtLeastVersion: version];
+        ok == YES
+    }
 }

-extern "C" fn window_did_move(this: &Object, _: Sel, _: id) {
+extern "C" fn window_did_move(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     if let Some(mut callback) = lock.moved_callback.take() {
@@ -1961,16 +2014,19 @@ extern "C" fn window_did_move(this: &Object, _: Sel, _: id) {
     }
 }

-extern "C" fn window_did_change_screen(this: &Object, _: Sel, _: id) {
+extern "C" fn window_did_change_screen(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     lock.start_display_link();
 }

-extern "C" fn window_did_change_key_status(this: &Object, selector: Sel, _: id) {
+extern "C" fn window_did_change_key_status(this: &Object, selector: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.lock();
-    let is_active = unsafe { lock.native_window.isKeyWindow() == YES };
+    let is_active = unsafe {
+        let v: BOOL = msg_send![lock.native_window, isKeyWindow];
+        v == YES
+    };

     // When opening a pop-up while the application isn't active, Cocoa sends a spurious
     // `windowDidBecomeKey` message to the previous key window even though that window
@@ -2027,7 +2083,7 @@ extern "C" fn window_did_change_key_status(this: &Object, selector: Sel, _: id)
         .detach();
 }

-extern "C" fn window_should_close(this: &Object, _: Sel, _: id) -> BOOL {
+extern "C" fn window_should_close(this: &Object, _: Sel, _: ObjcId) -> BOOL {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     if let Some(mut callback) = lock.should_close_callback.take() {
@@ -2056,10 +2112,10 @@ extern "C" fn close_window(this: &Object, _: Sel) {
     }
 }

-extern "C" fn make_backing_layer(this: &Object, _: Sel) -> id {
+extern "C" fn make_backing_layer(this: &Object, _: Sel) -> ObjcId {
     let window_state = unsafe { get_window_state(this) };
     let window_state = window_state.as_ref().lock();
-    window_state.renderer.layer_ptr() as id
+    window_state.renderer.layer_ptr() as ObjcId
 }

 extern "C" fn view_did_change_backing_properties(this: &Object, _: Sel) {
@@ -2091,10 +2147,16 @@ extern "C" fn set_frame_size(this: &Object, _: Sel, size: NSSize) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();

-    let new_size = Size::<Pixels>::from(size);
+    let new_size = Size::<Pixels> {
+        width: px(size.width as f32),
+        height: px(size.height as f32),
+    };
     let old_size = unsafe {
         let old_frame: NSRect = msg_send![this, frame];
-        Size::<Pixels>::from(old_frame.size)
+        Size::<Pixels> {
+            width: px(old_frame.size.width as f32),
+            height: px(old_frame.size.height as f32),
+        }
     };

     if old_size == new_size {
@@ -2118,7 +2180,7 @@ extern "C" fn set_frame_size(this: &Object, _: Sel, size: NSSize) {
     };
 }

-extern "C" fn display_layer(this: &Object, _: Sel, _: id) {
+extern "C" fn display_layer(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.lock();
     if let Some(mut callback) = lock.request_frame_callback.take() {
@@ -2137,7 +2199,7 @@ extern "C" fn display_layer(this: &Object, _: Sel, _: id) {
 }

 unsafe extern "C" fn step(view: *mut c_void) {
-    let view = view as id;
+    let view = view as ObjcId;
     let window_state = unsafe { get_window_state(&*view) };
     let mut lock = window_state.lock();

@@ -2148,7 +2210,7 @@ unsafe extern "C" fn step(view: *mut c_void) {
     }
 }

-extern "C" fn valid_attributes_for_marked_text(_: &Object, _: Sel) -> id {
+extern "C" fn valid_attributes_for_marked_text(_: &Object, _: Sel) -> ObjcId {
     unsafe { msg_send![class!(NSArray), array] }
 }

@@ -2179,7 +2241,7 @@ extern "C" fn first_rect_for_character_range(
     this: &Object,
     _: Sel,
     range: NSRange,
-    _: id,
+    _: ObjcId,
 ) -> NSRect {
     let frame = get_frame(this);
     with_input_handler(this, |input_handler| {
@@ -2187,17 +2249,24 @@ extern "C" fn first_rect_for_character_range(
     })
     .flatten()
     .map_or(
-        NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
-        |bounds| {
-            NSRect::new(
-                NSPoint::new(
-                    frame.origin.x + bounds.origin.x.0 as f64,
-                    frame.origin.y + frame.size.height
-                        - bounds.origin.y.0 as f64
-                        - bounds.size.height.0 as f64,
-                ),
-                NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
-            )
+        NSRect {
+            origin: NSPoint { x: 0., y: 0. },
+            size: NSSize {
+                width: 0.,
+                height: 0.,
+            },
+        },
+        |bounds| NSRect {
+            origin: NSPoint {
+                x: frame.origin.x + bounds.origin.x.0 as f64,
+                y: frame.origin.y + frame.size.height
+                    - bounds.origin.y.0 as f64
+                    - bounds.size.height.0 as f64,
+            },
+            size: NSSize {
+                width: bounds.size.width.0 as f64,
+                height: bounds.size.height.0 as f64,
+            },
         },
     )
 }
@@ -2206,21 +2275,23 @@ fn get_frame(this: &Object) -> NSRect {
     unsafe {
         let state = get_window_state(this);
         let lock = state.lock();
-        let mut frame = NSWindow::frame(lock.native_window);
+        let mut frame: NSRect = msg_send![lock.native_window, frame];
         let content_layout_rect: CGRect = msg_send![lock.native_window, contentLayoutRect];
-        let style_mask: NSWindowStyleMask = msg_send![lock.native_window, styleMask];
-        if !style_mask.contains(NSWindowStyleMask::NSFullSizeContentViewWindowMask) {
-            frame.origin.y -= frame.size.height - content_layout_rect.size.height;
+        // Adjust Y-origin by the difference between full frame and content layout height
+        // when there is a titlebar/tool area. This avoids relying on deprecated bitmask names.
+        let diff = frame.size.height - content_layout_rect.size.height;
+        if diff > 0.0 {
+            frame.origin.y -= diff;
         }
         frame
     }
 }

-extern "C" fn insert_text(this: &Object, _: Sel, text: id, replacement_range: NSRange) {
+extern "C" fn insert_text(this: &Object, _: Sel, text: ObjcId, replacement_range: NSRange) {
     unsafe {
         let is_attributed_string: BOOL =
             msg_send![text, isKindOfClass: [class!(NSAttributedString)]];
-        let text: id = if is_attributed_string == YES {
+        let text: ObjcId = if is_attributed_string == YES {
             msg_send![text, string]
         } else {
             text
@@ -2237,14 +2308,14 @@ extern "C" fn insert_text(this: &Object, _: Sel, text: id, replacement_range: NS
 extern "C" fn set_marked_text(
     this: &Object,
     _: Sel,
-    text: id,
+    text: ObjcId,
     selected_range: NSRange,
     replacement_range: NSRange,
 ) {
     unsafe {
         let is_attributed_string: BOOL =
             msg_send![text, isKindOfClass: [class!(NSAttributedString)]];
-        let text: id = if is_attributed_string == YES {
+        let text: ObjcId = if is_attributed_string == YES {
             msg_send![text, string]
         } else {
             text
@@ -2266,7 +2337,7 @@ extern "C" fn attributed_substring_for_proposed_range(
     _: Sel,
     range: NSRange,
     actual_range: *mut c_void,
-) -> id {
+) -> ObjcId {
     with_input_handler(this, |input_handler| {
         let range = range.to_range()?;
         if range.is_empty() {
@@ -2281,13 +2352,13 @@ extern "C" fn attributed_substring_for_proposed_range(
             unsafe { (actual_range as *mut NSRange).write(NSRange::from(adjusted)) };
         }
         unsafe {
-            let string: id = msg_send![class!(NSAttributedString), alloc];
-            let string: id = msg_send![string, initWithString: ns_string(&selected_text)];
+            let string: ObjcId = msg_send![class!(NSAttributedString), alloc];
+            let string: ObjcId = msg_send![string, initWithString: ns_string(&selected_text)];
             Some(string)
         }
     })
     .flatten()
-    .unwrap_or(nil)
+    .unwrap_or(NIL)
 }

 // We ignore which selector it asks us to do because the user may have
@@ -2322,7 +2393,7 @@ extern "C" fn view_did_change_effective_appearance(this: &Object, _: Sel) {
     }
 }

-extern "C" fn accepts_first_mouse(this: &Object, _: Sel, _: id) -> BOOL {
+extern "C" fn accepts_first_mouse(this: &Object, _: Sel, _: ObjcId) -> BOOL {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     lock.first_mouse = true;
@@ -2347,7 +2418,7 @@ fn screen_point_to_gpui_point(this: &Object, position: NSPoint) -> Point<Pixels>
     point(px(window_x as f32), px(window_y as f32))
 }

-extern "C" fn dragging_entered(this: &Object, _: Sel, dragging_info: id) -> NSDragOperation {
+extern "C" fn dragging_entered(this: &Object, _: Sel, dragging_info: ObjcId) -> NSDragOperation {
     let window_state = unsafe { get_window_state(this) };
     let position = drag_event_position(&window_state, dragging_info);
     let paths = external_paths_from_event(dragging_info);
@@ -2361,7 +2432,7 @@ extern "C" fn dragging_entered(this: &Object, _: Sel, dragging_info: id) -> NSDr
     NSDragOperationNone
 }

-extern "C" fn dragging_updated(this: &Object, _: Sel, dragging_info: id) -> NSDragOperation {
+extern "C" fn dragging_updated(this: &Object, _: Sel, dragging_info: ObjcId) -> NSDragOperation {
     let window_state = unsafe { get_window_state(this) };
     let position = drag_event_position(&window_state, dragging_info);
     if send_new_event(
@@ -2374,7 +2445,7 @@ extern "C" fn dragging_updated(this: &Object, _: Sel, dragging_info: id) -> NSDr
     }
 }

-extern "C" fn dragging_exited(this: &Object, _: Sel, _: id) {
+extern "C" fn dragging_exited(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     send_new_event(
         &window_state,
@@ -2383,7 +2454,7 @@ extern "C" fn dragging_exited(this: &Object, _: Sel, _: id) {
     window_state.lock().external_files_dragged = false;
 }

-extern "C" fn perform_drag_operation(this: &Object, _: Sel, dragging_info: id) -> BOOL {
+extern "C" fn perform_drag_operation(this: &Object, _: Sel, dragging_info: ObjcId) -> BOOL {
     let window_state = unsafe { get_window_state(this) };
     let position = drag_event_position(&window_state, dragging_info);
     send_new_event(
@@ -2395,22 +2466,27 @@ extern "C" fn perform_drag_operation(this: &Object, _: Sel, dragging_info: id) -

 fn external_paths_from_event(dragging_info: *mut Object) -> Option<ExternalPaths> {
     let mut paths = SmallVec::new();
-    let pasteboard: id = unsafe { msg_send![dragging_info, draggingPasteboard] };
-    let filenames = unsafe { NSPasteboard::propertyListForType(pasteboard, NSFilenamesPboardType) };
-    if filenames == nil {
+    let pasteboard: ObjcId = unsafe { msg_send![dragging_info, draggingPasteboard] };
+    let filenames: ObjcId =
+        unsafe { msg_send![pasteboard, propertyListForType: NSFilenamesPboardType] };
+    if filenames == NIL {
         return None;
     }
-    for file in unsafe { filenames.iter() } {
-        let path = unsafe {
-            let f = NSString::UTF8String(file);
-            CStr::from_ptr(f).to_string_lossy().into_owned()
-        };
-        paths.push(PathBuf::from(path))
+    unsafe {
+        let count: NSUInteger = msg_send![filenames, count];
+        for i in 0..count {
+            let file: ObjcId = msg_send![filenames, objectAtIndex: i];
+            let path = {
+                let f = NSString::UTF8String(file);
+                CStr::from_ptr(f).to_string_lossy().into_owned()
+            };
+            paths.push(PathBuf::from(path));
+        }
     }
     Some(ExternalPaths(paths))
 }

-extern "C" fn conclude_drag_operation(this: &Object, _: Sel, _: id) {
+extern "C" fn conclude_drag_operation(this: &Object, _: Sel, _: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     send_new_event(
         &window_state,
@@ -2451,7 +2527,10 @@ fn send_new_event(window_state_lock: &Mutex<MacWindowState>, e: PlatformInput) -
     }
 }

-fn drag_event_position(window_state: &Mutex<MacWindowState>, dragging_info: id) -> Point<Pixels> {
+fn drag_event_position(
+    window_state: &Mutex<MacWindowState>,
+    dragging_info: ObjcId,
+) -> Point<Pixels> {
     let drag_location: NSPoint = unsafe { msg_send![dragging_info, draggingLocation] };
     convert_mouse_position(drag_location, window_state.lock().content_size().height)
 }
@@ -2472,23 +2551,21 @@ where
     }
 }

-unsafe fn display_id_for_screen(screen: id) -> CGDirectDisplayID {
+unsafe fn display_id_for_screen(screen: ObjcId) -> CGDirectDisplayID {
     unsafe {
-        let device_description = NSScreen::deviceDescription(screen);
-        let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
-        let screen_number = device_description.objectForKey_(screen_number_key);
-        let screen_number: NSUInteger = msg_send![screen_number, unsignedIntegerValue];
+        let device_description: ObjcId = msg_send![screen, deviceDescription];
+        let key: ObjcId = NSString::alloc(NIL).init_str("NSScreenNumber");
+        let screen_number_obj: ObjcId = msg_send![device_description, objectForKey: key];
+        let screen_number: NSUInteger = msg_send![screen_number_obj, unsignedIntegerValue];
         screen_number as CGDirectDisplayID
     }
 }

-extern "C" fn blurred_view_init_with_frame(this: &Object, _: Sel, frame: NSRect) -> id {
+extern "C" fn blurred_view_init_with_frame(this: &Object, _: Sel, frame: NSRect) -> ObjcId {
     unsafe {
-        let view = msg_send![super(this, class!(NSVisualEffectView)), initWithFrame: frame];
-        // Use a colorless semantic material. The default value `AppearanceBased`, though not
-        // manually set, is deprecated.
-        NSVisualEffectView::setMaterial_(view, NSVisualEffectMaterial::Selection);
-        NSVisualEffectView::setState_(view, NSVisualEffectState::Active);
+        let view: ObjcId = msg_send![super(this, class!(NSVisualEffectView)), initWithFrame: frame];
+        // Use an active visual effect state via icrate constant
+        let _: () = msg_send![view, setState: NSVisualEffectStateActive];
         view
     }
 }
@@ -2496,35 +2573,37 @@ extern "C" fn blurred_view_init_with_frame(this: &Object, _: Sel, frame: NSRect)
 extern "C" fn blurred_view_update_layer(this: &Object, _: Sel) {
     unsafe {
         let _: () = msg_send![super(this, class!(NSVisualEffectView)), updateLayer];
-        let layer: id = msg_send![this, layer];
+        let layer: ObjcId = msg_send![this, layer];
         if !layer.is_null() {
             remove_layer_background(layer);
         }
     }
 }

-unsafe fn remove_layer_background(layer: id) {
+unsafe fn remove_layer_background(layer: ObjcId) {
     unsafe {
-        let _: () = msg_send![layer, setBackgroundColor:nil];
+        let _: () = msg_send![layer, setBackgroundColor:NIL];

-        let class_name: id = msg_send![layer, className];
-        if class_name.isEqualToString("CAChameleonLayer") {
+        let class_name: ObjcId = msg_send![layer, className];
+        let equal: BOOL = msg_send![class_name, isEqualToString: ns_string("CAChameleonLayer")];
+        if equal == YES {
             // Remove the desktop tinting effect.
             let _: () = msg_send![layer, setHidden: YES];
             return;
         }

-        let filters: id = msg_send![layer, filters];
+        let filters: ObjcId = msg_send![layer, filters];
         if !filters.is_null() {
             // Remove the increased saturation.
             // The effect of a `CAFilter` or `CIFilter` is determined by its name, and the
             // `description` reflects its name and some parameters. Currently `NSVisualEffectView`
             // uses a `CAFilter` named "colorSaturate". If one day they switch to `CIFilter`, the
             // `description` will still contain "Saturat" ("... inputSaturation = ...").
-            let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
-            let count = NSArray::count(filters);
+            let test_string: ObjcId = NSString::alloc(NIL).init_str("Saturat").autorelease();
+            let count: NSUInteger = msg_send![filters, count];
             for i in 0..count {
-                let description: id = msg_send![filters.objectAtIndex(i), description];
+                let filter_i: ObjcId = msg_send![filters, objectAtIndex: i];
+                let description: ObjcId = msg_send![filter_i, description];
                 let hit: BOOL = msg_send![description, containsString: test_string];
                 if hit == NO {
                     continue;
@@ -2532,34 +2611,38 @@ unsafe fn remove_layer_background(layer: id) {

                 let all_indices = NSRange {
                     location: 0,
-                    length: count,
+                    length: count as u64,
                 };
-                let indices: id = msg_send![class!(NSMutableIndexSet), indexSet];
+                let indices: ObjcId = msg_send![class!(NSMutableIndexSet), indexSet];
                 let _: () = msg_send![indices, addIndexesInRange: all_indices];
                 let _: () = msg_send![indices, removeIndex:i];
-                let filtered: id = msg_send![filters, objectsAtIndexes: indices];
+                let filtered: ObjcId = msg_send![filters, objectsAtIndexes: indices];
                 let _: () = msg_send![layer, setFilters: filtered];
                 break;
             }
         }

-        let sublayers: id = msg_send![layer, sublayers];
+        let sublayers: ObjcId = msg_send![layer, sublayers];
         if !sublayers.is_null() {
-            let count = NSArray::count(sublayers);
+            let count: NSUInteger = msg_send![sublayers, count];
             for i in 0..count {
-                let sublayer = sublayers.objectAtIndex(i);
+                let sublayer: ObjcId = msg_send![sublayers, objectAtIndex: i];
                 remove_layer_background(sublayer);
             }
         }
     }
 }

-extern "C" fn add_titlebar_accessory_view_controller(this: &Object, _: Sel, view_controller: id) {
+extern "C" fn add_titlebar_accessory_view_controller(
+    this: &Object,
+    _: Sel,
+    view_controller: ObjcId,
+) {
     unsafe {
         let _: () = msg_send![super(this, class!(NSWindow)), addTitlebarAccessoryViewController: view_controller];

         // Hide the native tab bar and set its height to 0, since we render our own.
-        let accessory_view: id = msg_send![view_controller, view];
+        let accessory_view: ObjcId = msg_send![view_controller, view];
         let _: () = msg_send![accessory_view, setHidden: YES];
         let mut frame: NSRect = msg_send![accessory_view, frame];
         frame.size.height = 0.0;
@@ -2567,9 +2650,9 @@ extern "C" fn add_titlebar_accessory_view_controller(this: &Object, _: Sel, view
     }
 }

-extern "C" fn move_tab_to_new_window(this: &Object, _: Sel, _: id) {
+extern "C" fn move_tab_to_new_window(this: &Object, _: Sel, _: ObjcId) {
     unsafe {
-        let _: () = msg_send![super(this, class!(NSWindow)), moveTabToNewWindow:nil];
+        let _: () = msg_send![super(this, class!(NSWindow)), moveTabToNewWindow:NIL];

         let window_state = get_window_state(this);
         let mut lock = window_state.as_ref().lock();
@@ -2581,9 +2664,9 @@ extern "C" fn move_tab_to_new_window(this: &Object, _: Sel, _: id) {
     }
 }

-extern "C" fn merge_all_windows(this: &Object, _: Sel, _: id) {
+extern "C" fn merge_all_windows(this: &Object, _: Sel, _: ObjcId) {
     unsafe {
-        let _: () = msg_send![super(this, class!(NSWindow)), mergeAllWindows:nil];
+        let _: () = msg_send![super(this, class!(NSWindow)), mergeAllWindows:NIL];

         let window_state = get_window_state(this);
         let mut lock = window_state.as_ref().lock();
@@ -2595,7 +2678,7 @@ extern "C" fn merge_all_windows(this: &Object, _: Sel, _: id) {
     }
 }

-extern "C" fn select_next_tab(this: &Object, _sel: Sel, _id: id) {
+extern "C" fn select_next_tab(this: &Object, _sel: Sel, _id: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     if let Some(mut callback) = lock.select_next_tab_callback.take() {
@@ -2605,7 +2688,7 @@ extern "C" fn select_next_tab(this: &Object, _sel: Sel, _id: id) {
     }
 }

-extern "C" fn select_previous_tab(this: &Object, _sel: Sel, _id: id) {
+extern "C" fn select_previous_tab(this: &Object, _sel: Sel, _id: ObjcId) {
     let window_state = unsafe { get_window_state(this) };
     let mut lock = window_state.as_ref().lock();
     if let Some(mut callback) = lock.select_previous_tab_callback.take() {
@@ -2615,9 +2698,9 @@ extern "C" fn select_previous_tab(this: &Object, _sel: Sel, _id: id) {
     }
 }

-extern "C" fn toggle_tab_bar(this: &Object, _sel: Sel, _id: id) {
+extern "C" fn toggle_tab_bar(this: &Object, _sel: Sel, _id: ObjcId) {
     unsafe {
-        let _: () = msg_send![super(this, class!(NSWindow)), toggleTabBar:nil];
+        let _: () = msg_send![super(this, class!(NSWindow)), toggleTabBar:NIL];

         let window_state = get_window_state(this);
         let mut lock = window_state.as_ref().lock();
diff --git a/crates/gpui/src/platform/mac/window_appearance.rs b/crates/gpui/src/platform/mac/window_appearance.rs
index 65c409d30c..0950e5ba55 100644
--- a/crates/gpui/src/platform/mac/window_appearance.rs
+++ b/crates/gpui/src/platform/mac/window_appearance.rs
@@ -1,37 +1,24 @@
 use crate::WindowAppearance;
-use cocoa::{
-    appkit::{NSAppearanceNameVibrantDark, NSAppearanceNameVibrantLight},
-    base::id,
-    foundation::NSString,
+use icrate::AppKit::{
+    NSAppearanceNameAqua, NSAppearanceNameDarkAqua, NSAppearanceNameVibrantDark,
+    NSAppearanceNameVibrantLight,
 };
+use objc::runtime::Object;
 use objc::{msg_send, sel, sel_impl};
-use std::ffi::CStr;

 impl WindowAppearance {
-    pub(crate) unsafe fn from_native(appearance: id) -> Self {
-        let name: id = msg_send![appearance, name];
-        unsafe {
-            if name == NSAppearanceNameVibrantLight {
-                Self::VibrantLight
-            } else if name == NSAppearanceNameVibrantDark {
-                Self::VibrantDark
-            } else if name == NSAppearanceNameAqua {
-                Self::Light
-            } else if name == NSAppearanceNameDarkAqua {
-                Self::Dark
-            } else {
-                println!(
-                    "unknown appearance: {:?}",
-                    CStr::from_ptr(name.UTF8String())
-                );
-                Self::Light
-            }
+    pub(crate) unsafe fn from_native(appearance: *mut Object) -> Self {
+        let name: *mut Object = unsafe { msg_send![appearance, name] };
+        if unsafe { name == (NSAppearanceNameVibrantLight as *const _ as *mut Object) } {
+            Self::VibrantLight
+        } else if unsafe { name == (NSAppearanceNameVibrantDark as *const _ as *mut Object) } {
+            Self::VibrantDark
+        } else if unsafe { name == (NSAppearanceNameAqua as *const _ as *mut Object) } {
+            Self::Light
+        } else if unsafe { name == (NSAppearanceNameDarkAqua as *const _ as *mut Object) } {
+            Self::Dark
+        } else {
+            Self::Light
         }
     }
 }
-
-#[link(name = "AppKit", kind = "framework")]
-unsafe extern "C" {
-    pub static NSAppearanceNameAqua: id;
-    pub static NSAppearanceNameDarkAqua: id;
-}
diff --git a/crates/macos_appkit_bridge/Cargo.toml b/crates/macos_appkit_bridge/Cargo.toml
new file mode 100644
index 0000000000..9ac6e745a3
--- /dev/null
+++ b/crates/macos_appkit_bridge/Cargo.toml
@@ -0,0 +1,13 @@
+[package]
+name = "macos_appkit_bridge"
+version = "0.1.0"
+edition = "2021"
+
+[lib]
+name = "macos_appkit_bridge"
+path = "src/lib.rs"
+crate-type = ["staticlib", "rlib"]
+
+[dependencies]
+
+[build-dependencies]
diff --git a/crates/macos_appkit_bridge/build.rs b/crates/macos_appkit_bridge/build.rs
new file mode 100644
index 0000000000..f511440de3
--- /dev/null
+++ b/crates/macos_appkit_bridge/build.rs
@@ -0,0 +1,32 @@
+#[cfg(target_os = "macos")]
+fn main() {
+    // Build Swift package and link static library
+    let _out_dir = std::env::var("OUT_DIR").unwrap();
+    let package_dir = std::env::current_dir().unwrap();
+
+    let swift_dir = package_dir.join("swift");
+    std::fs::create_dir_all(&swift_dir).ok();
+
+    // No codegen needed for C ABI shim
+
+    // Build the Swift package containing our shim and the generated bridge.
+    let status = std::process::Command::new("swift")
+        .current_dir(&swift_dir)
+        .args(["build", "-c", "release"])
+        .status()
+        .expect("Failed to spawn swift build");
+    if !status.success() {
+        panic!("swift build failed: {:?}", status);
+    }
+
+    // Link the produced static library; default SwiftPM output directory
+    let lib_dir = std::path::Path::new(&swift_dir)
+        .join(".build")
+        .join("release");
+    println!("cargo:rustc-link-search=native={}", lib_dir.display());
+    println!("cargo:rustc-link-lib=static=SwiftPackage");
+    println!("cargo:rustc-link-lib=framework=AppKit");
+}
+
+#[cfg(not(target_os = "macos"))]
+fn main() {}
diff --git a/crates/macos_appkit_bridge/src/lib.rs b/crates/macos_appkit_bridge/src/lib.rs
new file mode 100644
index 0000000000..984e81d239
--- /dev/null
+++ b/crates/macos_appkit_bridge/src/lib.rs
@@ -0,0 +1 @@
+// This crate builds and links the Swift static library for macOS AppKit shims.
diff --git a/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftBridgeCore.h b/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftBridgeCore.h
new file mode 100644
index 0000000000..14bfeeb310
--- /dev/null
+++ b/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftBridgeCore.h
@@ -0,0 +1,164 @@
+#include <stdint.h>
+#include <stdbool.h>
+typedef struct RustStr { uint8_t* const start; uintptr_t len; } RustStr;
+typedef struct __private__FfiSlice { void* const start; uintptr_t len; } __private__FfiSlice;
+void* __swift_bridge__null_pointer(void);
+
+
+typedef struct __private__OptionU8 { uint8_t val; bool is_some; } __private__OptionU8;
+typedef struct __private__OptionI8 { int8_t val; bool is_some; } __private__OptionI8;
+typedef struct __private__OptionU16 { uint16_t val; bool is_some; } __private__OptionU16;
+typedef struct __private__OptionI16 { int16_t val; bool is_some; } __private__OptionI16;
+typedef struct __private__OptionU32 { uint32_t val; bool is_some; } __private__OptionU32;
+typedef struct __private__OptionI32 { int32_t val; bool is_some; } __private__OptionI32;
+typedef struct __private__OptionU64 { uint64_t val; bool is_some; } __private__OptionU64;
+typedef struct __private__OptionI64 { int64_t val; bool is_some; } __private__OptionI64;
+typedef struct __private__OptionUsize { uintptr_t val; bool is_some; } __private__OptionUsize;
+typedef struct __private__OptionIsize { intptr_t val; bool is_some; } __private__OptionIsize;
+typedef struct __private__OptionF32 { float val; bool is_some; } __private__OptionF32;
+typedef struct __private__OptionF64 { double val; bool is_some; } __private__OptionF64;
+typedef struct __private__OptionBool { bool val; bool is_some; } __private__OptionBool;
+
+void* __swift_bridge__$Vec_u8$new();
+void __swift_bridge__$Vec_u8$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_u8$len(void* const vec);
+void __swift_bridge__$Vec_u8$push(void* const vec, uint8_t val);
+__private__OptionU8 __swift_bridge__$Vec_u8$pop(void* const vec);
+__private__OptionU8 __swift_bridge__$Vec_u8$get(void* const vec, uintptr_t index);
+__private__OptionU8 __swift_bridge__$Vec_u8$get_mut(void* const vec, uintptr_t index);
+uint8_t const * __swift_bridge__$Vec_u8$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_u16$new();
+void __swift_bridge__$Vec_u16$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_u16$len(void* const vec);
+void __swift_bridge__$Vec_u16$push(void* const vec, uint16_t val);
+__private__OptionU16 __swift_bridge__$Vec_u16$pop(void* const vec);
+__private__OptionU16 __swift_bridge__$Vec_u16$get(void* const vec, uintptr_t index);
+__private__OptionU16 __swift_bridge__$Vec_u16$get_mut(void* const vec, uintptr_t index);
+uint16_t const * __swift_bridge__$Vec_u16$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_u32$new();
+void __swift_bridge__$Vec_u32$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_u32$len(void* const vec);
+void __swift_bridge__$Vec_u32$push(void* const vec, uint32_t val);
+__private__OptionU32 __swift_bridge__$Vec_u32$pop(void* const vec);
+__private__OptionU32 __swift_bridge__$Vec_u32$get(void* const vec, uintptr_t index);
+__private__OptionU32 __swift_bridge__$Vec_u32$get_mut(void* const vec, uintptr_t index);
+uint32_t const * __swift_bridge__$Vec_u32$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_u64$new();
+void __swift_bridge__$Vec_u64$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_u64$len(void* const vec);
+void __swift_bridge__$Vec_u64$push(void* const vec, uint64_t val);
+__private__OptionU64 __swift_bridge__$Vec_u64$pop(void* const vec);
+__private__OptionU64 __swift_bridge__$Vec_u64$get(void* const vec, uintptr_t index);
+__private__OptionU64 __swift_bridge__$Vec_u64$get_mut(void* const vec, uintptr_t index);
+uint64_t const * __swift_bridge__$Vec_u64$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_usize$new();
+void __swift_bridge__$Vec_usize$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_usize$len(void* const vec);
+void __swift_bridge__$Vec_usize$push(void* const vec, uintptr_t val);
+__private__OptionUsize __swift_bridge__$Vec_usize$pop(void* const vec);
+__private__OptionUsize __swift_bridge__$Vec_usize$get(void* const vec, uintptr_t index);
+__private__OptionUsize __swift_bridge__$Vec_usize$get_mut(void* const vec, uintptr_t index);
+uintptr_t const * __swift_bridge__$Vec_usize$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_i8$new();
+void __swift_bridge__$Vec_i8$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_i8$len(void* const vec);
+void __swift_bridge__$Vec_i8$push(void* const vec, int8_t val);
+__private__OptionI8 __swift_bridge__$Vec_i8$pop(void* const vec);
+__private__OptionI8 __swift_bridge__$Vec_i8$get(void* const vec, uintptr_t index);
+__private__OptionI8 __swift_bridge__$Vec_i8$get_mut(void* const vec, uintptr_t index);
+int8_t const * __swift_bridge__$Vec_i8$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_i16$new();
+void __swift_bridge__$Vec_i16$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_i16$len(void* const vec);
+void __swift_bridge__$Vec_i16$push(void* const vec, int16_t val);
+__private__OptionI16 __swift_bridge__$Vec_i16$pop(void* const vec);
+__private__OptionI16 __swift_bridge__$Vec_i16$get(void* const vec, uintptr_t index);
+__private__OptionI16 __swift_bridge__$Vec_i16$get_mut(void* const vec, uintptr_t index);
+int16_t const * __swift_bridge__$Vec_i16$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_i32$new();
+void __swift_bridge__$Vec_i32$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_i32$len(void* const vec);
+void __swift_bridge__$Vec_i32$push(void* const vec, int32_t val);
+__private__OptionI32 __swift_bridge__$Vec_i32$pop(void* const vec);
+__private__OptionI32 __swift_bridge__$Vec_i32$get(void* const vec, uintptr_t index);
+__private__OptionI32 __swift_bridge__$Vec_i32$get_mut(void* const vec, uintptr_t index);
+int32_t const * __swift_bridge__$Vec_i32$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_i64$new();
+void __swift_bridge__$Vec_i64$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_i64$len(void* const vec);
+void __swift_bridge__$Vec_i64$push(void* const vec, int64_t val);
+__private__OptionI64 __swift_bridge__$Vec_i64$pop(void* const vec);
+__private__OptionI64 __swift_bridge__$Vec_i64$get(void* const vec, uintptr_t index);
+__private__OptionI64 __swift_bridge__$Vec_i64$get_mut(void* const vec, uintptr_t index);
+int64_t const * __swift_bridge__$Vec_i64$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_isize$new();
+void __swift_bridge__$Vec_isize$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_isize$len(void* const vec);
+void __swift_bridge__$Vec_isize$push(void* const vec, intptr_t val);
+__private__OptionIsize __swift_bridge__$Vec_isize$pop(void* const vec);
+__private__OptionIsize __swift_bridge__$Vec_isize$get(void* const vec, uintptr_t index);
+__private__OptionIsize __swift_bridge__$Vec_isize$get_mut(void* const vec, uintptr_t index);
+intptr_t const * __swift_bridge__$Vec_isize$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_bool$new();
+void __swift_bridge__$Vec_bool$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_bool$len(void* const vec);
+void __swift_bridge__$Vec_bool$push(void* const vec, bool val);
+__private__OptionBool __swift_bridge__$Vec_bool$pop(void* const vec);
+__private__OptionBool __swift_bridge__$Vec_bool$get(void* const vec, uintptr_t index);
+__private__OptionBool __swift_bridge__$Vec_bool$get_mut(void* const vec, uintptr_t index);
+bool const * __swift_bridge__$Vec_bool$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_f32$new();
+void __swift_bridge__$Vec_f32$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_f32$len(void* const vec);
+void __swift_bridge__$Vec_f32$push(void* const vec, float val);
+__private__OptionF32 __swift_bridge__$Vec_f32$pop(void* const vec);
+__private__OptionF32 __swift_bridge__$Vec_f32$get(void* const vec, uintptr_t index);
+__private__OptionF32 __swift_bridge__$Vec_f32$get_mut(void* const vec, uintptr_t index);
+float const * __swift_bridge__$Vec_f32$as_ptr(void* const vec);
+
+void* __swift_bridge__$Vec_f64$new();
+void __swift_bridge__$Vec_f64$_free(void* const vec);
+uintptr_t __swift_bridge__$Vec_f64$len(void* const vec);
+void __swift_bridge__$Vec_f64$push(void* const vec, double val);
+__private__OptionF64 __swift_bridge__$Vec_f64$pop(void* const vec);
+__private__OptionF64 __swift_bridge__$Vec_f64$get(void* const vec, uintptr_t index);
+__private__OptionF64 __swift_bridge__$Vec_f64$get_mut(void* const vec, uintptr_t index);
+double const * __swift_bridge__$Vec_f64$as_ptr(void* const vec);
+
+#include <stdint.h>
+typedef struct RustString RustString;
+void __swift_bridge__$RustString$_free(void* self);
+
+void* __swift_bridge__$Vec_RustString$new(void);
+void __swift_bridge__$Vec_RustString$drop(void* vec_ptr);
+void __swift_bridge__$Vec_RustString$push(void* vec_ptr, void* item_ptr);
+void* __swift_bridge__$Vec_RustString$pop(void* vec_ptr);
+void* __swift_bridge__$Vec_RustString$get(void* vec_ptr, uintptr_t index);
+void* __swift_bridge__$Vec_RustString$get_mut(void* vec_ptr, uintptr_t index);
+uintptr_t __swift_bridge__$Vec_RustString$len(void* vec_ptr);
+void* __swift_bridge__$Vec_RustString$as_ptr(void* vec_ptr);
+
+void* __swift_bridge__$RustString$new(void);
+void* __swift_bridge__$RustString$new_with_str(struct RustStr str);
+uintptr_t __swift_bridge__$RustString$len(void* self);
+struct RustStr __swift_bridge__$RustString$as_str(void* self);
+struct RustStr __swift_bridge__$RustString$trim(void* self);
+bool __swift_bridge__$RustStr$partial_eq(struct RustStr lhs, struct RustStr rhs);
+
+
+void __swift_bridge__$call_boxed_fn_once_no_args_no_return(void* boxed_fnonce);
+void __swift_bridge__$free_boxed_fn_once_no_args_no_return(void* boxed_fnonce);
+
+
+struct __private__ResultPtrAndPtr { bool is_ok; void* ok_or_err; };
diff --git a/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftPackage.h b/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftPackage.h
new file mode 100644
index 0000000000..d4206662f5
--- /dev/null
+++ b/crates/macos_appkit_bridge/swift/CSwiftBridge/SwiftPackage.h
@@ -0,0 +1,3 @@
+// File automatically generated by swift-bridge.
+#include <stdint.h>
+void __swift_bridge__$gpui_menu_action(uint64_t tag);
diff --git a/crates/macos_appkit_bridge/swift/Package.swift b/crates/macos_appkit_bridge/swift/Package.swift
new file mode 100644
index 0000000000..7ae89e92ba
--- /dev/null
+++ b/crates/macos_appkit_bridge/swift/Package.swift
@@ -0,0 +1,13 @@
+// swift-tools-version:5.9
+import PackageDescription
+
+let package = Package(
+    name: "SwiftPackage",
+    platforms: [ .macOS(.v12) ],
+    products: [
+        .library(name: "SwiftPackage", type: .static, targets: ["SwiftPackage"]) // static lib
+    ],
+    targets: [
+        .target(name: "SwiftPackage", path: "Sources")
+    ]
+)
diff --git a/crates/macos_appkit_bridge/swift/Sources/Shim.swift b/crates/macos_appkit_bridge/swift/Sources/Shim.swift
new file mode 100644
index 0000000000..289ab889a4
--- /dev/null
+++ b/crates/macos_appkit_bridge/swift/Sources/Shim.swift
@@ -0,0 +1,306 @@
+import AppKit
+import Foundation
+@_silgen_name("gpui_menu_action")
+func gpui_menu_action(_ tag: UInt64)
+
+fileprivate var menuActionHandlerRegistered = false
+
+@_cdecl("zed_register_menu_handler")
+public func zed_register_menu_handler() {
+    // No-op: we call back to Rust via the global exported function.
+    menuActionHandlerRegistered = true
+}
+
+@_cdecl("zed_set_main_menu_json")
+public func zed_set_main_menu_json(_ json: UnsafePointer<CChar>) {
+    let str = String(cString: json)
+    struct Item: Codable {
+        let kind: String
+        let title: String?
+        let tag: UInt64?
+        let key_equivalent: String?
+        let modifiers: [String]?
+        let system_type: String?
+        let items: [Item]?
+    }
+    struct Menu: Codable { let title: String; let items: [Item] }
+    struct Spec: Codable { let menus: [Menu] }
+    guard let data = str.data(using: .utf8), let spec = try? JSONDecoder().decode(Spec.self, from: data) else { return }
+
+    func buildMenu(_ items: [Item]) -> NSMenu {
+        let menu = NSMenu()
+        for it in items {
+            switch it.kind {
+            case "separator":
+                menu.addItem(NSMenuItem.separator())
+            case "action":
+                let key = it.key_equivalent ?? ""
+                let mi = NSMenuItem(title: it.title ?? "", action: #selector(MenuTarget.onMenuAction(_:)), keyEquivalent: key)
+                mi.target = MenuTarget.shared
+                if let mods = it.modifiers { mi.keyEquivalentModifierMask = modifiers(from: mods) }
+                if let tag = it.tag { mi.tag = Int(tag) }
+                menu.addItem(mi)
+            case "submenu":
+                let mi = NSMenuItem(title: it.title ?? "", action: nil, keyEquivalent: "")
+                let sub = buildMenu(it.items ?? [])
+                mi.submenu = sub
+                menu.addItem(mi)
+            case "system":
+                let mi = NSMenuItem(title: it.title ?? "", action: nil, keyEquivalent: "")
+                let sub = buildMenu(it.items ?? [])
+                mi.submenu = sub
+                // Wire special menus
+                if let st = it.system_type {
+                    if st == "services" { NSApp.servicesMenu = sub }
+                    if st == "windows" { NSApp.windowsMenu = sub }
+                }
+                menu.addItem(mi)
+            default:
+                continue
+            }
+        }
+        return menu
+    }
+
+    func modifiers(from names: [String]) -> NSEvent.ModifierFlags {
+        var flags: NSEvent.ModifierFlags = []
+        for name in names {
+            switch name.lowercased() {
+            case "command": flags.insert(.command)
+            case "control": flags.insert(.control)
+            case "option": flags.insert(.option)
+            case "shift": flags.insert(.shift)
+            default: break
+            }
+        }
+        return flags
+    }
+
+    let mainMenu = NSMenu()
+    for m in spec.menus {
+        let mi = NSMenuItem(title: m.title, action: nil, keyEquivalent: "")
+        let sub = buildMenu(m.items)
+        mi.submenu = sub
+        if m.title == "Window" { NSApp.windowsMenu = sub }
+        mainMenu.addItem(mi)
+    }
+    DispatchQueue.main.async {
+        mainMenu.delegate = MenuTarget.shared
+        NSApp.mainMenu = mainMenu
+    }
+}
+
+@objc class MenuTarget: NSObject {
+    static let shared = MenuTarget()
+    @objc func onMenuAction(_ sender: NSMenuItem) {
+        guard menuActionHandlerRegistered else { return }
+        gpui_menu_action(UInt64(sender.tag))
+    }
+}
+
+@objc extension MenuTarget: NSMenuItemValidation {
+    func validateMenuItem(_ menuItem: NSMenuItem) -> Bool {
+        return gpui_validate_menu_action(UInt64(menuItem.tag))
+    }
+}
+
+@objc extension MenuTarget: NSMenuDelegate {
+    func menuWillOpen(_ menu: NSMenu) {
+        gpui_menu_will_open()
+    }
+}
+
+@_silgen_name("gpui_validate_menu_action")
+func gpui_validate_menu_action(_ tag: UInt64) -> Bool
+
+@_silgen_name("gpui_menu_will_open")
+func gpui_menu_will_open()
+
+// MARK: - Panels (Open/Save) C ABI
+
+@_silgen_name("gpui_open_panel_result")
+func gpui_open_panel_result(_ requestId: UInt64, _ json: UnsafePointer<CChar>)
+
+@_silgen_name("gpui_save_panel_result")
+func gpui_save_panel_result(_ requestId: UInt64, _ json: UnsafePointer<CChar>)
+
+@_cdecl("zed_open_panel")
+public func zed_open_panel(_ requestId: UInt64, _ json: UnsafePointer<CChar>) {
+    struct OpenOpts: Codable { let directories: Bool; let files: Bool; let multiple: Bool; let prompt: String? }
+    let str = String(cString: json)
+    guard let data = str.data(using: .utf8), let opts = try? JSONDecoder().decode(OpenOpts.self, from: data) else { return }
+    let panel = NSOpenPanel()
+    panel.canChooseDirectories = opts.directories
+    panel.canChooseFiles = opts.files
+    panel.allowsMultipleSelection = opts.multiple
+    panel.canCreateDirectories = true
+    panel.resolvesAliases = false
+    if let p = opts.prompt { panel.prompt = p }
+    DispatchQueue.main.async {
+        panel.begin { resp in
+            var result: [String]? = nil
+            if resp == .OK {
+                result = panel.urls.filter { $0.isFileURL }.map { $0.path }
+            }
+            let payload: [String: Any?] = ["paths": result]
+            if let jsonData = try? JSONSerialization.data(withJSONObject: payload, options: []), let jsonStr = String(data: jsonData, encoding: .utf8) {
+                jsonStr.withCString { gpui_open_panel_result(requestId, $0) }
+            } else {
+                "{\"paths\":null}".withCString { gpui_open_panel_result(requestId, $0) }
+            }
+        }
+    }
+}
+
+@_cdecl("zed_save_panel")
+public func zed_save_panel(_ requestId: UInt64, _ json: UnsafePointer<CChar>) {
+    struct SaveOpts: Codable { let directory: String; let suggested_name: String? }
+    let str = String(cString: json)
+    guard let data = str.data(using: .utf8), let opts = try? JSONDecoder().decode(SaveOpts.self, from: data) else { return }
+    let panel = NSSavePanel()
+    panel.directoryURL = URL(fileURLWithPath: opts.directory, isDirectory: true)
+    if let name = opts.suggested_name { panel.nameFieldStringValue = name }
+    DispatchQueue.main.async {
+        panel.begin { resp in
+            var path: String? = nil
+            if resp == .OK, let url = panel.url, url.isFileURL { path = url.path }
+            let payload: [String: Any?] = ["path": path]
+            if let jsonData = try? JSONSerialization.data(withJSONObject: payload, options: []), let jsonStr = String(data: jsonData, encoding: .utf8) {
+                jsonStr.withCString { gpui_save_panel_result(requestId, $0) }
+            } else {
+                "{\"path\":null}".withCString { gpui_save_panel_result(requestId, $0) }
+            }
+        }
+    }
+}
+
+// MARK: - Pasteboard helpers (text)
+
+@_cdecl("zed_pasteboard_write_text")
+public func zed_pasteboard_write_text(_ text: UnsafePointer<CChar>) {
+    let str = String(cString: text)
+    NSPasteboard.general.clearContents()
+    NSPasteboard.general.setString(str, forType: NSPasteboard.PasteboardType.string)
+}
+
+@_cdecl("zed_pasteboard_read_text")
+public func zed_pasteboard_read_text() -> UnsafeMutablePointer<CChar>? {
+    if let s = NSPasteboard.general.string(forType: NSPasteboard.PasteboardType.string) {
+        return strdup(s)
+    }
+    return nil
+}
+
+// MARK: - Pasteboard helpers (images via UTI)
+
+@_cdecl("zed_pasteboard_write_image")
+public func zed_pasteboard_write_image(_ bytes: UnsafePointer<UInt8>, _ len: Int, _ uti: UnsafePointer<CChar>) {
+    let data = Data(bytes: bytes, count: len)
+    let type = NSPasteboard.PasteboardType(String(cString: uti))
+    let pb = NSPasteboard.general
+    pb.clearContents()
+    pb.setData(data, forType: type)
+}
+
+// MARK: - Status Item (NSStatusItem)
+
+@_silgen_name("gpui_status_item_clicked")
+func gpui_status_item_clicked(_ id: UInt64)
+@_silgen_name("gpui_status_item_menu_action")
+func gpui_status_item_menu_action(_ id: UInt64, _ tag: UInt64)
+
+fileprivate class StatusItemTarget: NSObject {
+    let id: UInt64
+    init(id: UInt64) { self.id = id }
+    @objc func onClick(_ sender: Any?) { gpui_status_item_clicked(id) }
+    @objc func onMenuAction(_ sender: NSMenuItem) { gpui_status_item_menu_action(id, UInt64(sender.tag)) }
+}
+
+fileprivate var statusItems: [UInt64: NSStatusItem] = [:]
+fileprivate var statusTargets: [UInt64: StatusItemTarget] = [:]
+fileprivate var statusCounter: UInt64 = 1
+
+@_cdecl("zed_status_item_create")
+public func zed_status_item_create() -> UInt64 {
+    let id = statusCounter; statusCounter += 1
+    let item = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
+    let target = StatusItemTarget(id: id)
+    item.button?.target = target
+    item.button?.action = #selector(StatusItemTarget.onClick(_:))
+    statusTargets[id] = target
+    statusItems[id] = item
+    return id
+}
+
+@_cdecl("zed_status_item_set_title")
+public func zed_status_item_set_title(_ id: UInt64, _ title: UnsafePointer<CChar>) {
+    if let item = statusItems[id] {
+        item.button?.title = String(cString: title)
+    }
+}
+
+@_cdecl("zed_status_item_set_image")
+public func zed_status_item_set_image(_ id: UInt64, _ bytes: UnsafePointer<UInt8>, _ len: Int, _ uti: UnsafePointer<CChar>, _ isTemplate: Bool) {
+    guard let item = statusItems[id] else { return }
+    let data = Data(bytes: bytes, count: len)
+    if let image = NSImage(data: data) {
+        image.isTemplate = isTemplate
+        item.button?.image = image
+    }
+}
+
+@_cdecl("zed_status_item_remove")
+public func zed_status_item_remove(_ id: UInt64) {
+    if let item = statusItems[id] { NSStatusBar.system.removeStatusItem(item) }
+    statusItems.removeValue(forKey: id)
+    statusTargets.removeValue(forKey: id)
+}
+
+@_cdecl("zed_status_item_set_menu")
+public func zed_status_item_set_menu(_ id: UInt64, _ json: UnsafePointer<CChar>) {
+    guard let item = statusItems[id] else { return }
+    let str = String(cString: json)
+    struct Item: Codable { let kind: String; let title: String?; let tag: UInt64?; let items: [Item]? }
+    struct Spec: Codable { let items: [Item] }
+    guard let data = str.data(using: .utf8), let spec = try? JSONDecoder().decode(Spec.self, from: data) else { return }
+    func buildMenu(_ items: [Item], _ target: StatusItemTarget) -> NSMenu {
+        let menu = NSMenu()
+        for it in items {
+            switch it.kind {
+            case "separator":
+                menu.addItem(NSMenuItem.separator())
+            case "action":
+                let mi = NSMenuItem(title: it.title ?? "", action: #selector(StatusItemTarget.onMenuAction(_:)), keyEquivalent: "")
+                mi.target = target
+                if let tag = it.tag { mi.tag = Int(tag) }
+                menu.addItem(mi)
+            case "submenu":
+                let mi = NSMenuItem(title: it.title ?? "", action: nil, keyEquivalent: "")
+                mi.submenu = buildMenu(it.items ?? [], target)
+                menu.addItem(mi)
+            default:
+                continue
+            }
+        }
+        return menu
+    }
+    let target = statusTargets[id] ?? StatusItemTarget(id: id)
+    statusTargets[id] = target
+    let menu = buildMenu(spec.items, target)
+    item.menu = menu
+}
+
+@_cdecl("zed_pasteboard_read_image")
+public func zed_pasteboard_read_image(_ uti: UnsafePointer<CChar>, _ out_len: UnsafeMutablePointer<Int>) -> UnsafeMutablePointer<UInt8>? {
+    let type = NSPasteboard.PasteboardType(String(cString: uti))
+    let pb = NSPasteboard.general
+    if let data = pb.data(forType: type) {
+        out_len.pointee = data.count
+        let ptr = malloc(data.count)!.assumingMemoryBound(to: UInt8.self)
+        data.copyBytes(to: ptr, count: data.count)
+        return ptr
+    } else {
+        out_len.pointee = 0
+        return nil
+    }
+}
diff --git a/crates/repl/Cargo.toml b/crates/repl/Cargo.toml
index 5821bc6297..344840c4b4 100644
--- a/crates/repl/Cargo.toml
+++ b/crates/repl/Cargo.toml
@@ -17,6 +17,11 @@ alacritty_terminal.workspace = true
 anyhow.workspace = true
 async-dispatcher.workspace = true
 async-tungstenite = { workspace = true, features = ["tokio", "tokio-rustls-manual-roots"] }
+# Force-enable `tokio` feature on async-tungstenite v0.31 used by
+# transitive dependency `jupyter-websocket-client` to avoid E0432
+# (unresolved import `async_tungstenite::tokio`). The alias ensures
+# feature unification applies to that version across the graph.
+async_tungstenite_031 = { package = "async-tungstenite", version = "0.31.0", default-features = false, features = ["tokio-runtime"] }
 base64.workspace = true
 client.workspace = true
 collections.workspace = true
diff --git a/crates/repl/src/kernels/remote_kernels.rs b/crates/repl/src/kernels/remote_kernels.rs
index 6bc8b0d1b1..0c353a5044 100644
--- a/crates/repl/src/kernels/remote_kernels.rs
+++ b/crates/repl/src/kernels/remote_kernels.rs
@@ -3,8 +3,8 @@ use gpui::{App, AppContext as _, Entity, Task, Window};
 use http_client::{AsyncBody, HttpClient, Request};
 use jupyter_protocol::{ExecutionState, JupyterKernelspec, JupyterMessage, KernelInfoReply};

-use async_tungstenite::tokio::connect_async;
-use async_tungstenite::tungstenite::{client::IntoClientRequest, http::HeaderValue};
+use async_tungstenite_031::tokio::connect_async;
+use async_tungstenite_031::tungstenite::{client::IntoClientRequest, http::HeaderValue};

 use futures::StreamExt;
 use smol::io::AsyncReadExt as _;
diff --git a/postgres_notes.txt b/postgres_notes.txt
new file mode 100644
index 0000000000..d8d4eb0f72
--- /dev/null
+++ b/postgres_notes.txt
@@ -0,0 +1,20 @@
+This formula has created a default database cluster with:
+  initdb --locale=C -E UTF-8 /usr/local/var/postgresql@15
+
+postgresql@15 is keg-only, which means it was not symlinked into /usr/local,
+because this is an alternate version of another formula.
+
+If you need to have postgresql@15 first in your PATH, run:
+  echo 'export PATH="/usr/local/opt/postgresql@15/bin:$PATH"' >> ~/.zshrc
+
+For compilers to find postgresql@15 you may need to set:
+  export LDFLAGS="-L/usr/local/opt/postgresql@15/lib"
+  export CPPFLAGS="-I/usr/local/opt/postgresql@15/include"
+
+For pkg-config to find postgresql@15 you may need to set:
+  export PKG_CONFIG_PATH="/usr/local/opt/postgresql@15/lib/pkgconfig"
+
+To start postgresql@15 now and restart at login:
+  brew services start postgresql@15
+Or, if you don't want/need a background service you can just run:
+  LC_ALL="C" /usr/local/opt/postgresql@15/bin/postgres -D /usr/local/var/postgresql@15
diff --git a/zed_build_issues.md b/zed_build_issues.md
new file mode 100644
index 0000000000..83c8d3dafa
--- /dev/null
+++ b/zed_build_issues.md
@@ -0,0 +1,7668 @@
+# <start summary of warnings and errors>
+
+warning: `fs` (lib) generated 14 warnings
+warning: `gpui` (lib) generated 1245 warnings
+error: could not compile `jupyter-websocket-client` (lib) due to 2 errors
+For more information about this error, try `rustc --explain E0432`.
+warning: `client` (lib) generated 8 warnings
+
+# </end summary of warnings and errors>
+
+# <start details of errors>
+
+error[E0432]: unresolved import `async_tungstenite::tokio`
+  --> /Users/takumi/.cargo/git/checkouts/runtimed-da41b1ee8fc7914c/7130c80/crates/jupyter-websocket-client/src/client.rs:3:5
+   |
+3  |     tokio::connect_async,
+   |     ^^^^^ could not find `tokio` in `async_tungstenite`
+   |
+note: found an item that was configured out
+  --> /Users/takumi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-tungstenite-0.31.0/src/lib.rs:94:9
+   |
+94 | pub mod tokio;
+   |         ^^^^^
+note: the item is gated behind the `tokio-runtime` feature
+  --> /Users/takumi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-tungstenite-0.31.0/src/lib.rs:93:7
+   |
+93 | #[cfg(feature = "tokio-runtime")]
+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+error[E0432]: unresolved import `async_tungstenite::tokio`
+  --> /Users/takumi/.cargo/git/checkouts/runtimed-da41b1ee8fc7914c/7130c80/crates/jupyter-websocket-client/src/websocket.rs:2:25
+   |
+2  | use async_tungstenite::{tokio::ConnectStream, tungstenite::Message, WebSocketStream};
+   |                         ^^^^^ could not find `tokio` in `async_tungstenite`
+   |
+note: found an item that was configured out
+  --> /Users/takumi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-tungstenite-0.31.0/src/lib.rs:94:9
+   |
+94 | pub mod tokio;
+   |         ^^^^^
+note: the item is gated behind the `tokio-runtime` feature
+  --> /Users/takumi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-tungstenite-0.31.0/src/lib.rs:93:7
+   |
+93 | #[cfg(feature = "tokio-runtime")]
+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+# </end details of errors>
+
+# <start details of warnings>
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac.rs:38:12
+   |
+38 |     base::{id, nil},
+   |            ^^
+   |
+   = note: `#[warn(deprecated)]` on by default
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac.rs:38:16
+   |
+38 |     base::{id, nil},
+   |                ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSAutoreleasePool`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:18
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                  ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::foundation::NSNotFound`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:37
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                                     ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:49
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                                                 ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:57
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                                                         ^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:65
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                                                                 ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:39:75
+   |
+39 |     foundation::{NSAutoreleasePool, NSNotFound, NSRect, NSSize, NSString, NSUInteger},
+   |                                                                           ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac.rs:75:22
+   |
+75 | impl NSStringExt for id {
+   |                      ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:91:19
+   |
+91 |     pub location: NSUInteger,
+   |                   ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:92:17
+   |
+92 |     pub length: NSUInteger,
+   |                 ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac.rs:138:38
+    |
+138 | unsafe fn ns_string(string: &str) -> id {
+    |                                      ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:139:24
+    |
+139 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                        ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac.rs:139:30
+    |
+139 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                              ^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:142:11
+    |
+142 | impl From<NSSize> for Size<Pixels> {
+    |           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:151:11
+    |
+151 | impl From<NSRect> for Size<Pixels> {
+    |           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:158:11
+    |
+158 | impl From<NSRect> for Size<DevicePixels> {
+    |           ^^^^^^
+
+warning: use of deprecated constant `cocoa::foundation::NSNotFound`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:98:23
+   |
+98 |             location: NSNotFound as NSUInteger,
+   |                       ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:98:37
+   |
+98 |             location: NSNotFound as NSUInteger,
+   |                                     ^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::foundation::NSNotFound`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:104:26
+    |
+104 |         self.location != NSNotFound as NSUInteger
+    |                          ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:104:40
+    |
+104 |         self.location != NSNotFound as NSUInteger
+    |                                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:121:38
+    |
+121 |             location: range.start as NSUInteger,
+    |                                      ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:122:36
+    |
+122 |             length: range.len() as NSUInteger,
+    |                                    ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:131:13
+    |
+131 |             NSUInteger::encode().as_str(),
+    |             ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:132:13
+    |
+132 |             NSUInteger::encode().as_str()
+    |             ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:143:20
+    |
+143 |     fn from(value: NSSize) -> Self {
+    |                    ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:152:19
+    |
+152 |     fn from(rect: NSRect) -> Self {
+    |                   ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:153:13
+    |
+153 |         let NSSize { width, height } = rect.size;
+    |             ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:159:19
+    |
+159 |     fn from(rect: NSRect) -> Self {
+    |                   ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:160:13
+    |
+160 |         let NSSize { width, height } = rect.size;
+    |             ^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSScreen`: use the objc2-app-kit crate instead
+ --> crates/gpui/src/platform/mac/display.rs:4:13
+  |
+4 |     appkit::NSScreen,
+  |             ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/display.rs:5:12
+  |
+5 |     base::{id, nil},
+  |            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/display.rs:5:16
+  |
+5 |     base::{id, nil},
+  |                ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSDictionary`: use the objc2-foundation crate instead
+ --> crates/gpui/src/platform/mac/display.rs:6:18
+  |
+6 |     foundation::{NSDictionary, NSString},
+  |                  ^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+ --> crates/gpui/src/platform/mac/display.rs:6:32
+  |
+6 |     foundation::{NSDictionary, NSString},
+  |                                ^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSScreen::screens`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/display.rs:35:37
+   |
+35 |             let screens = NSScreen::screens(nil);
+   |                                     ^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/display.rs:35:45
+   |
+35 |             let screens = NSScreen::screens(nil);
+   |                                             ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/display.rs:36:54
+   |
+36 |             let screen = cocoa::foundation::NSArray::objectAtIndex(screens, 0);
+   |                                                      ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::deviceDescription`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/display.rs:37:48
+   |
+37 |             let device_description = NSScreen::deviceDescription(screen);
+   |                                                ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/display.rs:38:51
+   |
+38 |             let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+   |                                                   ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/display.rs:38:57
+   |
+38 |             let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+   |                                                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/display.rs:38:36
+   |
+38 |             let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+   |                                    ^^
+
+warning: use of deprecated trait `cocoa::appkit::NSEvent`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:12:14
+   |
+12 |     appkit::{NSEvent, NSEventModifierFlags, NSEventPhase, NSEventType},
+   |              ^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:12:23
+   |
+12 |     appkit::{NSEvent, NSEventModifierFlags, NSEventPhase, NSEventType},
+   |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventPhase`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:12:45
+   |
+12 |     appkit::{NSEvent, NSEventModifierFlags, NSEventPhase, NSEventType},
+   |                                             ^^^^^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSEventType`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:12:59
+   |
+12 |     appkit::{NSEvent, NSEventModifierFlags, NSEventPhase, NSEventType},
+   |                                                           ^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/events.rs:13:17
+   |
+13 |     base::{YES, id},
+   |                 ^^
+
+warning: use of deprecated constant `cocoa::appkit::NSUpArrowFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:34:17
+   |
+34 |         "up" => NSUpArrowFunctionKey,
+   |                 ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSDownArrowFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:35:19
+   |
+35 |         "down" => NSDownArrowFunctionKey,
+   |                   ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSLeftArrowFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:36:19
+   |
+36 |         "left" => NSLeftArrowFunctionKey,
+   |                   ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSRightArrowFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:37:20
+   |
+37 |         "right" => NSRightArrowFunctionKey,
+   |                    ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSPageUpFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:38:21
+   |
+38 |         "pageup" => NSPageUpFunctionKey,
+   |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSPageDownFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:39:23
+   |
+39 |         "pagedown" => NSPageDownFunctionKey,
+   |                       ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSHomeFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:40:19
+   |
+40 |         "home" => NSHomeFunctionKey,
+   |                   ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSEndFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:41:18
+   |
+41 |         "end" => NSEndFunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSDeleteFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:42:21
+   |
+42 |         "delete" => NSDeleteFunctionKey,
+   |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSHelpFunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:43:21
+   |
+43 |         "insert" => NSHelpFunctionKey,
+   |                     ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF1FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:44:17
+   |
+44 |         "f1" => NSF1FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF2FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:45:17
+   |
+45 |         "f2" => NSF2FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF3FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:46:17
+   |
+46 |         "f3" => NSF3FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF4FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:47:17
+   |
+47 |         "f4" => NSF4FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF5FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:48:17
+   |
+48 |         "f5" => NSF5FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF6FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:49:17
+   |
+49 |         "f6" => NSF6FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF7FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:50:17
+   |
+50 |         "f7" => NSF7FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF8FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:51:17
+   |
+51 |         "f8" => NSF8FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF9FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:52:17
+   |
+52 |         "f9" => NSF9FunctionKey,
+   |                 ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF10FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:53:18
+   |
+53 |         "f10" => NSF10FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF11FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:54:18
+   |
+54 |         "f11" => NSF11FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF12FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:55:18
+   |
+55 |         "f12" => NSF12FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF13FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:56:18
+   |
+56 |         "f13" => NSF13FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF14FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:57:18
+   |
+57 |         "f14" => NSF14FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF15FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:58:18
+   |
+58 |         "f15" => NSF15FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF16FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:59:18
+   |
+59 |         "f16" => NSF16FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF17FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:60:18
+   |
+60 |         "f17" => NSF17FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF18FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:61:18
+   |
+61 |         "f18" => NSF18FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF19FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:62:18
+   |
+62 |         "f19" => NSF19FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF20FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:63:18
+   |
+63 |         "f20" => NSF20FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF21FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:64:18
+   |
+64 |         "f21" => NSF21FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF22FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:65:18
+   |
+65 |         "f22" => NSF22FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF23FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:66:18
+   |
+66 |         "f23" => NSF23FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF24FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:67:18
+   |
+67 |         "f24" => NSF24FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF25FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:68:18
+   |
+68 |         "f25" => NSF25FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF26FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:69:18
+   |
+69 |         "f26" => NSF26FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF27FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:70:18
+   |
+70 |         "f27" => NSF27FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF28FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:71:18
+   |
+71 |         "f28" => NSF28FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF29FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:72:18
+   |
+72 |         "f29" => NSF29FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF30FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:73:18
+   |
+73 |         "f30" => NSF30FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF31FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:74:18
+   |
+74 |         "f31" => NSF31FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF32FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:75:18
+   |
+75 |         "f32" => NSF32FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF33FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:76:18
+   |
+76 |         "f33" => NSF33FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF34FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:77:18
+   |
+77 |         "f34" => NSF34FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF35FunctionKey`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:78:18
+   |
+78 |         "f35" => NSF35FunctionKey,
+   |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated module `cocoa::appkit`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:29:16
+   |
+29 |     use cocoa::appkit::*;
+   |                ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/events.rs:84:40
+   |
+84 | unsafe fn read_modifiers(native_event: id) -> Modifiers {
+   |                                        ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:87:42
+   |
+87 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+   |                                          ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:88:38
+   |
+88 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+   |                                      ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:89:40
+   |
+89 |         let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+   |                                        ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:90:42
+   |
+90 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+   |                                          ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:91:43
+   |
+91 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+   |                                           ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/events.rs:297:41
+    |
+297 | unsafe fn parse_keystroke(native_event: id) -> Keystroke {
+    |                                         ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:309:42
+    |
+309 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+    |                                          ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:310:38
+    |
+310 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+    |                                      ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:311:44
+    |
+311 |         let mut shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+    |                                            ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:312:42
+    |
+312 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+    |                                          ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:313:43
+    |
+313 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask)
+    |                                           ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSUpArrowFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:315:36
+    |
+315 |                 .is_none_or(|ch| !(NSUpArrowFunctionKey..=NSModeSwitchFunctionKey).contains(&ch));
+    |                                    ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSModeSwitchFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:315:59
+    |
+315 |                 .is_none_or(|ch| !(NSUpArrowFunctionKey..=NSModeSwitchFunctionKey).contains(&ch));
+    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSUpArrowFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:334:18
+    |
+334 |             Some(NSUpArrowFunctionKey) => "up".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSDownArrowFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:335:18
+    |
+335 |             Some(NSDownArrowFunctionKey) => "down".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSLeftArrowFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:336:18
+    |
+336 |             Some(NSLeftArrowFunctionKey) => "left".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSRightArrowFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:337:18
+    |
+337 |             Some(NSRightArrowFunctionKey) => "right".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSPageUpFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:338:18
+    |
+338 |             Some(NSPageUpFunctionKey) => "pageup".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSPageDownFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:339:18
+    |
+339 |             Some(NSPageDownFunctionKey) => "pagedown".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSHomeFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:340:18
+    |
+340 |             Some(NSHomeFunctionKey) => "home".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSEndFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:341:18
+    |
+341 |             Some(NSEndFunctionKey) => "end".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSDeleteFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:342:18
+    |
+342 |             Some(NSDeleteFunctionKey) => "delete".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSHelpFunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:344:18
+    |
+344 |             Some(NSHelpFunctionKey) => "insert".to_string(),
+    |                  ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF1FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:345:18
+    |
+345 |             Some(NSF1FunctionKey) => "f1".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF2FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:346:18
+    |
+346 |             Some(NSF2FunctionKey) => "f2".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF3FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:347:18
+    |
+347 |             Some(NSF3FunctionKey) => "f3".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF4FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:348:18
+    |
+348 |             Some(NSF4FunctionKey) => "f4".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF5FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:349:18
+    |
+349 |             Some(NSF5FunctionKey) => "f5".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF6FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:350:18
+    |
+350 |             Some(NSF6FunctionKey) => "f6".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF7FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:351:18
+    |
+351 |             Some(NSF7FunctionKey) => "f7".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF8FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:352:18
+    |
+352 |             Some(NSF8FunctionKey) => "f8".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF9FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:353:18
+    |
+353 |             Some(NSF9FunctionKey) => "f9".to_string(),
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF10FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:354:18
+    |
+354 |             Some(NSF10FunctionKey) => "f10".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF11FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:355:18
+    |
+355 |             Some(NSF11FunctionKey) => "f11".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF12FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:356:18
+    |
+356 |             Some(NSF12FunctionKey) => "f12".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF13FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:357:18
+    |
+357 |             Some(NSF13FunctionKey) => "f13".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF14FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:358:18
+    |
+358 |             Some(NSF14FunctionKey) => "f14".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF15FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:359:18
+    |
+359 |             Some(NSF15FunctionKey) => "f15".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF16FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:360:18
+    |
+360 |             Some(NSF16FunctionKey) => "f16".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF17FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:361:18
+    |
+361 |             Some(NSF17FunctionKey) => "f17".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF18FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:362:18
+    |
+362 |             Some(NSF18FunctionKey) => "f18".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF19FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:363:18
+    |
+363 |             Some(NSF19FunctionKey) => "f19".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF20FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:364:18
+    |
+364 |             Some(NSF20FunctionKey) => "f20".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF21FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:365:18
+    |
+365 |             Some(NSF21FunctionKey) => "f21".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF22FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:366:18
+    |
+366 |             Some(NSF22FunctionKey) => "f22".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF23FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:367:18
+    |
+367 |             Some(NSF23FunctionKey) => "f23".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF24FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:368:18
+    |
+368 |             Some(NSF24FunctionKey) => "f24".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF25FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:369:18
+    |
+369 |             Some(NSF25FunctionKey) => "f25".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF26FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:370:18
+    |
+370 |             Some(NSF26FunctionKey) => "f26".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF27FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:371:18
+    |
+371 |             Some(NSF27FunctionKey) => "f27".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF28FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:372:18
+    |
+372 |             Some(NSF28FunctionKey) => "f28".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF29FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:373:18
+    |
+373 |             Some(NSF29FunctionKey) => "f29".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF30FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:374:18
+    |
+374 |             Some(NSF30FunctionKey) => "f30".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF31FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:375:18
+    |
+375 |             Some(NSF31FunctionKey) => "f31".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF32FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:376:18
+    |
+376 |             Some(NSF32FunctionKey) => "f32".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF33FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:377:18
+    |
+377 |             Some(NSF33FunctionKey) => "f33".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF34FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:378:18
+    |
+378 |             Some(NSF34FunctionKey) => "f34".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSF35FunctionKey`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:379:18
+    |
+379 |             Some(NSF35FunctionKey) => "f35".to_string(),
+    |                  ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated module `cocoa::appkit`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:299:20
+    |
+299 |         use cocoa::appkit::*;
+    |                    ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/events.rs:105:23
+    |
+105 |         native_event: id,
+    |                       ^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSFlagsChanged`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:121:30
+    |
+121 |                 NSEventType::NSFlagsChanged => {
+    |                              ^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:127:43
+    |
+127 | ...                   .contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+    |                                 ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSKeyDown`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:131:30
+    |
+131 |                 NSEventType::NSKeyDown => Some(Self::KeyDown(KeyDownEvent {
+    |                              ^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSKeyUp`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:135:30
+    |
+135 |                 NSEventType::NSKeyUp => Some(Self::KeyUp(KeyUpEvent {
+    |                              ^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSLeftMouseDown`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:138:30
+    |
+138 |                 NSEventType::NSLeftMouseDown
+    |                              ^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSRightMouseDown`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:139:32
+    |
+139 |                 | NSEventType::NSRightMouseDown
+    |                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSOtherMouseDown`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:140:32
+    |
+140 |                 | NSEventType::NSOtherMouseDown => {
+    |                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSLeftMouseUp`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:164:30
+    |
+164 |                 NSEventType::NSLeftMouseUp
+    |                              ^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSRightMouseUp`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:165:32
+    |
+165 |                 | NSEventType::NSRightMouseUp
+    |                                ^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSOtherMouseUp`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:166:32
+    |
+166 |                 | NSEventType::NSOtherMouseUp => {
+    |                                ^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSEventTypeSwipe`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:190:30
+    |
+190 |                 NSEventType::NSEventTypeSwipe => {
+    |                              ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventPhase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:192:25
+    |
+192 |                         NSEventPhase::NSEventPhaseEnded => match native_event.deltaX() {
+    |                         ^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSScrollWheel`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:216:30
+    |
+216 |                 NSEventType::NSScrollWheel => window_height.map(|window_height| {
+    |                              ^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventPhase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:218:25
+    |
+218 |                         NSEventPhase::NSEventPhaseMayBegin | NSEventPhase::NSEventPhaseBegan => {
+    |                         ^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventPhase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:218:62
+    |
+218 |                         NSEventPhase::NSEventPhaseMayBegin | NSEventPhase::NSEventPhaseBegan => {
+    |                                                              ^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventPhase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:221:25
+    |
+221 |                         NSEventPhase::NSEventPhaseEnded => TouchPhase::Ended,
+    |                         ^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSLeftMouseDragged`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:246:30
+    |
+246 |                 NSEventType::NSLeftMouseDragged
+    |                              ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSRightMouseDragged`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:247:32
+    |
+247 |                 | NSEventType::NSRightMouseDragged
+    |                                ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSOtherMouseDragged`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:248:32
+    |
+248 |                 | NSEventType::NSOtherMouseDragged => {
+    |                                ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSMouseMoved`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:270:30
+    |
+270 |                 NSEventType::NSMouseMoved => window_height.map(|window_height| {
+    |                              ^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSMouseExited`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:280:30
+    |
+280 |                 NSEventType::NSMouseExited => window_height.map(|window_height| {
+    |                              ^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/screen_capture.rs:9:17
+  |
+9 |     base::{YES, id, nil},
+  |                 ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/screen_capture.rs:9:21
+  |
+9 |     base::{YES, id, nil},
+  |                     ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSArray`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:10:18
+   |
+10 |     foundation::{NSArray, NSString},
+   |                  ^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:10:27
+   |
+10 |     foundation::{NSArray, NSString},
+   |                           ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:35:17
+   |
+35 |     sc_display: id,
+   |                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:40:16
+   |
+40 |     sc_stream: id,
+   |                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:41:23
+   |
+41 |     sc_stream_output: id,
+   |                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:195:18
+    |
+195 |     let screens: id = msg_send![class!(NSScreen), screens];
+    |                  ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:198:48
+    |
+198 |     let screen_number_key = unsafe { NSString::alloc(nil).init_str("NSScreenNumber") };
+    |                                                ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:198:54
+    |
+198 |     let screen_number_key = unsafe { NSString::alloc(nil).init_str("NSScreenNumber") };
+    |                                                      ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:200:21
+    |
+200 |         let screen: id = msg_send![screens, objectAtIndex: i];
+    |                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:201:26
+    |
+201 |         let device_desc: id = msg_send![screen, deviceDescription];
+    |                          ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:202:27
+    |
+202 |         if device_desc == nil {
+    |                           ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:206:23
+    |
+206 |         let nsnumber: id = msg_send![device_desc, objectForKey: screen_number_key];
+    |                       ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:207:24
+    |
+207 |         if nsnumber == nil {
+    |                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:213:19
+    |
+213 |         let name: id = msg_send![screen, localizedName];
+    |                   ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:214:20
+    |
+214 |         if name != nil {
+    |                    ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:238:65
+    |
+238 |         let block = ConcreteBlock::new(move |shareable_content: id, error: id| {
+    |                                                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:238:76
+    |
+238 |         let block = ConcreteBlock::new(move |shareable_content: id, error: id| {
+    |                                                                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:243:38
+    |
+243 |             let result = if error == nil {
+    |                                      ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:244:31
+    |
+244 |                 let displays: id = msg_send![shareable_content, displays];
+    |                               ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:258:26
+    |
+258 |                 let msg: id = msg_send![error, localizedDescription];
+    |                          ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:283:85
+    |
+283 |             output_video_effect_did_start_for_stream as extern "C" fn(&Object, Sel, id),
+    |                                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:287:84
+    |
+287 |             output_video_effect_did_stop_for_stream as extern "C" fn(&Object, Sel, id),
+    |                                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:291:71
+    |
+291 |             stream_did_stop_with_error as extern "C" fn(&Object, Sel, id, id),
+    |                                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:291:75
+    |
+291 |             stream_did_stop_with_error as extern "C" fn(&Object, Sel, id, id),
+    |                                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:299:48
+    |
+299 |                 as extern "C" fn(&Object, Sel, id, id, NSInteger),
+    |                                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:299:52
+    |
+299 |                 as extern "C" fn(&Object, Sel, id, id, NSInteger),
+    |                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:307:89
+    |
+307 | extern "C" fn output_video_effect_did_start_for_stream(_this: &Object, _: Sel, _stream: id) {}
+    |                                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:309:88
+    |
+309 | extern "C" fn output_video_effect_did_stop_for_stream(_this: &Object, _: Sel, _stream: id) {}
+    |                                                                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:311:75
+    |
+311 | extern "C" fn stream_did_stop_with_error(_this: &Object, _: Sel, _stream: id, _error: id) {}
+    |                                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:311:87
+    |
+311 | extern "C" fn stream_did_stop_with_error(_this: &Object, _: Sel, _stream: id, _error: id) {}
+    |                                                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:316:14
+    |
+316 |     _stream: id,
+    |              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:317:20
+    |
+317 |     sample_buffer: id,
+    |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:86:25
+   |
+86 |             let stream: id = msg_send![class!(SCStream), alloc];
+   |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:87:25
+   |
+87 |             let filter: id = msg_send![class!(SCContentFilter), alloc];
+   |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:88:32
+   |
+88 |             let configuration: id = msg_send![class!(SCStreamConfiguration), alloc];
+   |                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:89:27
+   |
+89 |             let delegate: id = msg_send![DELEGATE_CLASS, alloc];
+   |                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:90:25
+   |
+90 |             let output: id = msg_send![OUTPUT_CLASS, alloc];
+   |                         ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSArray::array`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:92:45
+   |
+92 |             let excluded_windows = NSArray::array(nil);
+   |                                             ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:92:51
+   |
+92 |             let excluded_windows = NSArray::array(nil);
+   |                                                   ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:93:25
+   |
+93 |             let filter: id = msg_send![filter, initWithDisplay:self.sc_display excludingWindows:excluded_windows];
+   |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:94:32
+   |
+94 |             let configuration: id = msg_send![configuration, init];
+   |                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:95:20
+   |
+95 |             let _: id = msg_send![configuration, setScalesToFit: true];
+   |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:96:20
+   |
+96 |             let _: id = msg_send![configuration, setPixelFormat: 0x42475241];
+   |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/screen_capture.rs:99:27
+   |
+99 |             let delegate: id = msg_send![delegate, init];
+   |                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:100:25
+    |
+100 |             let output: id = msg_send![output, init];
+    |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:108:20
+    |
+108 |             let _: id = msg_send![configuration, setWidth: meta.resolution.width.0 as i64];
+    |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:109:20
+    |
+109 |             let _: id = msg_send![configuration, setHeight: meta.resolution.height.0 as i64];
+    |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:110:25
+    |
+110 |             let stream: id = msg_send![stream, initWithFilter:filter configuration:configuration delegate:delegate];
+    |                         ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:114:33
+    |
+114 |             let mut error: id = nil;
+    |                                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:114:28
+    |
+114 |             let mut error: id = nil;
+    |                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:115:142
+    |
+115 | ...utputTypeScreen sampleHandlerQueue:0 error:&mut error as *mut id];
+    |                                                                  ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:116:25
+    |
+116 |             if error != nil {
+    |                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:117:30
+    |
+117 |                 let message: id = msg_send![error, localizedDescription];
+    |                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:125:30
+    |
+125 |                 move |error: id| {
+    |                              ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:126:46
+    |
+126 |                     let result = if error == nil {
+    |                                              ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:134:38
+    |
+134 |                         let message: id = msg_send![error, localizedDescription];
+    |                                      ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:166:33
+    |
+166 |             let mut error: id = nil;
+    |                                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:166:28
+    |
+166 |             let mut error: id = nil;
+    |                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:168:25
+    |
+168 |             if error != nil {
+    |                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:169:30
+    |
+169 |                 let message: id = msg_send![error, localizedDescription];
+    |                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:173:59
+    |
+173 |             let handler = ConcreteBlock::new(move |error: id| {
+    |                                                           ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:174:29
+    |
+174 |                 if error != nil {
+    |                             ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:175:34
+    |
+175 |                     let message: id = msg_send![error, localizedDescription];
+    |                                  ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/metal_renderer.rs:11:18
+   |
+11 |     foundation::{NSSize, NSUInteger},
+   |                  ^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/metal_renderer.rs:11:26
+   |
+11 |     foundation::{NSSize, NSUInteger},
+   |                          ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::quartzcore::AutoresizingMask`: use the objc2-quartz-core crate instead
+  --> crates/gpui/src/platform/mac/metal_renderer.rs:12:17
+   |
+12 |     quartzcore::AutoresizingMask,
+   |                 ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::quartzcore::AutoresizingMask`: use the objc2-quartz-core crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:152:38
+    |
+152 |                 setAutoresizingMask: AutoresizingMask::WIDTH_SIZABLE
+    |                                      ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::quartzcore::AutoresizingMask`: use the objc2-quartz-core crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:153:23
+    |
+153 |                     | AutoresizingMask::HEIGHT_SIZABLE
+    |                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:299:20
+    |
+299 |         let size = NSSize {
+    |                    ^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:545:40
+    |
+545 |             length: instance_offset as NSUInteger,
+    |                                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/attributed_string.rs:1:18
+  |
+1 | use cocoa::base::id;
+  |                  ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+ --> crates/gpui/src/platform/mac/attributed_string.rs:2:24
+  |
+2 | use cocoa::foundation::NSRange;
+  |                        ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:21:29
+   |
+21 | impl NSAttributedString for id {
+   |                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:49:36
+   |
+49 | impl NSMutableAttributedString for id {}
+   |                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:10:33
+   |
+10 |     unsafe fn alloc(_: Self) -> id {
+   |                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:14:52
+   |
+14 |     unsafe fn init_attributed_string(self, string: id) -> id;
+   |                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:14:59
+   |
+14 |     unsafe fn init_attributed_string(self, string: id) -> id;
+   |                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:15:58
+   |
+15 |     unsafe fn appendAttributedString_(self, attr_string: id);
+   |                                                          ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:16:62
+   |
+16 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                              ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:16:78
+   |
+16 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:16:85
+   |
+16 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                                                     ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:17:61
+   |
+17 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                             ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:17:77
+   |
+17 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:17:84
+   |
+17 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id;
+   |                                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:18:31
+   |
+18 |     unsafe fn string(self) -> id;
+   |                               ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:44:33
+   |
+44 |     unsafe fn alloc(_: Self) -> id {
+   |                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:22:52
+   |
+22 |     unsafe fn init_attributed_string(self, string: id) -> id {
+   |                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:22:59
+   |
+22 |     unsafe fn init_attributed_string(self, string: id) -> id {
+   |                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:26:58
+   |
+26 |     unsafe fn appendAttributedString_(self, attr_string: id) {
+   |                                                          ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:30:62
+   |
+30 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                              ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:30:78
+   |
+30 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:30:85
+   |
+30 |     unsafe fn RTFDFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                                                     ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:34:61
+   |
+34 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                             ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:34:77
+   |
+34 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:34:84
+   |
+34 |     unsafe fn RTFFromRange_documentAttributes_(self, range: NSRange, attrs: id) -> id {
+   |                                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/attributed_string.rs:38:31
+   |
+38 |     unsafe fn string(self) -> id {
+   |                               ^^
+
+warning: use of deprecated trait `cocoa::appkit::NSApplication`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:19:9
+   |
+19 |         NSApplication, NSApplicationActivationPolicy::NSApplicationActivationPolicyRegular,
+   |         ^^^^^^^^^^^^^
+
+warning: use of deprecated variant `cocoa::appkit::NSApplicationActivationPolicyRegular`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:19:55
+   |
+19 |         NSApplication, NSApplicationActivationPolicy::NSApplicationActivationPolicyRegular,
+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSApplicationActivationPolicyRegular`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:19:55
+   |
+19 |         NSApplication, NSApplicationActivationPolicy::NSApplicationActivationPolicyRegular,
+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:9
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |         ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSMenu`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:31
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |                               ^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSMenuItem`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:39
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |                                       ^^^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSModalResponse`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:51
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |                                                   ^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSOpenPanel`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:68
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |                                                                    ^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSPasteboard`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:20:81
+   |
+20 |         NSEventModifierFlags, NSMenu, NSMenuItem, NSModalResponse, NSOpenPanel, NSPasteboard,
+   |                                                                                 ^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypePNG`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:21:9
+   |
+21 |         NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
+   |         ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeRTF`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:21:30
+   |
+21 |         NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
+   |                              ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeRTFD`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:21:51
+   |
+21 |         NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
+   |                                                   ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeString`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:21:73
+   |
+21 |         NSPasteboardTypePNG, NSPasteboardTypeRTF, NSPasteboardTypeRTFD, NSPasteboardTypeString,
+   |                                                                         ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeTIFF`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:22:9
+   |
+22 |         NSPasteboardTypeTIFF, NSSavePanel, NSWindow,
+   |         ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSSavePanel`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:22:31
+   |
+22 |         NSPasteboardTypeTIFF, NSSavePanel, NSWindow,
+   |                               ^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSWindow`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:22:44
+   |
+22 |         NSPasteboardTypeTIFF, NSSavePanel, NSWindow,
+   |                                            ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:24:27
+   |
+24 |     base::{BOOL, NO, YES, id, nil, selector},
+   |                           ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:24:31
+   |
+24 |     base::{BOOL, NO, YES, id, nil, selector},
+   |                               ^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:24:36
+   |
+24 |     base::{BOOL, NO, YES, id, nil, selector},
+   |                                    ^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSArray`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:9
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |         ^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSAutoreleasePool`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:18
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                  ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSBundle`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:37
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                     ^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSData`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:47
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                               ^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:55
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                                       ^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSProcessInfo`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:66
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                                                  ^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:81
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                                                                 ^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:26:90
+   |
+26 |         NSArray, NSAutoreleasePool, NSBundle, NSData, NSInteger, NSProcessInfo, NSRange, NSString,
+   |                                                                                          ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:27:9
+   |
+27 |         NSUInteger, NSURL,
+   |         ^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSURL`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:27:21
+   |
+27 |         NSUInteger, NSURL,
+   |                     ^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:66:29
+   |
+66 | const NSUTF8StringEncoding: NSUInteger = 4;
+   |                             ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:87:73
+   |
+87 |                 did_finish_launching as extern "C" fn(&mut Object, Sel, id),
+   |                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:91:73
+   |
+91 |                 should_handle_reopen as extern "C" fn(&mut Object, Sel, id, bool),
+   |                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:95:67
+   |
+95 |                 will_terminate as extern "C" fn(&mut Object, Sel, id),
+   |                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/platform.rs:99:69
+   |
+99 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+   |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:104:69
+    |
+104 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:108:69
+    |
+108 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:112:69
+    |
+112 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:116:69
+    |
+116 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:120:69
+    |
+120 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:124:69
+    |
+124 |                 handle_menu_item as extern "C" fn(&mut Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:128:71
+    |
+128 |                 validate_menu_item as extern "C" fn(&mut Object, Sel, id) -> bool,
+    |                                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:132:67
+    |
+132 |                 menu_will_open as extern "C" fn(&mut Object, Sel, id),
+    |                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:136:69
+    |
+136 |                 handle_dock_menu as extern "C" fn(&mut Object, Sel, id) -> id,
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:136:76
+    |
+136 |                 handle_dock_menu as extern "C" fn(&mut Object, Sel, id) -> id,
+    |                                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:140:62
+    |
+140 |                 open_urls as extern "C" fn(&mut Object, Sel, id, id),
+    |                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:140:66
+    |
+140 |                 open_urls as extern "C" fn(&mut Object, Sel, id, id),
+    |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:145:78
+    |
+145 |                 on_keyboard_layout_change as extern "C" fn(&mut Object, Sel, id),
+    |                                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:161:17
+    |
+161 |     pasteboard: id,
+    |                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:162:32
+    |
+162 |     text_hash_pasteboard_type: id,
+    |                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:163:31
+    |
+163 |     metadata_pasteboard_type: id,
+    |                               ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:173:23
+    |
+173 |     dock_menu: Option<id>,
+    |                       ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:515:42
+    |
+515 |                 let app = NSApplication::sharedApplication(nil);
+    |                                          ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:515:60
+    |
+515 |                 let app = NSApplication::sharedApplication(nil);
+    |                                                            ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:516:55
+    |
+516 |                 let _: () = msg_send![app, terminate: nil];
+    |                                                       ^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1008:39
+     |
+1008 |         const NSScrollerStyleOverlay: NSInteger = 1;
+     |                                       ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1318:36
+     |
+1318 | fn try_clipboard_image(pasteboard: id, format: ImageFormat) -> Option<ClipboardItem> {
+     |                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1322:20
+     |
+1322 |         let types: id = pasteboard.types();
+     |                    ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1325:24
+     |
+1325 |             if data == nil {
+     |                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1344:32
+     |
+1344 | unsafe fn path_from_objc(path: id) -> PathBuf {
+     |                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1359:66
+     |
+1359 | extern "C" fn did_finish_launching(this: &mut Object, _: Sel, _: id) {
+     |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1361:18
+     |
+1361 |         let app: id = msg_send![APP_CLASS, sharedApplication];
+     |                  ^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSApplicationActivationPolicyRegular`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1362:34
+     |
+1362 |         app.setActivationPolicy_(NSApplicationActivationPolicyRegular);
+     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1367:73
+     |
+1367 |         let _: () = msg_send![notification_center, addObserver: this as id
+     |                                                                         ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1370:21
+     |
+1370 |             object: nil
+     |                     ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1381:66
+     |
+1381 | extern "C" fn should_handle_reopen(this: &mut Object, _: Sel, _: id, has_open_windows: bool) {
+     |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1393:60
+     |
+1393 | extern "C" fn will_terminate(this: &mut Object, _: Sel, _: id) {
+     |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1403:71
+     |
+1403 | extern "C" fn on_keyboard_layout_change(this: &mut Object, _: Sel, _: id) {
+     |                                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1419:55
+     |
+1419 | extern "C" fn open_urls(this: &mut Object, _: Sel, _: id, urls: id) {
+     |                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1419:65
+     |
+1419 | extern "C" fn open_urls(this: &mut Object, _: Sel, _: id, urls: id) {
+     |                                                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1443:65
+     |
+1443 | extern "C" fn handle_menu_item(this: &mut Object, _: Sel, item: id) {
+     |                                                                 ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1448:22
+     |
+1448 |             let tag: NSInteger = msg_send![item, tag];
+     |                      ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1460:67
+     |
+1460 | extern "C" fn validate_menu_item(this: &mut Object, _: Sel, item: id) -> bool {
+     |                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1466:22
+     |
+1466 |             let tag: NSInteger = msg_send![item, tag];
+     |                      ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1483:60
+     |
+1483 | extern "C" fn menu_will_open(this: &mut Object, _: Sel, _: id) {
+     |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1495:62
+     |
+1495 | extern "C" fn handle_dock_menu(this: &mut Object, _: Sel, _: id) -> id {
+     |                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1495:69
+     |
+1495 | extern "C" fn handle_dock_menu(this: &mut Object, _: Sel, _: id) -> id {
+     |                                                                     ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1502:13
+     |
+1502 |             nil
+     |             ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1507:38
+     |
+1507 | unsafe fn ns_string(string: &str) -> id {
+     |                                      ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1508:24
+     |
+1508 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+     |                        ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1508:30
+     |
+1508 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+     |                              ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1511:31
+     |
+1511 | unsafe fn ns_url_to_path(url: id) -> Result<PathBuf> {
+     |                               ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1587:15
+     |
+1587 | struct UTType(id);
+     |               ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSPasteboard::generalPasteboard`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:203:48
+    |
+203 |             pasteboard: unsafe { NSPasteboard::generalPasteboard(nil) },
+    |                                                ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:203:66
+    |
+203 |             pasteboard: unsafe { NSPasteboard::generalPasteboard(nil) },
+    |                                                                  ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:221:74
+    |
+221 |     unsafe fn read_from_pasteboard(&self, pasteboard: *mut Object, kind: id) -> Option<&[u8]> {
+    |                                                                          ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:224:24
+    |
+224 |             if data == nil {
+    |                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:238:19
+    |
+238 |         delegate: id,
+    |                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:241:10
+    |
+241 |     ) -> id {
+    |          ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenu::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:243:44
+    |
+243 |             let application_menu = NSMenu::new(nil).autorelease();
+    |                                            ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:243:48
+    |
+243 |             let application_menu = NSMenu::new(nil).autorelease();
+    |                                                ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenu::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:247:36
+    |
+247 |                 let menu = NSMenu::new(nil).autorelease();
+    |                                    ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:247:40
+    |
+247 |                 let menu = NSMenu::new(nil).autorelease();
+    |                                        ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:261:45
+    |
+261 |                 let menu_item = NSMenuItem::new(nil).autorelease();
+    |                                             ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:261:49
+    |
+261 |                 let menu_item = NSMenuItem::new(nil).autorelease();
+    |                                                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:267:30
+    |
+267 |                     let app: id = msg_send![APP_CLASS, sharedApplication];
+    |                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:279:19
+    |
+279 |         delegate: id,
+    |                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:282:10
+    |
+282 |     ) -> id {
+    |          ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenu::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:284:37
+    |
+284 |             let dock_menu = NSMenu::new(nil);
+    |                                     ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:284:41
+    |
+284 |             let dock_menu = NSMenu::new(nil);
+    |                                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:301:19
+    |
+301 |         delegate: id,
+    |                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:304:10
+    |
+304 |     ) -> id {
+    |          ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::separatorItem`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:309:52
+    |
+309 |                 MenuItem::Separator => NSMenuItem::separatorItem(nil),
+    |                                                    ^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:309:66
+    |
+309 |                 MenuItem::Separator => NSMenuItem::separatorItem(nil),
+    |                                                                  ^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:339:55
+    |
+339 |                         Some(crate::OsAction::Cut) => selector("cut:"),
+    |                                                       ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:340:56
+    |
+340 |                         Some(crate::OsAction::Copy) => selector("copy:"),
+    |                                                        ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:341:57
+    |
+341 |                         Some(crate::OsAction::Paste) => selector("paste:"),
+    |                                                         ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:342:61
+    |
+342 |                         Some(crate::OsAction::SelectAll) => selector("selectAll:"),
+    |                                                             ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:345:56
+    |
+345 |                         Some(crate::OsAction::Undo) => selector("handleGPUIMenuItem:"),
+    |                                                        ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:346:56
+    |
+346 |                         Some(crate::OsAction::Redo) => selector("handleGPUIMenuItem:"),
+    |                                                        ^^^^^^^^
+
+warning: use of deprecated function `cocoa::base::selector`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:347:33
+    |
+347 |                         None => selector("handleGPUIMenuItem:"),
+    |                                 ^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:354:44
+    |
+354 | ...                   let mut mask = NSEventModifierFlags::empty();
+    |                                      ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:358:37
+    |
+358 | ...                   NSEventModifierFlags::NSCommandKeyMask,
+    |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:362:37
+    |
+362 | ...                   NSEventModifierFlags::NSControlKeyMask,
+    |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:366:37
+    |
+366 | ...                   NSEventModifierFlags::NSAlternateKeyMask,
+    |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:370:37
+    |
+370 | ...                   NSEventModifierFlags::NSShiftKeyMask,
+    |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::alloc`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:378:48
+    |
+378 | ...                   item = NSMenuItem::alloc(nil)
+    |                                          ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:378:54
+    |
+378 | ...                   item = NSMenuItem::alloc(nil)
+    |                                                ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::alloc`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:390:48
+    |
+390 | ...                   item = NSMenuItem::alloc(nil)
+    |                                          ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:390:54
+    |
+390 | ...                   item = NSMenuItem::alloc(nil)
+    |                                                ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::alloc`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:399:44
+    |
+399 |                         item = NSMenuItem::alloc(nil)
+    |                                            ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:399:50
+    |
+399 |                         item = NSMenuItem::alloc(nil)
+    |                                                  ^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:408:48
+    |
+408 |                     let tag = actions.len() as NSInteger;
+    |                                                ^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:414:44
+    |
+414 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                            ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:414:48
+    |
+414 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                                ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenu::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:415:43
+    |
+415 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                           ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:415:47
+    |
+415 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                               ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenuItem::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:425:44
+    |
+425 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                            ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:425:48
+    |
+425 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                                ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSMenu::new`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:426:43
+    |
+426 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                           ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:426:47
+    |
+426 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                               ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:433:38
+    |
+433 | ...                   let app: id = msg_send![APP_CLASS, sharedApplication];
+    |                                ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSProcessInfo::processInfo`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:446:47
+    |
+446 |             let process_info = NSProcessInfo::processInfo(nil);
+    |                                               ^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:446:59
+    |
+446 |             let process_info = NSProcessInfo::processInfo(nil);
+    |                                                           ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:482:22
+    |
+482 |             let app: id = msg_send![APP_CLASS, sharedApplication];
+    |                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:483:31
+    |
+483 |             let app_delegate: id = msg_send![APP_DELEGATE_CLASS, new];
+    |                               ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSAutoreleasePool::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:490:43
+    |
+490 |             let pool = NSAutoreleasePool::new(nil);
+    |                                           ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:490:47
+    |
+490 |             let pool = NSAutoreleasePool::new(nil);
+    |                                               ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::delegate`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:495:25
+    |
+495 |             (*NSWindow::delegate(app)).set_ivar(MAC_PLATFORM_IVAR, null_mut::<c_void>());
+    |                         ^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:558:38
+    |
+558 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:558:56
+    |
+558 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:565:38
+    |
+565 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:565:56
+    |
+565 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:566:46
+    |
+566 |             let _: () = msg_send![app, hide: nil];
+    |                                              ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:572:38
+    |
+572 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:572:56
+    |
+572 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:573:63
+    |
+573 |             let _: () = msg_send![app, hideOtherApplications: nil];
+    |                                                               ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:579:38
+    |
+579 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:579:56
+    |
+579 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:580:63
+    |
+580 |             let _: () = msg_send![app, unhideAllApplications: nil];
+    |                                                               ^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSOperatingSystemVersion`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:596:46
+    |
+596 |         let min_version = cocoa::foundation::NSOperatingSystemVersion::new(12, 3, 0);
+    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:633:38
+    |
+633 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:633:56
+    |
+633 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:634:29
+    |
+634 |             let appearance: id = msg_send![app, effectiveAppearance];
+    |                             ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSURL::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:641:30
+    |
+641 |             let url = NSURL::alloc(nil)
+    |                              ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:641:36
+    |
+641 |             let url = NSURL::alloc(nil)
+    |                                    ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:644:28
+    |
+644 |             let workspace: id = msg_send![class!(NSWorkspace), sharedWorkspace];
+    |                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:660:25
+    |
+660 |             let bundle: id = msg_send![class!(NSBundle), mainBundle];
+    |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:661:28
+    |
+661 |             let bundle_id: id = msg_send![bundle, bundleIdentifier];
+    |                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:662:29
+    |
+662 |             if bundle_id == nil {
+    |                             ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:669:28
+    |
+669 |             let workspace: id = msg_send![class!(NSWorkspace), sharedWorkspace];
+    |                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:670:25
+    |
+670 |             let scheme: id = ns_string(scheme);
+    |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:671:22
+    |
+671 |             let app: id = msg_send![workspace, URLForApplicationWithBundleIdentifier: bundle_id];
+    |                      ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:672:23
+    |
+672 |             if app == nil {
+    |                       ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:678:57
+    |
+678 |             let block = ConcreteBlock::new(move |error: id| {
+    |                                                         ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:679:42
+    |
+679 |                 let result = if error == nil {
+    |                                          ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:682:30
+    |
+682 |                     let msg: id = msg_send![error, localizedDescription];
+    |                              ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSOpenPanel::openPanel`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:710:46
+    |
+710 |                     let panel = NSOpenPanel::openPanel(nil);
+    |                                              ^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:710:56
+    |
+710 |                     let panel = NSOpenPanel::openPanel(nil);
+    |                                                        ^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSModalResponse`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:718:68
+    |
+718 |                     let block = ConcreteBlock::new(move |response: NSModalResponse| {
+    |                                                                    ^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSModalResponse::NSModalResponseOk`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:719:70
+    |
+719 |                         let result = if response == NSModalResponse::NSModalResponseOk {
+    |                                                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSSavePanel::savePanel`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:763:46
+    |
+763 |                     let panel = NSSavePanel::savePanel(nil);
+    |                                              ^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:763:56
+    |
+763 |                     let panel = NSSavePanel::savePanel(nil);
+    |                                                        ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSURL::fileURLWithPath_isDirectory_`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:765:38
+    |
+765 |                     let url = NSURL::fileURLWithPath_isDirectory_(nil, path, true.to_objc());
+    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:765:67
+    |
+765 |                     let url = NSURL::fileURLWithPath_isDirectory_(nil, path, true.to_objc());
+    |                                                                   ^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSModalResponse`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:774:68
+    |
+774 |                     let block = ConcreteBlock::new(move |response: NSModalResponse| {
+    |                                                                    ^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSModalResponse::NSModalResponseOk`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:776:57
+    |
+776 |                         if response == NSModalResponse::NSModalResponseOk {
+    |                                                         ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:837:36
+    |
+837 |                     let workspace: id = msg_send![class!(NSWorkspace), sharedWorkspace];
+    |                                    ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSBundle::mainBundle`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:897:40
+    |
+897 |             let bundle: id = NSBundle::mainBundle();
+    |                                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:897:25
+    |
+897 |             let bundle: id = NSBundle::mainBundle();
+    |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:905:22
+    |
+905 |             let app: id = msg_send![APP_CLASS, sharedApplication];
+    |                      ^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::delegate`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:908:63
+    |
+908 |             let menu = self.create_menu_bar(&menus, NSWindow::delegate(app), actions, keymap);
+    |                                                               ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:921:22
+    |
+921 |             let app: id = msg_send![APP_CLASS, sharedApplication];
+    |                      ^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::delegate`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:924:61
+    |
+924 |             let new = self.create_dock_menu(menu, NSWindow::delegate(app), actions, keymap);
+    |                                                             ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:934:42
+    |
+934 |                 let document_controller: id =
+    |                                          ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSURL::fileURLWithPath_`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:936:38
+    |
+936 |                 let url: id = NSURL::fileURLWithPath_(nil, ns_string(path_str));
+    |                                      ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:936:55
+    |
+936 |                 let url: id = NSURL::fileURLWithPath_(nil, ns_string(path_str));
+    |                                                       ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:936:26
+    |
+936 |                 let url: id = NSURL::fileURLWithPath_(nil, ns_string(path_str));
+    |                          ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSBundle::mainBundle`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:944:40
+    |
+944 |             let bundle: id = NSBundle::mainBundle();
+    |                                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:944:25
+    |
+944 |             let bundle: id = NSBundle::mainBundle();
+    |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:947:22
+    |
+947 |             let url: id = msg_send![bundle, URLForAuxiliaryExecutable: name];
+    |                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:962:29
+    |
+962 |             let new_cursor: id = match style {
+    |                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:999:29
+    |
+999 |             let old_cursor: id = msg_send![class!(NSCursor), currentCursor];
+    |                             ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1011:24
+     |
+1011 |             let style: NSInteger = msg_send![class!(NSScroller), preferredScrollerStyle];
+     |                        ^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1040:68
+     |
+1040 |                     let mut buf = NSMutableAttributedString::alloc(nil)
+     |                                                                    ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1042:59
+     |
+1042 |                         .init_attributed_string(NSString::alloc(nil).init_str(""));
+     |                                                           ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1042:65
+     |
+1042 |                         .init_attributed_string(NSString::alloc(nil).init_str(""));
+     |                                                                 ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1047:71
+     |
+1047 | ...                   let to_append = NSAttributedString::alloc(nil)
+     |                                                                 ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1048:67
+     |
+1048 | ...                   .init_attributed_string(NSString::alloc(nil).init_str(&text));
+     |                                                         ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1048:73
+     |
+1048 | ...                   .init_attributed_string(NSString::alloc(nil).init_str(&text));
+     |                                                               ^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1063:25
+     |
+1063 |                         NSRange::new(0, msg_send![attributed_string, length]),
+     |                         ^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1064:25
+     |
+1064 |                         nil,
+     |                         ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1066:37
+     |
+1066 |                     if rtfd_data != nil {
+     |                                     ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeRTFD`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1069:57
+     |
+1069 | ...                   .setData_forType(rtfd_data, NSPasteboardTypeRTFD);
+     |                                                   ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRange`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1073:25
+     |
+1073 |                         NSRange::new(0, attributed_string.length()),
+     |                         ^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1074:25
+     |
+1074 |                         nil,
+     |                         ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1076:36
+     |
+1076 |                     if rtf_data != nil {
+     |                                    ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeRTF`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1079:56
+     |
+1079 | ...                   .setData_forType(rtf_data, NSPasteboardTypeRTF);
+     |                                                  ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeString`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1086:52
+     |
+1086 |                     .setString_forType(plain_text, NSPasteboardTypeString);
+     |                                                    ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1097:24
+     |
+1097 |             let types: id = pasteboard.types();
+     |                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1098:30
+     |
+1098 |             let string_type: id = ns_string("public.utf8-plain-text");
+     |                              ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1102:28
+     |
+1102 |                 if data == nil {
+     |                            ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSData::dataWithBytes_length_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1268:38
+     |
+1268 |             let text_bytes = NSData::dataWithBytes_length_(
+     |                                      ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1269:17
+     |
+1269 |                 nil,
+     |                 ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeString`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1275:46
+     |
+1275 |                 .setData_forType(text_bytes, NSPasteboardTypeString);
+     |                                              ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSData::dataWithBytes_length_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1279:42
+     |
+1279 |                 let hash_bytes = NSData::dataWithBytes_length_(
+     |                                          ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1280:21
+     |
+1280 |                     nil,
+     |                     ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSData::dataWithBytes_length_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1288:46
+     |
+1288 |                 let metadata_bytes = NSData::dataWithBytes_length_(
+     |                                              ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1289:21
+     |
+1289 |                     nil,
+     |                     ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSData::dataWithBytes_length_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1305:33
+     |
+1305 |             let bytes = NSData::dataWithBytes_length_(
+     |                                 ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1306:17
+     |
+1306 |                 nil,
+     |                 ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypePNG`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1592:23
+     |
+1592 |         Self(unsafe { NSPasteboardTypePNG }) // This is a rare case where there's a built-in NSPasteboardType
+     |                       ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSPasteboardTypeTIFF`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1622:23
+     |
+1622 |         Self(unsafe { NSPasteboardTypeTIFF }) // This is a rare case where there's a built-in NSPasteboardType
+     |                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppKitVersionNumber`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:15:9
+   |
+15 |         NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
+   |         ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSAppKitVersionNumber12_0`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:15:32
+   |
+15 |         NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSApplication`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:15:59
+   |
+15 |         NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
+   |                                                           ^^^^^^^^^^^^^
+
+warning: use of deprecated variant `cocoa::appkit::NSBackingStoreBuffered`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:15:74
+   |
+15 |         NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
+   |                                                                          ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSBackingStoreBuffered`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:15:74
+   |
+15 |         NSAppKitVersionNumber, NSAppKitVersionNumber12_0, NSApplication, NSBackingStoreBuffered,
+   |                                                                          ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSColor`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:9
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |         ^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSEvent`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:18
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |                  ^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:27
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |                           ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSFilenamesPboardType`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:49
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |                                                 ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSPasteboard`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:72
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |                                                                        ^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSScreen`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:16:86
+   |
+16 |         NSColor, NSEvent, NSEventModifierFlags, NSFilenamesPboardType, NSPasteboard, NSScreen,
+   |                                                                                      ^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSView`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:17:9
+   |
+17 |         NSView, NSViewHeightSizable, NSViewWidthSizable, NSVisualEffectMaterial,
+   |         ^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewHeightSizable`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:17:17
+   |
+17 |         NSView, NSViewHeightSizable, NSViewWidthSizable, NSVisualEffectMaterial,
+   |                 ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewWidthSizable`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:17:38
+   |
+17 |         NSView, NSViewHeightSizable, NSViewWidthSizable, NSVisualEffectMaterial,
+   |                                      ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSVisualEffectMaterial`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:17:58
+   |
+17 |         NSView, NSViewHeightSizable, NSViewWidthSizable, NSVisualEffectMaterial,
+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSVisualEffectState`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:18:9
+   |
+18 |         NSVisualEffectState, NSVisualEffectView, NSWindow, NSWindowButton,
+   |         ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSVisualEffectView`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:18:30
+   |
+18 |         NSVisualEffectState, NSVisualEffectView, NSWindow, NSWindowButton,
+   |                              ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::appkit::NSWindow`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:18:50
+   |
+18 |         NSVisualEffectState, NSVisualEffectView, NSWindow, NSWindowButton,
+   |                                                  ^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSWindowButton`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:18:60
+   |
+18 |         NSVisualEffectState, NSVisualEffectView, NSWindow, NSWindowButton,
+   |                                                            ^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowCollectionBehavior`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:19:9
+   |
+19 |         NSWindowCollectionBehavior, NSWindowOcclusionState, NSWindowOrderingMode,
+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOcclusionState`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:19:37
+   |
+19 |         NSWindowCollectionBehavior, NSWindowOcclusionState, NSWindowOrderingMode,
+   |                                     ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOrderingMode`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:19:61
+   |
+19 |         NSWindowCollectionBehavior, NSWindowOcclusionState, NSWindowOrderingMode,
+   |                                                             ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:20:9
+   |
+20 |         NSWindowStyleMask, NSWindowTitleVisibility,
+   |         ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated enum `cocoa::appkit::NSWindowTitleVisibility`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:20:28
+   |
+20 |         NSWindowStyleMask, NSWindowTitleVisibility,
+   |                            ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window.rs:22:12
+   |
+22 |     base::{id, nil},
+   |            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window.rs:22:16
+   |
+22 |     base::{id, nil},
+   |                ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSArray`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:9
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |         ^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSAutoreleasePool`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:18
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |                  ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSDictionary`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:37
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |                                     ^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSFastEnumeration`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:51
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |                                                   ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:70
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |                                                                      ^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::foundation::NSNotFound`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:24:81
+   |
+24 |         NSArray, NSAutoreleasePool, NSDictionary, NSFastEnumeration, NSInteger, NSNotFound,
+   |                                                                                 ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSOperatingSystemVersion`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:9
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |         ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:35
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                   ^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSProcessInfo`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:44
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                            ^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:59
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                                           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:67
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                                                   ^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:75
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                                                           ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:25:85
+   |
+25 |         NSOperatingSystemVersion, NSPoint, NSProcessInfo, NSRect, NSSize, NSString, NSUInteger,
+   |                                                                                     ^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSUserDefaults`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:26:9
+   |
+26 |         NSUserDefaults,
+   |         ^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:64:44
+   |
+64 | const NSWindowStyleMaskNonactivatingPanel: NSWindowStyleMask =
+   |                                            ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:65:5
+   |
+65 |     NSWindowStyleMask::from_bits_retain(1 << 7);
+   |     ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:67:28
+   |
+67 | const NSNormalWindowLevel: NSInteger = 0;
+   |                            ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:69:27
+   |
+69 | const NSPopUpWindowLevel: NSInteger = 101;
+   |                           ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:71:40
+   |
+71 | const NSTrackingMouseEnteredAndExited: NSUInteger = 0x01;
+   |                                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:73:29
+   |
+73 | const NSTrackingMouseMoved: NSUInteger = 0x02;
+   |                             ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:75:31
+   |
+75 | const NSTrackingActiveAlways: NSUInteger = 0x80;
+   |                               ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:77:32
+   |
+77 | const NSTrackingInVisibleRect: NSUInteger = 0x200;
+   |                                ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:79:47
+   |
+79 | const NSWindowAnimationBehaviorUtilityWindow: NSInteger = 4;
+   |                                               ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:81:50
+   |
+81 | const NSViewLayerContentsRedrawDuringViewResize: NSInteger = 2;
+   |                                                  ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window.rs:83:24
+   |
+83 | type NSDragOperation = NSUInteger;
+   |                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:119:74
+    |
+119 |                     handle_key_equivalent as extern "C" fn(&Object, Sel, id) -> BOOL,
+    |                                                                          ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:123:68
+    |
+123 |                     handle_key_down as extern "C" fn(&Object, Sel, id),
+    |                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:127:66
+    |
+127 |                     handle_key_up as extern "C" fn(&Object, Sel, id),
+    |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:131:70
+    |
+131 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:135:70
+    |
+135 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:139:70
+    |
+139 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:143:70
+    |
+143 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:147:70
+    |
+147 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:151:70
+    |
+151 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:155:70
+    |
+155 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:159:70
+    |
+159 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:163:70
+    |
+163 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:167:70
+    |
+167 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:171:70
+    |
+171 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:175:70
+    |
+175 |                     handle_view_event as extern "C" fn(&Object, Sel, id),
+    |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:180:74
+    |
+180 |                     make_backing_layer as extern "C" fn(&Object, Sel) -> id,
+    |                                                                          ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:190:67
+    |
+190 |                     set_frame_size as extern "C" fn(&Object, Sel, NSSize),
+    |                                                                   ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:194:66
+    |
+194 |                     display_layer as extern "C" fn(&Object, Sel, id),
+    |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:200:88
+    |
+200 |                     valid_attributes_for_marked_text as extern "C" fn(&Object, Sel) -> id,
+    |                                                                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:217:65
+    |
+217 |                         as extern "C" fn(&Object, Sel, NSRange, id) -> NSRect,
+    |                                                                 ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:217:72
+    |
+217 |                         as extern "C" fn(&Object, Sel, NSRange, id) -> NSRect,
+    |                                                                        ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:221:64
+    |
+221 |                     insert_text as extern "C" fn(&Object, Sel, id, NSRange),
+    |                                                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:225:68
+    |
+225 |                     set_marked_text as extern "C" fn(&Object, Sel, id, NSRange, NSRange),
+    |                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:231:81
+    |
+231 |                         as extern "C" fn(&Object, Sel, NSRange, *mut c_void) -> id,
+    |                                                                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:246:72
+    |
+246 |                     accepts_first_mouse as extern "C" fn(&Object, Sel, id) -> BOOL,
+    |                                                                        ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:251:78
+    |
+251 |                     character_index_for_point as extern "C" fn(&Object, Sel, NSPoint) -> u64,
+    |                                                                              ^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:261:81
+    |
+261 |                     blurred_view_init_with_frame as extern "C" fn(&Object, Sel, NSRect) -> id,
+    |                                                                                 ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:261:92
+    |
+261 |                     blurred_view_init_with_frame as extern "C" fn(&Object, Sel, NSRect) -> id,
+    |                                                                                            ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:273:48
+    |
+273 | pub(crate) fn convert_mouse_position(position: NSPoint, window_height: Pixels) -> Point<Pixels> {
+    |                                                ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:297:62
+    |
+297 |             window_did_resize as extern "C" fn(&Object, Sel, id),
+    |                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:301:78
+    |
+301 |             window_did_change_occlusion_state as extern "C" fn(&Object, Sel, id),
+    |                                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:305:73
+    |
+305 |             window_will_enter_fullscreen as extern "C" fn(&Object, Sel, id),
+    |                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:309:72
+    |
+309 |             window_will_exit_fullscreen as extern "C" fn(&Object, Sel, id),
+    |                                                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:313:60
+    |
+313 |             window_did_move as extern "C" fn(&Object, Sel, id),
+    |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:317:69
+    |
+317 |             window_did_change_screen as extern "C" fn(&Object, Sel, id),
+    |                                                                     ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:321:73
+    |
+321 |             window_did_change_key_status as extern "C" fn(&Object, Sel, id),
+    |                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:325:73
+    |
+325 |             window_did_change_key_status as extern "C" fn(&Object, Sel, id),
+    |                                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:329:64
+    |
+329 |             window_should_close as extern "C" fn(&Object, Sel, id) -> BOOL,
+    |                                                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:336:61
+    |
+336 |             dragging_entered as extern "C" fn(&Object, Sel, id) -> NSDragOperation,
+    |                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:340:61
+    |
+340 |             dragging_updated as extern "C" fn(&Object, Sel, id) -> NSDragOperation,
+    |                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:344:60
+    |
+344 |             dragging_exited as extern "C" fn(&Object, Sel, id),
+    |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:348:67
+    |
+348 |             perform_drag_operation as extern "C" fn(&Object, Sel, id) -> BOOL,
+    |                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:352:68
+    |
+352 |             conclude_drag_operation as extern "C" fn(&Object, Sel, id),
+    |                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:357:83
+    |
+357 |             add_titlebar_accessory_view_controller as extern "C" fn(&Object, Sel, id),
+    |                                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:362:67
+    |
+362 |             move_tab_to_new_window as extern "C" fn(&Object, Sel, id),
+    |                                                                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:367:62
+    |
+367 |             merge_all_windows as extern "C" fn(&Object, Sel, id),
+    |                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:372:60
+    |
+372 |             select_next_tab as extern "C" fn(&Object, Sel, id),
+    |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:377:64
+    |
+377 |             select_previous_tab as extern "C" fn(&Object, Sel, id),
+    |                                                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:382:59
+    |
+382 |             toggle_tab_bar as extern "C" fn(&Object, Sel, id),
+    |                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:392:20
+    |
+392 |     native_window: id,
+    |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:394:26
+    |
+394 |     blurred_view: Option<id>,
+    |                          ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:984:44
+    |
+984 |             let native_window = context as id;
+    |                                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:985:66
+    |
+985 |             let _: () = msg_send![native_window, mergeAllWindows:nil];
+    |                                                                  ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1000:44
+     |
+1000 |             let native_window = context as id;
+     |                                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1001:69
+     |
+1001 |             let _: () = msg_send![native_window, moveTabToNewWindow:nil];
+     |                                                                     ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1002:72
+     |
+1002 |             let _: () = msg_send![native_window, makeKeyAndOrderFront: nil];
+     |                                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1544:36
+     |
+1544 | fn get_scale_factor(native_window: id) -> f32 {
+     |                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1546:21
+     |
+1546 |         let screen: id = msg_send![native_window, screen];
+     |                     ^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::backingScaleFactor`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1550:19
+     |
+1550 |         NSScreen::backingScaleFactor(screen) as f32
+     |                   ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1597:74
+     |
+1597 | extern "C" fn handle_key_equivalent(this: &Object, _: Sel, native_event: id) -> BOOL {
+     |                                                                          ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1601:68
+     |
+1601 | extern "C" fn handle_key_down(this: &Object, _: Sel, native_event: id) {
+     |                                                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1605:66
+     |
+1605 | extern "C" fn handle_key_up(this: &Object, _: Sel, native_event: id) {
+     |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1634:61
+     |
+1634 | extern "C" fn handle_key_event(this: &Object, native_event: id, key_equivalent: bool) -> BOOL {
+     |                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1696:40
+     |
+1696 |                     let input_context: id = msg_send![this, inputContext];
+     |                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1737:36
+     |
+1737 |                 let input_context: id = msg_send![this, inputContext];
+     |                                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1751:70
+     |
+1751 | extern "C" fn handle_view_event(this: &Object, _: Sel, native_event: id) {
+     |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1821:40
+     |
+1821 |                     let input_context: id = msg_send![this, inputContext];
+     |                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1881:75
+     |
+1881 | extern "C" fn window_did_change_occlusion_state(this: &Object, _: Sel, _: id) {
+     |                                                                           ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOcclusionState`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1888:23
+     |
+1888 |             .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+     |                       ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1898:59
+     |
+1898 | extern "C" fn window_did_resize(this: &Object, _: Sel, _: id) {
+     |                                                           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1903:70
+     |
+1903 | extern "C" fn window_will_enter_fullscreen(this: &Object, _: Sel, _: id) {
+     |                                                                      ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSOperatingSystemVersion`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1908:23
+     |
+1908 |     let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+     |                       ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1917:69
+     |
+1917 | extern "C" fn window_will_exit_fullscreen(this: &Object, _: Sel, _: id) {
+     |                                                                     ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSOperatingSystemVersion`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1921:23
+     |
+1921 |     let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+     |                       ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSOperatingSystemVersion`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1930:50
+     |
+1930 | pub(crate) fn is_macos_version_at_least(version: NSOperatingSystemVersion) -> bool {
+     |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSProcessInfo::processInfo`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1931:29
+     |
+1931 |     unsafe { NSProcessInfo::processInfo(nil).isOperatingSystemAtLeastVersion(version) }
+     |                             ^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1931:41
+     |
+1931 |     unsafe { NSProcessInfo::processInfo(nil).isOperatingSystemAtLeastVersion(version) }
+     |                                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1934:57
+     |
+1934 | extern "C" fn window_did_move(this: &Object, _: Sel, _: id) {
+     |                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1944:66
+     |
+1944 | extern "C" fn window_did_change_screen(this: &Object, _: Sel, _: id) {
+     |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1950:77
+     |
+1950 | extern "C" fn window_did_change_key_status(this: &Object, selector: Sel, _: id) {
+     |                                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2010:61
+     |
+2010 | extern "C" fn window_should_close(this: &Object, _: Sel, _: id) -> BOOL {
+     |                                                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2039:60
+     |
+2039 | extern "C" fn make_backing_layer(this: &Object, _: Sel) -> id {
+     |                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2042:42
+     |
+2042 |     window_state.renderer.layer_ptr() as id
+     |                                          ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2070:59
+     |
+2070 | extern "C" fn set_frame_size(this: &Object, _: Sel, size: NSSize) {
+     |                                                           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2076:24
+     |
+2076 |         let old_frame: NSRect = msg_send![this, frame];
+     |                        ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2101:55
+     |
+2101 | extern "C" fn display_layer(this: &Object, _: Sel, _: id) {
+     |                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2120:24
+     |
+2120 |     let view = view as id;
+     |                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2131:71
+     |
+2131 | extern "C" fn valid_attributes_for_marked_text(_: &Object, _: Sel) -> id {
+     |                                                                       ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2162:8
+     |
+2162 |     _: id,
+     |        ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2163:6
+     |
+2163 | ) -> NSRect {
+     |      ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:9
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |         ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:21
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |                     ^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:43
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |                                           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2172:13
+     |
+2172 |             NSRect::new(
+     |             ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2173:17
+     |
+2173 |                 NSPoint::new(
+     |                 ^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2179:17
+     |
+2179 |                 NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
+     |                 ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2185:32
+     |
+2185 | fn get_frame(this: &Object) -> NSRect {
+     |                                ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::frame`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2189:35
+     |
+2189 |         let mut frame = NSWindow::frame(lock.native_window);
+     |                                   ^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2191:25
+     |
+2191 |         let style_mask: NSWindowStyleMask = msg_send![lock.native_window, styleMask];
+     |                         ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2192:33
+     |
+2192 |         if !style_mask.contains(NSWindowStyleMask::NSFullSizeContentViewWindowMask) {
+     |                                 ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2199:56
+     |
+2199 | extern "C" fn insert_text(this: &Object, _: Sel, text: id, replacement_range: NSRange) {
+     |                                                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2203:19
+     |
+2203 |         let text: id = if is_attributed_string == YES {
+     |                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2220:11
+     |
+2220 |     text: id,
+     |           ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2227:19
+     |
+2227 |         let text: id = if is_attributed_string == YES {
+     |                   ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2249:6
+     |
+2249 | ) -> id {
+     |      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2264:25
+     |
+2264 |             let string: id = msg_send![class!(NSAttributedString), alloc];
+     |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2265:25
+     |
+2265 |             let string: id = msg_send![string, initWithString: ns_string(&selected_text)];
+     |                         ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2270:16
+     |
+2270 |     .unwrap_or(nil)
+     |                ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2305:61
+     |
+2305 | extern "C" fn accepts_first_mouse(this: &Object, _: Sel, _: id) -> BOOL {
+     |                                                             ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2312:74
+     |
+2312 | extern "C" fn character_index_for_point(this: &Object, _: Sel, position: NSPoint) -> u64 {
+     |                                                                          ^^^^^^^
+
+warning: use of deprecated constant `cocoa::foundation::NSNotFound`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2319:16
+     |
+2319 |     .unwrap_or(NSNotFound as u64)
+     |                ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2322:56
+     |
+2322 | fn screen_point_to_gpui_point(this: &Object, position: NSPoint) -> Point<Pixels> {
+     |                                                        ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2330:70
+     |
+2330 | extern "C" fn dragging_entered(this: &Object, _: Sel, dragging_info: id) -> NSDragOperation {
+     |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2344:70
+     |
+2344 | extern "C" fn dragging_updated(this: &Object, _: Sel, dragging_info: id) -> NSDragOperation {
+     |                                                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2357:57
+     |
+2357 | extern "C" fn dragging_exited(this: &Object, _: Sel, _: id) {
+     |                                                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2366:76
+     |
+2366 | extern "C" fn perform_drag_operation(this: &Object, _: Sel, dragging_info: id) -> BOOL {
+     |                                                                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2378:21
+     |
+2378 |     let pasteboard: id = unsafe { msg_send![dragging_info, draggingPasteboard] };
+     |                     ^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::propertyListForType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2379:44
+     |
+2379 |     let filenames = unsafe { NSPasteboard::propertyListForType(pasteboard, NSFilenamesPboardType) };
+     |                                            ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSFilenamesPboardType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2379:76
+     |
+2379 |     let filenames = unsafe { NSPasteboard::propertyListForType(pasteboard, NSFilenamesPboardType) };
+     |                                                                            ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2380:21
+     |
+2380 |     if filenames == nil {
+     |                     ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2385:31
+     |
+2385 |             let f = NSString::UTF8String(file);
+     |                               ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2393:65
+     |
+2393 | extern "C" fn conclude_drag_operation(this: &Object, _: Sel, _: id) {
+     |                                                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2434:77
+     |
+2434 | fn drag_event_position(window_state: &Mutex<MacWindowState>, dragging_info: id) -> Point<Pixels> {
+     |                                                                             ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2435:24
+     |
+2435 |     let drag_location: NSPoint = unsafe { msg_send![dragging_info, draggingLocation] };
+     |                        ^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2455:41
+     |
+2455 | unsafe fn display_id_for_screen(screen: id) -> CGDirectDisplayID {
+     |                                         ^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::deviceDescription`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2457:44
+     |
+2457 |         let device_description = NSScreen::deviceDescription(screen);
+     |                                            ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2458:47
+     |
+2458 |         let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+     |                                               ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2458:53
+     |
+2458 |         let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+     |                                                     ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2458:32
+     |
+2458 |         let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+     |                                ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2460:28
+     |
+2460 |         let screen_number: NSUInteger = msg_send![screen_number, unsignedIntegerValue];
+     |                            ^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2465:74
+     |
+2465 | extern "C" fn blurred_view_init_with_frame(this: &Object, _: Sel, frame: NSRect) -> id {
+     |                                                                          ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2465:85
+     |
+2465 | extern "C" fn blurred_view_init_with_frame(this: &Object, _: Sel, frame: NSRect) -> id {
+     |                                                                                     ^^
+
+warning: use of deprecated method `cocoa::appkit::NSVisualEffectView::setMaterial_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2470:29
+     |
+2470 |         NSVisualEffectView::setMaterial_(view, NSVisualEffectMaterial::Selection);
+     |                             ^^^^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSVisualEffectMaterial::Selection`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2470:72
+     |
+2470 |         NSVisualEffectView::setMaterial_(view, NSVisualEffectMaterial::Selection);
+     |                                                                        ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSVisualEffectView::setState_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2471:29
+     |
+2471 |         NSVisualEffectView::setState_(view, NSVisualEffectState::Active);
+     |                             ^^^^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSVisualEffectState::Active`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2471:66
+     |
+2471 |         NSVisualEffectView::setState_(view, NSVisualEffectState::Active);
+     |                                                                  ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2479:20
+     |
+2479 |         let layer: id = msg_send![this, layer];
+     |                    ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2486:42
+     |
+2486 | unsafe fn remove_layer_background(layer: id) {
+     |                                          ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2488:57
+     |
+2488 |         let _: () = msg_send![layer, setBackgroundColor:nil];
+     |                                                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2490:25
+     |
+2490 |         let class_name: id = msg_send![layer, className];
+     |                         ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2497:22
+     |
+2497 |         let filters: id = msg_send![layer, filters];
+     |                      ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2504:45
+     |
+2504 |             let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
+     |                                             ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2504:51
+     |
+2504 |             let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
+     |                                                   ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2504:30
+     |
+2504 |             let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
+     |                              ^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2505:34
+     |
+2505 |             let count = NSArray::count(filters);
+     |                                  ^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2507:34
+     |
+2507 |                 let description: id = msg_send![filters.objectAtIndex(i), description];
+     |                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2517:30
+     |
+2517 |                 let indices: id = msg_send![class!(NSMutableIndexSet), indexSet];
+     |                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2520:31
+     |
+2520 |                 let filtered: id = msg_send![filters, objectsAtIndexes: indices];
+     |                               ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2526:24
+     |
+2526 |         let sublayers: id = msg_send![layer, sublayers];
+     |                        ^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2528:34
+     |
+2528 |             let count = NSArray::count(sublayers);
+     |                                  ^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2537:94
+     |
+2537 | extern "C" fn add_titlebar_accessory_view_controller(this: &Object, _: Sel, view_controller: id) {
+     |                                                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2542:29
+     |
+2542 |         let accessory_view: id = msg_send![view_controller, view];
+     |                             ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2544:24
+     |
+2544 |         let mut frame: NSRect = msg_send![accessory_view, frame];
+     |                        ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2550:64
+     |
+2550 | extern "C" fn move_tab_to_new_window(this: &Object, _: Sel, _: id) {
+     |                                                                ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2552:81
+     |
+2552 |         let _: () = msg_send![super(this, class!(NSWindow)), moveTabToNewWindow:nil];
+     |                                                                                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2564:59
+     |
+2564 | extern "C" fn merge_all_windows(this: &Object, _: Sel, _: id) {
+     |                                                           ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2566:78
+     |
+2566 |         let _: () = msg_send![super(this, class!(NSWindow)), mergeAllWindows:nil];
+     |                                                                              ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2578:62
+     |
+2578 | extern "C" fn select_next_tab(this: &Object, _sel: Sel, _id: id) {
+     |                                                              ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2588:66
+     |
+2588 | extern "C" fn select_previous_tab(this: &Object, _sel: Sel, _id: id) {
+     |                                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2598:61
+     |
+2598 | extern "C" fn toggle_tab_bar(this: &Object, _sel: Sel, _id: id) {
+     |                                                             ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2600:75
+     |
+2600 |         let _: () = msg_send![super(this, class!(NSWindow)), toggleTabBar:nil];
+     |                                                                           ^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSWindowButton::NSWindowCloseButton`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:438:59
+    |
+438 |                     standardWindowButton: NSWindowButton::NSWindowCloseButton
+    |                                                           ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:436:35
+    |
+436 |                 let close_button: id = msg_send![
+    |                                   ^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSWindowButton::NSWindowMiniaturizeButton`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:442:59
+    |
+442 |                     standardWindowButton: NSWindowButton::NSWindowMiniaturizeButton
+    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:440:33
+    |
+440 |                 let min_button: id = msg_send![
+    |                                 ^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSWindowButton::NSWindowZoomButton`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:446:59
+    |
+446 |                     standardWindowButton: NSWindowButton::NSWindowZoomButton
+    |                                                           ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:444:34
+    |
+444 |                 let zoom_button: id = msg_send![
+    |                                  ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOcclusionState`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:482:27
+    |
+482 |                 .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+    |                           ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:511:33
+    |
+511 |             style_mask.contains(NSWindowStyleMask::NSFullScreenWindowMask)
+    |                                 ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:516:51
+    |
+516 |         let mut window_frame = unsafe { NSWindow::frame(self.native_window) };
+    |                                                   ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::screen`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:518:36
+    |
+518 |             let screen = NSWindow::screen(self.native_window);
+    |                                    ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:519:23
+    |
+519 |             NSScreen::frame(screen)
+    |                       ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:540:30
+    |
+540 |             unsafe { NSView::frame(self.native_window.contentView()) }.size;
+    |                              ^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:539:13
+    |
+539 |         let NSSize { width, height, .. } =
+    |             ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:550:35
+    |
+550 |             let frame = NSWindow::frame(self.native_window);
+    |                                   ^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSAutoreleasePool::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:589:43
+    |
+589 |             let pool = NSAutoreleasePool::new(nil);
+    |                                           ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:589:47
+    |
+589 |             let pool = NSAutoreleasePool::new(nil);
+    |                                               ^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:601:21
+    |
+601 |                     NSWindowStyleMask::NSClosableWindowMask | NSWindowStyleMask::NSTitledWindowMask;
+    |                     ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:601:63
+    |
+601 |                     NSWindowStyleMask::NSClosableWindowMask | NSWindowStyleMask::NSTitledWindowMask;
+    |                                                               ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:604:35
+    |
+604 |                     style_mask |= NSWindowStyleMask::NSResizableWindowMask;
+    |                                   ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:608:35
+    |
+608 |                     style_mask |= NSWindowStyleMask::NSMiniaturizableWindowMask;
+    |                                   ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:612:35
+    |
+612 |                     style_mask |= NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+    |                                   ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:615:30
+    |
+615 |                 style_mask = NSWindowStyleMask::NSTitledWindowMask
+    |                              ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:616:23
+    |
+616 |                     | NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+    |                       ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:619:32
+    |
+619 |             let native_window: id = match kind {
+    |                                ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:631:37
+    |
+631 |             let mut target_screen = nil;
+    |                                     ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSScreen::screens`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:634:37
+    |
+634 |             let screens = NSScreen::screens(nil);
+    |                                     ^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:634:45
+    |
+634 |             let screens = NSScreen::screens(nil);
+    |                                             ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:635:58
+    |
+635 |             let count: u64 = cocoa::foundation::NSArray::count(screens);
+    |                                                          ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:637:58
+    |
+637 |                 let screen = cocoa::foundation::NSArray::objectAtIndex(screens, i);
+    |                                                          ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:638:39
+    |
+638 |                 let frame = NSScreen::frame(screen);
+    |                                       ^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSScreen::mainScreen`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:647:40
+    |
+647 |                 let screen = NSScreen::mainScreen(nil);
+    |                                        ^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:647:51
+    |
+647 |                 let screen = NSScreen::mainScreen(nil);
+    |                                                   ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::frame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:649:27
+    |
+649 |                 NSScreen::frame(screen)
+    |                           ^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:652:31
+    |
+652 |             let window_rect = NSRect::new(
+    |                               ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:653:17
+    |
+653 |                 NSPoint::new(
+    |                 ^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:658:17
+    |
+658 |                 NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
+    |                 ^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSBackingStoreBuffered`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:664:17
+    |
+664 |                 NSBackingStoreBuffered,
+    |                 ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSArray::arrayWithObject`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:672:30
+    |
+672 |                     NSArray::arrayWithObject(nil, NSFilenamesPboardType)
+    |                              ^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:672:46
+    |
+672 |                     NSArray::arrayWithObject(nil, NSFilenamesPboardType)
+    |                                              ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSFilenamesPboardType`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:672:51
+    |
+672 |                     NSArray::arrayWithObject(nil, NSFilenamesPboardType)
+    |                                                   ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:680:30
+    |
+680 |             let native_view: id = msg_send![VIEW_CLASS, alloc];
+    |                              ^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::initWithFrame_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:681:39
+    |
+681 |             let native_view = NSView::initWithFrame_(native_view, NSView::bounds(content_view));
+    |                                       ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::bounds`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:681:75
+    |
+681 |             let native_view = NSView::initWithFrame_(native_view, NSView::bounds(content_view));
+    |                                                                           ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:748:50
+    |
+748 |                 native_window.setContentMinSize_(NSSize {
+    |                                                  ^^^^^^
+
+warning: use of deprecated unit variant `cocoa::appkit::NSWindowTitleVisibility::NSWindowTitleHidden`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:756:76
+    |
+756 |                 native_window.setTitleVisibility_(NSWindowTitleVisibility::NSWindowTitleHidden);
+    |                                                                            ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewWidthSizable`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:759:46
+    |
+759 |             native_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+    |                                              ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewHeightSizable`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:759:67
+    |
+759 |             native_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+    |                                                                   ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:782:52
+    |
+782 |                         let tabbing_id = NSString::alloc(nil).init_str(tabbing_identifier.as_str());
+    |                                                    ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:782:58
+    |
+782 |                         let tabbing_id = NSString::alloc(nil).init_str(tabbing_identifier.as_str());
+    |                                                          ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:790:40
+    |
+790 |                     let tracking_area: id = msg_send![class!(NSTrackingArea), alloc];
+    |                                        ^^
+
+warning: use of deprecated struct `cocoa::foundation::NSRect`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:39
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                       ^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSPoint`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:51
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                                   ^^^^^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:73
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                                                         ^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:796:35
+    |
+796 |                         userInfo: nil
+    |                                   ^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowCollectionBehavior`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:807:25
+    |
+807 |                         NSWindowCollectionBehavior::NSWindowCollectionBehaviorCanJoinAllSpaces |
+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowCollectionBehavior`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:808:25
+    |
+808 |                         NSWindowCollectionBehavior::NSWindowCollectionBehaviorFullScreenAuxiliary
+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:813:38
+    |
+813 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:813:56
+    |
+813 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:814:30
+    |
+814 |             let main_window: id = msg_send![app, mainWindow];
+    |                              ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:821:31
+    |
+821 |                     .contains(NSWindowStyleMask::NSFullScreenWindowMask);
+    |                               ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOrderingMode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:834:100
+    |
+834 | ...   let _: () = msg_send![main_window, addTabbedWindow: native_window ordered: NSWindowOrderingMode::NSWindowAbove];
+    |                                                                                  ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:839:78
+    |
+839 | ...                   let _: () = msg_send![native_window, orderFront: nil];
+    |                                                                        ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:846:53
+    |
+846 |                 native_window.makeKeyAndOrderFront_(nil);
+    |                                                     ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:848:43
+    |
+848 |                 native_window.orderFront_(nil);
+    |                                           ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setFrameTopLeftPoint_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:855:23
+    |
+855 |             NSWindow::setFrameTopLeftPoint_(native_window, window_rect.origin);
+    |                       ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:866:38
+    |
+866 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:866:56
+    |
+866 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:867:30
+    |
+867 |             let main_window: id = msg_send![app, mainWindow];
+    |                              ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:883:38
+    |
+883 |             let app = NSApplication::sharedApplication(nil);
+    |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:883:56
+    |
+883 |             let app = NSApplication::sharedApplication(nil);
+    |                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:884:26
+    |
+884 |             let windows: id = msg_send![app, orderedWindows];
+    |                          ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:885:24
+    |
+885 |             let count: NSUInteger = msg_send![windows, count];
+    |                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:889:29
+    |
+889 |                 let window: id = msg_send![windows, objectAtIndex:i];
+    |                             ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSUserDefaults::standardUserDefaults`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:902:48
+    |
+902 |             let defaults: id = NSUserDefaults::standardUserDefaults();
+    |                                                ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:902:27
+    |
+902 |             let defaults: id = NSUserDefaults::standardUserDefaults();
+    |                           ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:903:36
+    |
+903 |             let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+    |                                    ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:903:42
+    |
+903 |             let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+    |                                          ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:904:33
+    |
+904 |             let key = NSString::alloc(nil).init_str("AppleWindowTabbingMode");
+    |                                 ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:904:39
+    |
+904 |             let key = NSString::alloc(nil).init_str("AppleWindowTabbingMode");
+    |                                       ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:906:23
+    |
+906 |             let dict: id = msg_send![defaults, persistentDomainForName: domain];
+    |                       ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:910:17
+    |
+910 |                 nil
+    |                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:907:24
+    |
+907 |             let value: id = if !dict.is_null() {
+    |                        ^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:914:42
+    |
+914 |                 CStr::from_ptr(NSString::UTF8String(value)).to_string_lossy()
+    |                                          ^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:935:45
+    |
+935 |             this.native_window.setDelegate_(nil);
+    |                                             ^^^
+
+warning: use of deprecated struct `cocoa::foundation::NSSize`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:972:44
+    |
+972 |                     window.setContentSize_(NSSize {
+    |                                            ^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1017:68
+     |
+1017 |             let _: () = msg_send![native_window, toggleTabOverview:nil];
+     |                                                                    ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1027:29
+     |
+1027 |             let appearance: id = msg_send![self.0.lock().native_window, effectiveAppearance];
+     |                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1038:37
+     |
+1038 |             let device_description: id = msg_send![screen, deviceDescription];
+     |                                     ^^
+
+warning: use of deprecated method `cocoa::foundation::NSDictionary::valueForKey_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1039:51
+     |
+1039 |             let screen_number: id = NSDictionary::valueForKey_(
+     |                                                   ^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1041:27
+     |
+1041 |                 NSString::alloc(nil).init_str("NSScreenNumber"),
+     |                           ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1041:33
+     |
+1041 |                 NSString::alloc(nil).init_str("NSScreenNumber"),
+     |                                 ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1039:32
+     |
+1039 |             let screen_number: id = NSDictionary::valueForKey_(
+     |                                ^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1062:28
+     |
+1062 |             let modifiers: NSEventModifierFlags = msg_send![class!(NSEvent), modifierFlags];
+     |                            ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1064:46
+     |
+1064 |             let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+     |                                              ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1065:42
+     |
+1065 |             let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+     |                                          ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1066:44
+     |
+1066 |             let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+     |                                            ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1067:46
+     |
+1067 |             let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+     |                                              ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1068:47
+     |
+1068 |             let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+     |                                               ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1082:28
+     |
+1082 |             let modifiers: NSEventModifierFlags = msg_send![class!(NSEvent), modifierFlags];
+     |                            ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSEventModifierFlags`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1085:40
+     |
+1085 |                 on: modifiers.contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+     |                                        ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1131:24
+     |
+1131 |             let alert: id = msg_send![class!(NSAlert), alloc];
+     |                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1132:24
+     |
+1132 |             let alert: id = msg_send![alert, init];
+     |                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1149:29
+     |
+1149 |                 let button: id = msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
+     |                             ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1150:61
+     |
+1150 |                 let _: () = msg_send![button, setTag: ix as NSInteger];
+     |                                                             ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1161:29
+     |
+1161 |                 let button: id = msg_send![alert, addButtonWithTitle: ns_string(answer.label())];
+     |                             ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1162:61
+     |
+1162 |                 let _: () = msg_send![button, setTag: ix as NSInteger];
+     |                                                             ^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1167:58
+     |
+1167 |             let block = ConcreteBlock::new(move |answer: NSInteger| {
+     |                                                          ^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1195:73
+     |
+1195 |                     let _: () = msg_send![window, makeKeyAndOrderFront: nil];
+     |                                                                         ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1212:38
+     |
+1212 |             let app = NSApplication::sharedApplication(nil);
+     |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1212:56
+     |
+1212 |             let app = NSApplication::sharedApplication(nil);
+     |                                                        ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1223:24
+     |
+1223 |             let title: id = msg_send![self.0.lock().native_window, title];
+     |                        ^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSColor::colorWithSRGBRed_green_blue_alpha_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1243:26
+     |
+1243 |                 NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 1f64)
+     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1243:61
+     |
+1243 |                 NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 1f64)
+     |                                                             ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSColor::colorWithSRGBRed_green_blue_alpha_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1246:26
+     |
+1246 |                 NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 0.0001)
+     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1246:61
+     |
+1246 |                 NSColor::colorWithSRGBRed_green_blue_alpha_(nil, 0f64, 0f64, 0f64, 0.0001)
+     |                                                             ^^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppKitVersionNumber`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1250:16
+     |
+1250 |             if NSAppKitVersionNumber < NSAppKitVersionNumber12_0 {
+     |                ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSAppKitVersionNumber12_0`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1250:40
+     |
+1250 |             if NSAppKitVersionNumber < NSAppKitVersionNumber12_0 {
+     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::removeFromSuperview`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1268:33
+     |
+1268 |                         NSView::removeFromSuperview(blur_view);
+     |                                 ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::bounds`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1273:41
+     |
+1273 |                     let frame = NSView::bounds(content_view);
+     |                                         ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1274:40
+     |
+1274 |                     let mut blur_view: id = msg_send![BLURRED_VIEW_CLASS, alloc];
+     |                                        ^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::initWithFrame_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1275:41
+     |
+1275 |                     blur_view = NSView::initWithFrame_(blur_view, frame);
+     |                                         ^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewWidthSizable`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1276:52
+     |
+1276 |                     blur_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+     |                                                    ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::appkit::NSViewHeightSizable`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1276:73
+     |
+1276 |                     blur_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+     |                                                                         ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowOrderingMode`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1281:37
+     |
+1281 |                         positioned: NSWindowOrderingMode::NSWindowBelow
+     |                                     ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1282:37
+     |
+1282 |                         relativeTo: nil
+     |                                     ^^^
+
+warning: use of deprecated associated function `cocoa::appkit::NSApplication::sharedApplication`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1307:46
+     |
+1307 |                     let app = NSApplication::sharedApplication(nil);
+     |                                              ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1307:64
+     |
+1307 |                     let app = NSApplication::sharedApplication(nil);
+     |                                                                ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1317:33
+     |
+1317 |             window.miniaturize_(nil);
+     |                                 ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1327:34
+     |
+1327 |                     window.zoom_(nil);
+     |                                  ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1339:46
+     |
+1339 |                     window.toggleFullScreen_(nil);
+     |                                              ^^^
+
+warning: use of deprecated struct `cocoa::appkit::NSWindowStyleMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1352:27
+     |
+1352 |                 .contains(NSWindowStyleMask::NSFullScreenWindowMask)
+     |                           ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1395:26
+     |
+1395 |             let windows: id = msg_send![self.0.lock().native_window, tabbedWindows];
+     |                          ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSUInteger`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1400:24
+     |
+1400 |             let count: NSUInteger = msg_send![windows, count];
+     |                        ^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1403:29
+     |
+1403 |                 let window: id = msg_send![windows, objectAtIndex:i];
+     |                             ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1406:32
+     |
+1406 |                     let title: id = msg_send![window, title];
+     |                                ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1419:28
+     |
+1419 |             let tab_group: id = msg_send![self.0.lock().native_window, tabGroup];
+     |                            ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1467:40
+     |
+1467 |                     let input_context: id =
+     |                                        ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSUserDefaults::standardUserDefaults`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1484:56
+     |
+1484 |                     let defaults: id = NSUserDefaults::standardUserDefaults();
+     |                                                        ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1484:35
+     |
+1484 |                     let defaults: id = NSUserDefaults::standardUserDefaults();
+     |                                   ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1485:44
+     |
+1485 |                     let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+     |                                            ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1485:50
+     |
+1485 |                     let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+     |                                                  ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1486:41
+     |
+1486 |                     let key = NSString::alloc(nil).init_str("AppleActionOnDoubleClick");
+     |                                         ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1486:47
+     |
+1486 |                     let key = NSString::alloc(nil).init_str("AppleActionOnDoubleClick");
+     |                                               ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1488:31
+     |
+1488 |                     let dict: id = msg_send![defaults, persistentDomainForName: domain];
+     |                               ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1492:25
+     |
+1492 |                         nil
+     |                         ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1489:33
+     |
+1489 |                     let action: id = if !dict.is_null() {
+     |                                 ^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1496:50
+     |
+1496 |                         CStr::from_ptr(NSString::UTF8String(action)).to_string_lossy()
+     |                                                  ^^^^^^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1503:49
+     |
+1503 | ...                   window.miniaturize_(nil);
+     |                                           ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1506:42
+     |
+1506 | ...                   window.zoom_(nil);
+     |                                    ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1510:42
+     |
+1510 | ...                   window.zoom_(nil);
+     |                                    ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1513:42
+     |
+1513 | ...                   window.zoom_(nil);
+     |                                    ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window.rs:98:33
+   |
+98 |     fn CGSMainConnectionID() -> id;
+   |                                 ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/gpui/src/platform/mac/window.rs:100:24
+    |
+100 |         connection_id: id,
+    |                        ^^
+
+warning: use of deprecated type alias `cocoa::foundation::NSInteger`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:101:20
+    |
+101 |         window_id: NSInteger,
+    |                    ^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppearanceNameVibrantDark`: use the objc2-app-kit crate instead
+ --> crates/gpui/src/platform/mac/window_appearance.rs:3:14
+  |
+3 |     appkit::{NSAppearanceNameVibrantDark, NSAppearanceNameVibrantLight},
+  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppearanceNameVibrantLight`: use the objc2-app-kit crate instead
+ --> crates/gpui/src/platform/mac/window_appearance.rs:3:43
+  |
+3 |     appkit::{NSAppearanceNameVibrantDark, NSAppearanceNameVibrantLight},
+  |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+ --> crates/gpui/src/platform/mac/window_appearance.rs:4:11
+  |
+4 |     base::id,
+  |           ^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+ --> crates/gpui/src/platform/mac/window_appearance.rs:5:17
+  |
+5 |     foundation::NSString,
+  |                 ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:11:50
+   |
+11 |     pub(crate) unsafe fn from_native(appearance: id) -> Self {
+   |                                                  ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:12:19
+   |
+12 |         let name: id = msg_send![appearance, name];
+   |                   ^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppearanceNameVibrantLight`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:14:24
+   |
+14 |             if name == NSAppearanceNameVibrantLight {
+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated static `cocoa::appkit::NSAppearanceNameVibrantDark`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:16:31
+   |
+16 |             } else if name == NSAppearanceNameVibrantDark {
+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:35:38
+   |
+35 |     pub static NSAppearanceNameAqua: id;
+   |                                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:36:42
+   |
+36 |     pub static NSAppearanceNameDarkAqua: id;
+   |                                          ^^
+
+   Compiling zlog v0.1.0 (/Volumes/ExternalData/Library/Git/zed/crates/zlog)
+   Compiling settings_ui_macros v0.1.0 (/Volumes/ExternalData/Library/Git/zed/crates/settings_ui_macros)
+   Compiling serde_path_to_error v0.1.17
+   Compiling ec4rs v1.2.0
+   Compiling pem-rfc7468 v0.7.0
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/display.rs:38:62
+   |
+38 |             let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+   |                                                              ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSDictionary::objectForKey_`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/display.rs:39:52
+   |
+39 |             let screen_number = device_description.objectForKey_(screen_number_key);
+   |                                                    ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::modifierFlags`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:86:38
+   |
+86 |         let modifiers = native_event.modifierFlags();
+   |                                      ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:87:33
+   |
+87 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+   |                                 ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSControlKeyMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:87:64
+   |
+87 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+   |                                                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:88:29
+   |
+88 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+   |                             ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlternateKeyMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:88:60
+   |
+88 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+   |                                                            ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:89:31
+   |
+89 |         let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+   |                               ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSShiftKeyMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:89:62
+   |
+89 |         let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+   |                                                              ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:90:33
+   |
+90 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+   |                                 ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSCommandKeyMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:90:64
+   |
+90 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+   |                                                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:91:34
+   |
+91 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+   |                                  ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSFunctionKeyMask`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/events.rs:91:65
+   |
+91 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+   |                                                                 ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::eventType`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:109:43
+    |
+109 |             let event_type = native_event.eventType();
+    |                                           ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::modifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:126:34
+    |
+126 | ...                   .modifierFlags()
+    |                        ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:127:34
+    |
+127 | ...                   .contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+    |                        ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlphaShiftKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:127:65
+    |
+127 | ...                   .contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+    |                                                       ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::isARepeat`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:133:43
+    |
+133 |                     is_held: native_event.isARepeat() == YES,
+    |                                           ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::buttonNumber`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:141:53
+    |
+141 |                     let button = match native_event.buttonNumber() {
+    |                                                     ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:154:49
+    |
+154 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:154:36
+    |
+154 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:156:65
+    |
+156 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:156:52
+    |
+156 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::clickCount`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:159:55
+    |
+159 | ...                   click_count: native_event.clickCount() as usize,
+    |                                                 ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::buttonNumber`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:167:53
+    |
+167 |                     let button = match native_event.buttonNumber() {
+    |                                                     ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:181:49
+    |
+181 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:181:36
+    |
+181 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:182:65
+    |
+182 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:182:52
+    |
+182 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::clickCount`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:185:55
+    |
+185 | ...                   click_count: native_event.clickCount() as usize,
+    |                                                 ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::phase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:191:67
+    |
+191 |                     let navigation_direction = match native_event.phase() {
+    |                                                                   ^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventPhase::NSEventPhaseEnded`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:192:39
+    |
+192 |                         NSEventPhase::NSEventPhaseEnded => match native_event.deltaX() {
+    |                                       ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::deltaX`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:192:79
+    |
+192 |                         NSEventPhase::NSEventPhaseEnded => match native_event.deltaX() {
+    |                                                                               ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:205:53
+    |
+205 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:205:40
+    |
+205 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:206:69
+    |
+206 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:206:56
+    |
+206 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::phase`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:217:52
+    |
+217 |                     let phase = match native_event.phase() {
+    |                                                    ^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventPhase::NSEventPhaseMayBegin`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:218:39
+    |
+218 |                         NSEventPhase::NSEventPhaseMayBegin | NSEventPhase::NSEventPhaseBegan => {
+    |                                       ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventPhase::NSEventPhaseBegan`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:218:76
+    |
+218 |                         NSEventPhase::NSEventPhaseMayBegin | NSEventPhase::NSEventPhaseBegan => {
+    |                                                                            ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventPhase::NSEventPhaseEnded`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:221:39
+    |
+221 |                         NSEventPhase::NSEventPhaseEnded => TouchPhase::Ended,
+    |                                       ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::scrollingDeltaX`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:226:38
+    |
+226 |                         native_event.scrollingDeltaX() as f32,
+    |                                      ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::scrollingDeltaY`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:227:38
+    |
+227 |                         native_event.scrollingDeltaY() as f32,
+    |                                      ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::hasPreciseScrollingDeltas`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:230:49
+    |
+230 |                     let delta = if native_event.hasPreciseScrollingDeltas() == YES {
+    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:238:45
+    |
+238 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:238:32
+    |
+238 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:239:61
+    |
+239 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:239:48
+    |
+239 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::buttonNumber`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:249:61
+    |
+249 |                     let pressed_button = match native_event.buttonNumber() {
+    |                                                             ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:263:49
+    |
+263 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:263:36
+    |
+263 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:264:65
+    |
+264 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:264:52
+    |
+264 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:273:45
+    |
+273 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:273:32
+    |
+273 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:274:61
+    |
+274 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:274:48
+    |
+274 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:283:45
+    |
+283 | ...                   px(native_event.locationInWindow().x as f32),
+    |                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:283:32
+    |
+283 | ...                   px(native_event.locationInWindow().x as f32),
+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::locationInWindow`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:284:61
+    |
+284 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                                       ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/events.rs:284:48
+    |
+284 | ...                   window_height - px(native_event.locationInWindow().y as f32),
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::charactersIgnoringModifiers`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:302:14
+    |
+302 |             .charactersIgnoringModifiers()
+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::modifierFlags`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:307:38
+    |
+307 |         let modifiers = native_event.modifierFlags();
+    |                                      ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:309:33
+    |
+309 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+    |                                 ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSControlKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:309:64
+    |
+309 |         let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+    |                                                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:310:29
+    |
+310 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+    |                             ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlternateKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:310:60
+    |
+310 |         let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+    |                                                            ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:311:35
+    |
+311 |         let mut shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+    |                                   ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSShiftKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:311:66
+    |
+311 |         let mut shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+    |                                                                  ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:312:33
+    |
+312 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+    |                                 ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSCommandKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:312:64
+    |
+312 |         let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+    |                                                                ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:313:34
+    |
+313 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask)
+    |                                  ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSFunctionKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:313:65
+    |
+313 |         let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask)
+    |                                                                 ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::keyCode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:393:57
+    |
+393 |                     chars_for_modified_key(native_event.keyCode(), NO_MOD);
+    |                                                         ^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::keyCode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:395:57
+    |
+395 |                     chars_for_modified_key(native_event.keyCode(), SHIFT_MOD);
+    |                                                         ^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::keyCode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:400:78
+    |
+400 |                     let chars_with_cmd = chars_for_modified_key(native_event.keyCode(), CMD_MOD);
+    |                                                                              ^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::keyCode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:402:61
+    |
+402 |                         chars_for_modified_key(native_event.keyCode(), CMD_MOD | SHIFT_MOD);
+    |                                                             ^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::keyCode`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/events.rs:426:73
+    |
+426 |                     key_char = Some(chars_for_modified_key(native_event.keyCode(), mods));
+    |                                                                         ^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:198:59
+    |
+198 |     let screen_number_key = unsafe { NSString::alloc(nil).init_str("NSScreenNumber") };
+    |                                                           ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:246:38
+    |
+246 |                 for i in 0..displays.count() {
+    |                                      ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/screen_capture.rs:247:44
+    |
+247 |                     let display = displays.objectAtIndex(i);
+    |                                            ^^^^^^^^^^^^^
+
+   Compiling by_address v1.2.1
+warning: use of deprecated associated constant `cocoa::quartzcore::AutoresizingMask::WIDTH_SIZABLE`: use the objc2-quartz-core crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:152:56
+    |
+152 |                 setAutoresizingMask: AutoresizingMask::WIDTH_SIZABLE
+    |                                                        ^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::quartzcore::AutoresizingMask::HEIGHT_SIZABLE`: use the objc2-quartz-core crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:153:41
+    |
+153 |                     | AutoresizingMask::HEIGHT_SIZABLE
+    |                                         ^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:300:13
+    |
+300 |             width: size.width.0 as f64,
+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:301:13
+    |
+301 |             height: size.height.0 as f64,
+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:310:33
+    |
+310 |             width: DevicePixels(size.width as i32),
+    |                                 ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/metal_renderer.rs:311:34
+    |
+311 |             height: DevicePixels(size.height as i32),
+    |                                  ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::dataForType`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:223:35
+    |
+223 |             let data = pasteboard.dataForType(kind);
+    |                                   ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::bytes`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:228:26
+    |
+228 |                     data.bytes() as *mut u8,
+    |                          ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::length`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:229:26
+    |
+229 |                     data.length() as usize,
+    |                          ^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:243:53
+    |
+243 |             let application_menu = NSMenu::new(nil).autorelease();
+    |                                                     ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:244:30
+    |
+244 |             application_menu.setDelegate_(delegate);
+    |                              ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:247:45
+    |
+247 |                 let menu = NSMenu::new(nil).autorelease();
+    |                                             ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitle_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:249:22
+    |
+249 |                 menu.setTitle_(menu_title);
+    |                      ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:250:22
+    |
+250 |                 menu.setDelegate_(delegate);
+    |                      ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenu::addItem_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:253:26
+    |
+253 |                     menu.addItem_(Self::create_menu_item(
+    |                          ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:261:54
+    |
+261 |                 let menu_item = NSMenuItem::new(nil).autorelease();
+    |                                                      ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitle_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:262:27
+    |
+262 |                 menu_item.setTitle_(menu_title);
+    |                           ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::setSubmenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:263:27
+    |
+263 |                 menu_item.setSubmenu_(menu);
+    |                           ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenu::addItem_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:264:34
+    |
+264 |                 application_menu.addItem_(menu_item);
+    |                                  ^^^^^^^^
+
+   Compiling palette v0.7.6
+warning: use of deprecated method `cocoa::appkit::NSApplication::setWindowsMenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:268:25
+    |
+268 |                     app.setWindowsMenu_(menu);
+    |                         ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:285:23
+    |
+285 |             dock_menu.setDelegate_(delegate);
+    |                       ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenu::addItem_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:287:27
+    |
+287 |                 dock_menu.addItem_(Self::create_menu_item(
+    |                           ^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::empty`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:354:66
+    |
+354 | ...                   let mut mask = NSEventModifierFlags::empty();
+    |                                                            ^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSCommandKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:358:59
+    |
+358 | ...                   NSEventModifierFlags::NSCommandKeyMask,
+    |                                             ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSControlKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:362:59
+    |
+362 | ...                   NSEventModifierFlags::NSControlKeyMask,
+    |                                             ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlternateKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:366:59
+    |
+366 | ...                   NSEventModifierFlags::NSAlternateKeyMask,
+    |                                             ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSShiftKeyMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:370:59
+    |
+370 | ...                   NSEventModifierFlags::NSShiftKeyMask,
+    |                                             ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::initWithTitle_action_keyEquivalent_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:379:34
+    |
+379 | ...                   .initWithTitle_action_keyEquivalent_(
+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:384:34
+    |
+384 | ...                   .autorelease();
+    |                        ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::setKeyEquivalentModifierMask_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:388:34
+    |
+388 | ...                   item.setKeyEquivalentModifierMask_(mask);
+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::initWithTitle_action_keyEquivalent_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:391:34
+    |
+391 | ...                   .initWithTitle_action_keyEquivalent_(
+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:396:34
+    |
+396 | ...                   .autorelease();
+    |                        ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::initWithTitle_action_keyEquivalent_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:400:30
+    |
+400 | ...                   .initWithTitle_action_keyEquivalent_(
+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:405:30
+    |
+405 | ...                   .autorelease();
+    |                        ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:414:53
+    |
+414 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                                     ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:415:52
+    |
+415 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                                    ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:416:29
+    |
+416 |                     submenu.setDelegate_(delegate);
+    |                             ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenu::addItem_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:418:33
+    |
+418 |                         submenu.addItem_(Self::create_menu_item(item, delegate, actions, keymap));
+    |                                 ^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::setSubmenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:420:26
+    |
+420 |                     item.setSubmenu_(submenu);
+    |                          ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitle_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:421:26
+    |
+421 |                     item.setTitle_(ns_string(name));
+    |                          ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:425:53
+    |
+425 |                     let item = NSMenuItem::new(nil).autorelease();
+    |                                                     ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:426:52
+    |
+426 |                     let submenu = NSMenu::new(nil).autorelease();
+    |                                                    ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:427:29
+    |
+427 |                     submenu.setDelegate_(delegate);
+    |                             ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSMenuItem::setSubmenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:428:26
+    |
+428 |                     item.setSubmenu_(submenu);
+    |                          ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitle_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:429:26
+    |
+429 |                     item.setTitle_(ns_string(name));
+    |                          ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSApplication::setServicesMenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:434:33
+    |
+434 | ...                   app.setServicesMenu_(item);
+    |                           ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSProcessInfo::operatingSystemVersion`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:447:26
+    |
+447 |             process_info.operatingSystemVersion()
+    |                          ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::majorVersion`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:450:13
+    |
+450 |             version.majorVersion as usize,
+    |             ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::minorVersion`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:451:13
+    |
+451 |             version.minorVersion as usize,
+    |             ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::patchVersion`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:452:13
+    |
+452 |             version.patchVersion as usize,
+    |             ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:484:17
+    |
+484 |             app.setDelegate_(app_delegate);
+    |                 ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSApplication::run`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:491:17
+    |
+491 |             app.run();
+    |                 ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::drain`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:492:18
+    |
+492 |             pool.drain();
+    |                  ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSApplication::activateIgnoringOtherApps_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:559:17
+    |
+559 |             app.activateIgnoringOtherApps_(ignoring_other_apps.to_objc());
+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSOperatingSystemVersion::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:596:72
+    |
+596 |         let min_version = cocoa::foundation::NSOperatingSystemVersion::new(12, 3, 0);
+    |                                                                        ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSURL::initWithString_`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:642:18
+    |
+642 |                 .initWithString_(ns_string(url))
+    |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:643:18
+    |
+643 |                 .autorelease();
+    |                  ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSOpenPanel::setCanChooseDirectories_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:711:27
+    |
+711 |                     panel.setCanChooseDirectories_(options.directories.to_objc());
+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSOpenPanel::setCanChooseFiles_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:712:27
+    |
+712 |                     panel.setCanChooseFiles_(options.files.to_objc());
+    |                           ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSOpenPanel::setAllowsMultipleSelection_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:713:27
+    |
+713 |                     panel.setAllowsMultipleSelection_(options.multiple.to_objc());
+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSSavePanel::setCanCreateDirectories`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:715:27
+    |
+715 |                     panel.setCanCreateDirectories(true.to_objc());
+    |                           ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSOpenPanel::setResolvesAliases_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:716:27
+    |
+716 |                     panel.setResolvesAliases_(false.to_objc());
+    |                           ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSOpenPanel::URLs`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:721:46
+    |
+721 | ...                   let urls = panel.URLs();
+    |                                        ^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:722:46
+    |
+722 | ...                   for i in 0..urls.count() {
+    |                                        ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:723:48
+    |
+723 | ...                   let url = urls.objectAtIndex(i);
+    |                                      ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSURL::isFileURL`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:724:40
+    |
+724 | ...                   if url.isFileURL() == YES
+    |                              ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSSavePanel::setDirectoryURL`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:766:27
+    |
+766 |                     panel.setDirectoryURL(url);
+    |                           ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSSavePanel::URL`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:777:45
+    |
+777 | ...                   let url = panel.URL();
+    |                                       ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSURL::isFileURL`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:778:36
+    |
+778 | ...                   if url.isFileURL() == YES {
+    |                              ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSSavePanel::URL`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:779:63
+    |
+779 | ...                   result = ns_url_to_path(panel.URL()).ok().map(|mut result| {
+    |                                                     ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSApplication::setMainMenu_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/platform.rs:910:17
+    |
+910 |             app.setMainMenu_(menu);
+    |                 ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::clearContents`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1034:42
+     |
+1034 |                         state.pasteboard.clearContents();
+     |                                          ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1042:70
+     |
+1042 |                         .init_attributed_string(NSString::alloc(nil).init_str(""));
+     |                                                                      ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1048:78
+     |
+1048 | ...                   .init_attributed_string(NSString::alloc(nil).init_str(&text));
+     |                                                                    ^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::clearContents`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1058:34
+     |
+1058 |                 state.pasteboard.clearContents();
+     |                                  ^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRange::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1063:34
+     |
+1063 |                         NSRange::new(0, msg_send![attributed_string, length]),
+     |                                  ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1069:30
+     |
+1069 | ...                   .setData_forType(rtfd_data, NSPasteboardTypeRTFD);
+     |                        ^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRange::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1073:34
+     |
+1073 |                         NSRange::new(0, attributed_string.length()),
+     |                                  ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::length`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1073:59
+     |
+1073 |                         NSRange::new(0, attributed_string.length()),
+     |                                                           ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1079:30
+     |
+1079 | ...                   .setData_forType(rtf_data, NSPasteboardTypeRTF);
+     |                        ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setString_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1086:22
+     |
+1086 |                     .setString_forType(plain_text, NSPasteboardTypeString);
+     |                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::types`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1097:40
+     |
+1097 |             let types: id = pasteboard.types();
+     |                                        ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::dataForType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1101:39
+     |
+1101 |                 let data = pasteboard.dataForType(string_type);
+     |                                       ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::bytes`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1104:32
+     |
+1104 |                 } else if data.bytes().is_null() {
+     |                                ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::bytes`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1110:52
+     |
+1110 |                         slice::from_raw_parts(data.bytes() as *mut u8, data.length() as usize);
+     |                                                    ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::length`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1110:77
+     |
+1110 |                         slice::from_raw_parts(data.bytes() as *mut u8, data.length() as usize);
+     |                                                                             ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::clearContents`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1266:30
+     |
+1266 |             state.pasteboard.clearContents();
+     |                              ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1275:18
+     |
+1275 |                 .setData_forType(text_bytes, NSPasteboardTypeString);
+     |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1286:22
+     |
+1286 |                     .setData_forType(hash_bytes, state.text_hash_pasteboard_type);
+     |                      ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1295:22
+     |
+1295 |                     .setData_forType(metadata_bytes, state.metadata_pasteboard_type);
+     |                      ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::clearContents`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1303:30
+     |
+1303 |             state.pasteboard.clearContents();
+     |                              ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::setData_forType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1313:18
+     |
+1313 |                 .setData_forType(bytes, Into::<UTType>::into(image.format).inner_mut());
+     |                  ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::types`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1322:36
+     |
+1322 |         let types: id = pasteboard.types();
+     |                                    ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSPasteboard::dataForType`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1324:35
+     |
+1324 |             let data = pasteboard.dataForType(ut_type.inner_mut());
+     |                                   ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::bytes`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1329:26
+     |
+1329 |                     data.bytes() as *mut u8,
+     |                          ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSData::length`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1330:26
+     |
+1330 |                     data.length() as usize,
+     |                          ^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1346:31
+     |
+1346 |     let bytes = unsafe { path.UTF8String() as *const u8 };
+     |                               ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSApplication::setActivationPolicy_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1362:13
+     |
+1362 |         app.setActivationPolicy_(NSApplicationActivationPolicyRegular);
+     |             ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::count`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1421:18
+     |
+1421 |         (0..urls.count())
+     |                  ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1423:32
+     |
+1423 |                 let url = urls.objectAtIndex(i);
+     |                                ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSURL::absoluteString`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1424:42
+     |
+1424 |                 match CStr::from_ptr(url.absoluteString().UTF8String() as *mut c_char).to_str() {
+     |                                          ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1424:59
+     |
+1424 |                 match CStr::from_ptr(url.absoluteString().UTF8String() as *mut c_char).to_str() {
+     |                                                           ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1508:35
+     |
+1508 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+     |                                   ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1508:52
+     |
+1508 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+     |                                                    ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSURL::absoluteString`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1514:28
+     |
+1514 |         CStr::from_ptr(url.absoluteString().UTF8String()).to_string_lossy()
+     |                            ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/platform.rs:1514:45
+     |
+1514 |         CStr::from_ptr(url.absoluteString().UTF8String()).to_string_lossy()
+     |                                             ^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::appkit::_::<impl cocoa::appkit::NSWindowStyleMask>::from_bits_retain`: use the objc2-app-kit crate instead
+  --> crates/gpui/src/platform/mac/window.rs:65:24
+   |
+65 |     NSWindowStyleMask::from_bits_retain(1 << 7);
+   |                        ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:275:12
+    |
+275 |         px(position.x as f32),
+    |            ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:277:28
+    |
+277 |         window_height - px(position.y as f32),
+    |                            ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::occlusionState`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:481:18
+    |
+481 |                 .occlusionState()
+    |                  ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowOcclusionState>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:482:18
+    |
+482 |                 .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+    |                  ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowOcclusionState::NSWindowOcclusionStateVisible`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:482:51
+    |
+482 |                 .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::screen`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:487:76
+    |
+487 |         let display_id = unsafe { display_id_for_screen(self.native_window.screen()) };
+    |                                                                            ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::screen`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:503:50
+    |
+503 |             let screen_size = self.native_window.screen().visibleFrame().into();
+    |                                                  ^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSScreen::visibleFrame`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:503:59
+    |
+503 |             let screen_size = self.native_window.screen().visibleFrame().into();
+    |                                                           ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::styleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:510:49
+    |
+510 |             let style_mask = self.native_window.styleMask();
+    |                                                 ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowStyleMask>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:511:24
+    |
+511 |             style_mask.contains(NSWindowStyleMask::NSFullScreenWindowMask)
+    |                        ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullScreenWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:511:52
+    |
+511 |             style_mask.contains(NSWindowStyleMask::NSFullScreenWindowMask)
+    |                                                    ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:523:9
+    |
+523 |         window_frame.origin.y =
+    |         ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:523:9
+    |
+523 |         window_frame.origin.y =
+    |         ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:13
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |             ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:13
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |             ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:40
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |                                        ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:40
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |                                        ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:64
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |                                                                ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:524:64
+    |
+524 |             screen_frame.size.height - window_frame.origin.y - window_frame.size.height;
+    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:528:21
+    |
+528 |                 px((window_frame.origin.x - screen_frame.origin.x) as f32),
+    |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:528:21
+    |
+528 |                 px((window_frame.origin.x - screen_frame.origin.x) as f32),
+    |                     ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:528:45
+    |
+528 |                 px((window_frame.origin.x - screen_frame.origin.x) as f32),
+    |                                             ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:528:45
+    |
+528 |                 px((window_frame.origin.x - screen_frame.origin.x) as f32),
+    |                                             ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:529:21
+    |
+529 |                 px((window_frame.origin.y + screen_frame.origin.y) as f32),
+    |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:529:21
+    |
+529 |                 px((window_frame.origin.y + screen_frame.origin.y) as f32),
+    |                     ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:529:45
+    |
+529 |                 px((window_frame.origin.y + screen_frame.origin.y) as f32),
+    |                                             ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:529:45
+    |
+529 |                 px((window_frame.origin.y + screen_frame.origin.y) as f32),
+    |                                             ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:532:20
+    |
+532 |                 px(window_frame.size.width as f32),
+    |                    ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:532:20
+    |
+532 |                 px(window_frame.size.width as f32),
+    |                    ^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:533:20
+    |
+533 |                 px(window_frame.size.height as f32),
+    |                    ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:533:20
+    |
+533 |                 px(window_frame.size.height as f32),
+    |                    ^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::contentView`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:540:55
+    |
+540 |             unsafe { NSView::frame(self.native_window.contentView()) }.size;
+    |                                                       ^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:540:13
+    |
+540 |             unsafe { NSView::frame(self.native_window.contentView()) }.size;
+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:539:22
+    |
+539 |         let NSSize { width, height, .. } =
+    |                      ^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:539:29
+    |
+539 |         let NSSize { width, height, .. } =
+    |                             ^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:552:17
+    |
+552 |             px((frame.size.height - content_layout_rect.size.height) as f32)
+    |                 ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:552:17
+    |
+552 |             px((frame.size.height - content_layout_rect.size.height) as f32)
+    |                 ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSClosableWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:601:40
+    |
+601 |                     NSWindowStyleMask::NSClosableWindowMask | NSWindowStyleMask::NSTitledWindowMask;
+    |                                        ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSTitledWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:601:82
+    |
+601 |                     NSWindowStyleMask::NSClosableWindowMask | NSWindowStyleMask::NSTitledWindowMask;
+    |                                                                                  ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSResizableWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:604:54
+    |
+604 |                     style_mask |= NSWindowStyleMask::NSResizableWindowMask;
+    |                                                      ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSMiniaturizableWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:608:54
+    |
+608 |                     style_mask |= NSWindowStyleMask::NSMiniaturizableWindowMask;
+    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullSizeContentViewWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:612:54
+    |
+612 |                     style_mask |= NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSTitledWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:615:49
+    |
+615 |                 style_mask = NSWindowStyleMask::NSTitledWindowMask
+    |                                                 ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullSizeContentViewWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:616:42
+    |
+616 |                     | NSWindowStyleMask::NSFullSizeContentViewWindowMask;
+    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRect::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:652:39
+    |
+652 |             let window_rect = NSRect::new(
+    |                                       ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSPoint::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:653:26
+    |
+653 |                 NSPoint::new(
+    |                          ^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:654:21
+    |
+654 |                     screen_frame.origin.x + bounds.origin.x.0 as f64,
+    |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:654:21
+    |
+654 |                     screen_frame.origin.x + bounds.origin.x.0 as f64,
+    |                     ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:655:21
+    |
+655 |                     screen_frame.origin.y
+    |                     ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:655:21
+    |
+655 |                     screen_frame.origin.y
+    |                     ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSSize::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:658:25
+    |
+658 |                 NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
+    |                         ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::initWithContentRect_styleMask_backing_defer_screen_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:661:47
+    |
+661 |             let native_window = native_window.initWithContentRect_styleMask_backing_defer_screen_(
+    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::contentView`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:679:46
+    |
+679 |             let content_view = native_window.contentView();
+    |                                              ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:732:27
+    |
+732 |             native_window.setDelegate_(native_window);
+    |                           ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setMovable_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:745:27
+    |
+745 |             native_window.setMovable_(is_movable as BOOL);
+    |                           ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setContentMinSize_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:748:31
+    |
+748 |                 native_window.setContentMinSize_(NSSize {
+    |                               ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:749:21
+    |
+749 |                     width: window_min_size.width.to_f64(),
+    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:750:21
+    |
+750 |                     height: window_min_size.height.to_f64(),
+    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitlebarAppearsTransparent_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:755:31
+    |
+755 |                 native_window.setTitlebarAppearsTransparent_(YES);
+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitleVisibility_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:756:31
+    |
+756 |                 native_window.setTitleVisibility_(NSWindowTitleVisibility::NSWindowTitleHidden);
+    |                               ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::setAutoresizingMask_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:759:25
+    |
+759 |             native_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+    |                         ^^^^^^^^^^^^^^^^^^^^
+
+   Compiling palette_derive v0.7.6
+warning: use of deprecated method `cocoa::appkit::NSView::setWantsBestResolutionOpenGLSurface_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:760:25
+    |
+760 |             native_view.setWantsBestResolutionOpenGLSurface_(YES);
+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::setWantsLayer`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:767:25
+    |
+767 |             native_view.setWantsLayer(YES);
+    |                         ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::addSubview_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:773:26
+    |
+773 |             content_view.addSubview_(native_view.autorelease());
+    |                          ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:773:50
+    |
+773 |             content_view.addSubview_(native_view.autorelease());
+    |                                                  ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::makeFirstResponder_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:774:27
+    |
+774 |             native_window.makeFirstResponder_(native_view);
+    |                           ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setLevel_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:778:35
+    |
+778 |                     native_window.setLevel_(NSNormalWindowLevel);
+    |                                   ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setAcceptsMouseMovedEvents_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:779:35
+    |
+779 |                     native_window.setAcceptsMouseMovedEvents_(YES);
+    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:782:63
+    |
+782 |                         let tabbing_id = NSString::alloc(nil).init_str(tabbing_identifier.as_str());
+    |                                                               ^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRect::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:47
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                               ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSPoint::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:60
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                                            ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSSize::new`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:793:81
+    |
+793 |                         initWithRect: NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.))
+    |                                                                                 ^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:799:79
+    |
+799 |                         msg_send![native_view, addTrackingArea: tracking_area.autorelease()];
+    |                                                                               ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setLevel_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:801:35
+    |
+801 |                     native_window.setLevel_(NSPopUpWindowLevel);
+    |                                   ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setCollectionBehavior_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:806:35
+    |
+806 |                     native_window.setCollectionBehavior_(
+    |                                   ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowCollectionBehavior::NSWindowCollectionBehaviorCanJoinAllSpaces`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:807:53
+    |
+807 |                         NSWindowCollectionBehavior::NSWindowCollectionBehaviorCanJoinAllSpaces |
+    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowCollectionBehavior::NSWindowCollectionBehaviorFullScreenAuxiliary`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:808:53
+    |
+808 |                         NSWindowCollectionBehavior::NSWindowCollectionBehaviorFullScreenAuxiliary
+    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::styleMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:820:22
+    |
+820 |                     .styleMask()
+    |                      ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowStyleMask>::contains`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:821:22
+    |
+821 |                     .contains(NSWindowStyleMask::NSFullScreenWindowMask);
+    |                      ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullScreenWindowMask`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:821:50
+    |
+821 |                     .contains(NSWindowStyleMask::NSFullScreenWindowMask);
+    |                                                  ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowOrderingMode::NSWindowAbove`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:834:122
+    |
+834 | ...   let _: () = msg_send![main_window, addTabbedWindow: native_window ordered: NSWindowOrderingMode::NSWindowAbove];
+    |                                                                                                        ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::makeKeyAndOrderFront_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:846:31
+    |
+846 |                 native_window.makeKeyAndOrderFront_(nil);
+    |                               ^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::orderFront_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:848:31
+    |
+848 |                 native_window.orderFront_(nil);
+    |                               ^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:855:60
+    |
+855 |             NSWindow::setFrameTopLeftPoint_(native_window, window_rect.origin);
+    |                                                            ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::drain`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:858:18
+    |
+858 |             pool.drain();
+    |                  ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:903:47
+    |
+903 |             let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+    |                                               ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:904:44
+    |
+904 |             let key = NSString::alloc(nil).init_str("AppleWindowTabbingMode");
+    |                                            ^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setDelegate_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:935:32
+    |
+935 |             this.native_window.setDelegate_(nil);
+    |                                ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::close`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:941:28
+    |
+941 |                     window.close();
+    |                            ^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:942:28
+    |
+942 |                     window.autorelease();
+    |                            ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setContentSize_`: use the objc2-app-kit crate instead
+   --> crates/gpui/src/platform/mac/window.rs:972:28
+    |
+972 |                     window.setContentSize_(NSSize {
+    |                            ^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:973:25
+    |
+973 |                         width: size.width.0 as f64,
+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac/window.rs:974:25
+    |
+974 |                         height: size.height.0 as f64,
+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::screen`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1034:54
+     |
+1034 |             let screen = self.0.lock().native_window.screen();
+     |                                                      ^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1041:38
+     |
+1041 |                 NSString::alloc(nil).init_str("NSScreenNumber"),
+     |                                      ^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::mouseLocationOutsideOfEventStream`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1055:18
+     |
+1055 |                 .mouseLocationOutsideOfEventStream()
+     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1064:37
+     |
+1064 |             let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+     |                                     ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSControlKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1064:68
+     |
+1064 |             let control = modifiers.contains(NSEventModifierFlags::NSControlKeyMask);
+     |                                                                    ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1065:33
+     |
+1065 |             let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+     |                                 ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlternateKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1065:64
+     |
+1065 |             let alt = modifiers.contains(NSEventModifierFlags::NSAlternateKeyMask);
+     |                                                                ^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1066:35
+     |
+1066 |             let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+     |                                   ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSShiftKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1066:66
+     |
+1066 |             let shift = modifiers.contains(NSEventModifierFlags::NSShiftKeyMask);
+     |                                                                  ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1067:37
+     |
+1067 |             let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+     |                                     ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSCommandKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1067:68
+     |
+1067 |             let command = modifiers.contains(NSEventModifierFlags::NSCommandKeyMask);
+     |                                                                    ^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1068:38
+     |
+1068 |             let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+     |                                      ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSFunctionKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1068:69
+     |
+1068 |             let function = modifiers.contains(NSEventModifierFlags::NSFunctionKeyMask);
+     |                                                                     ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSEventModifierFlags>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1085:31
+     |
+1085 |                 on: modifiers.contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+     |                               ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSEventModifierFlags::NSAlphaShiftKeyMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1085:62
+     |
+1085 |                 on: modifiers.contains(NSEventModifierFlags::NSAlphaShiftKeyMask),
+     |                                                              ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::isKeyWindow`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1202:46
+     |
+1202 |         unsafe { self.0.lock().native_window.isKeyWindow() == YES }
+     |                                              ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setOpaque_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1241:32
+     |
+1241 |             this.native_window.setOpaque_(opaque as BOOL);
+     |                                ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setBackgroundColor_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1248:32
+     |
+1248 |             this.native_window.setBackgroundColor_(background_color);
+     |                                ^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSEvent::windowNumber`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1260:56
+     |
+1260 |                 let window_number = this.native_window.windowNumber();
+     |                                                        ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::contentView`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1272:59
+     |
+1272 |                     let content_view = this.native_window.contentView();
+     |                                                           ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSView::setAutoresizingMask_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1276:31
+     |
+1276 |                     blur_view.setAutoresizingMask_(NSViewWidthSizable | NSViewHeightSizable);
+     |                               ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowOrderingMode::NSWindowBelow`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1281:59
+     |
+1281 |                         positioned: NSWindowOrderingMode::NSWindowBelow
+     |                                                           ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1284:56
+     |
+1284 |                     this.blurred_view = Some(blur_view.autorelease());
+     |                                                        ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::miniaturize_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1317:20
+     |
+1317 |             window.miniaturize_(nil);
+     |                    ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::zoom_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1327:28
+     |
+1327 |                     window.zoom_(nil);
+     |                            ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::toggleFullScreen_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1339:28
+     |
+1339 |                     window.toggleFullScreen_(nil);
+     |                            ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::styleMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1351:18
+     |
+1351 |                 .styleMask()
+     |                  ^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowStyleMask>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1352:18
+     |
+1352 |                 .contains(NSWindowStyleMask::NSFullScreenWindowMask)
+     |                  ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullScreenWindowMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1352:46
+     |
+1352 |                 .contains(NSWindowStyleMask::NSFullScreenWindowMask)
+     |                                              ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1485:55
+     |
+1485 |                     let domain = NSString::alloc(nil).init_str("NSGlobalDomain");
+     |                                                       ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1486:52
+     |
+1486 |                     let key = NSString::alloc(nil).init_str("AppleActionOnDoubleClick");
+     |                                                    ^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::miniaturize_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1503:36
+     |
+1503 | ...                   window.miniaturize_(nil);
+     |                              ^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::zoom_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1506:36
+     |
+1506 | ...                   window.zoom_(nil);
+     |                              ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::zoom_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1510:36
+     |
+1510 | ...                   window.zoom_(nil);
+     |                              ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::zoom_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1513:36
+     |
+1513 | ...                   window.zoom_(nil);
+     |                              ^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::occlusionState`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1887:14
+     |
+1887 |             .occlusionState()
+     |              ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowOcclusionState>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1888:14
+     |
+1888 |             .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+     |              ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowOcclusionState::NSWindowOcclusionStateVisible`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1888:47
+     |
+1888 |             .contains(NSWindowOcclusionState::NSWindowOcclusionStateVisible)
+     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSOperatingSystemVersion::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1908:49
+     |
+1908 |     let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+     |                                                 ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitlebarAppearsTransparent_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1912:32
+     |
+1912 |             lock.native_window.setTitlebarAppearsTransparent_(NO);
+     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSOperatingSystemVersion::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1921:49
+     |
+1921 |     let min_version = NSOperatingSystemVersion::new(15, 3, 0);
+     |                                                 ^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::setTitlebarAppearsTransparent_`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1925:32
+     |
+1925 |             lock.native_window.setTitlebarAppearsTransparent_(YES);
+     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSProcessInfo::isOperatingSystemAtLeastVersion`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1931:46
+     |
+1931 |     unsafe { NSProcessInfo::processInfo(nil).isOperatingSystemAtLeastVersion(version) }
+     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::appkit::NSWindow::isKeyWindow`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:1953:49
+     |
+1953 |     let is_active = unsafe { lock.native_window.isKeyWindow() == YES };
+     |                                                 ^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2077:30
+     |
+2077 |         Size::<Pixels>::from(old_frame.size)
+     |                              ^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRect::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:17
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |                 ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSPoint::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:30
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |                              ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSSize::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2170:51
+     |
+2170 |         NSRect::new(NSPoint::new(0., 0.), NSSize::new(0., 0.)),
+     |                                                   ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSRect::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2172:21
+     |
+2172 |             NSRect::new(
+     |                     ^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSPoint::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2173:26
+     |
+2173 |                 NSPoint::new(
+     |                          ^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2174:21
+     |
+2174 |                     frame.origin.x + bounds.origin.x.0 as f64,
+     |                     ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2174:21
+     |
+2174 |                     frame.origin.x + bounds.origin.x.0 as f64,
+     |                     ^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2175:21
+     |
+2175 |                     frame.origin.y + frame.size.height
+     |                     ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2175:21
+     |
+2175 |                     frame.origin.y + frame.size.height
+     |                     ^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2175:38
+     |
+2175 |                     frame.origin.y + frame.size.height
+     |                                      ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2175:38
+     |
+2175 |                     frame.origin.y + frame.size.height
+     |                                      ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSSize::new`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2179:25
+     |
+2179 |                 NSSize::new(bounds.size.width.0 as f64, bounds.size.height.0 as f64),
+     |                         ^^^
+
+warning: use of deprecated method `cocoa::appkit::_::<impl cocoa::appkit::NSWindowStyleMask>::contains`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2192:24
+     |
+2192 |         if !style_mask.contains(NSWindowStyleMask::NSFullSizeContentViewWindowMask) {
+     |                        ^^^^^^^^
+
+warning: use of deprecated associated constant `cocoa::appkit::NSWindowStyleMask::NSFullSizeContentViewWindowMask`: use the objc2-app-kit crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2192:52
+     |
+2192 |         if !style_mask.contains(NSWindowStyleMask::NSFullSizeContentViewWindowMask) {
+     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2193:13
+     |
+2193 |             frame.origin.y -= frame.size.height - content_layout_rect.size.height;
+     |             ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2193:13
+     |
+2193 |             frame.origin.y -= frame.size.height - content_layout_rect.size.height;
+     |             ^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2193:31
+     |
+2193 |             frame.origin.y -= frame.size.height - content_layout_rect.size.height;
+     |                               ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2193:31
+     |
+2193 |             frame.origin.y -= frame.size.height - content_layout_rect.size.height;
+     |                               ^^^^^^^^^^^^^^^^^
+
+   Compiling der v0.7.10
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2324:20
+     |
+2324 |     let window_x = position.x - frame.origin.x;
+     |                    ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2324:33
+     |
+2324 |     let window_x = position.x - frame.origin.x;
+     |                                 ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::x`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2324:33
+     |
+2324 |     let window_x = position.x - frame.origin.x;
+     |                                 ^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2325:20
+     |
+2325 |     let window_y = frame.size.height - (position.y - frame.origin.y);
+     |                    ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2325:20
+     |
+2325 |     let window_y = frame.size.height - (position.y - frame.origin.y);
+     |                    ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2325:41
+     |
+2325 |     let window_y = frame.size.height - (position.y - frame.origin.y);
+     |                                         ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::origin`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2325:54
+     |
+2325 |     let window_y = frame.size.height - (position.y - frame.origin.y);
+     |                                                      ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSPoint::y`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2325:54
+     |
+2325 |     let window_y = frame.size.height - (position.y - frame.origin.y);
+     |                                                      ^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSFastEnumeration::iter`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2383:36
+     |
+2383 |     for file in unsafe { filenames.iter() } {
+     |                                    ^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2458:58
+     |
+2458 |         let screen_number_key: id = NSString::alloc(nil).init_str("NSScreenNumber");
+     |                                                          ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSDictionary::objectForKey_`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2459:48
+     |
+2459 |         let screen_number = device_description.objectForKey_(screen_number_key);
+     |                                                ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::isEqualToString`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2491:23
+     |
+2491 |         if class_name.isEqualToString("CAChameleonLayer") {
+     |                       ^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2504:56
+     |
+2504 |             let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
+     |                                                        ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2504:76
+     |
+2504 |             let test_string: id = NSString::alloc(nil).init_str("Saturat").autorelease();
+     |                                                                            ^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2507:57
+     |
+2507 |                 let description: id = msg_send![filters.objectAtIndex(i), description];
+     |                                                         ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSArray::objectAtIndex`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2530:42
+     |
+2530 |                 let sublayer = sublayers.objectAtIndex(i);
+     |                                          ^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2545:9
+     |
+2545 |         frame.size.height = 0.0;
+     |         ^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+    --> crates/gpui/src/platform/mac/window.rs:2545:9
+     |
+2545 |         frame.size.height = 0.0;
+     |         ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac/window_appearance.rs:25:41
+   |
+25 |                     CStr::from_ptr(name.UTF8String())
+   |                                         ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::UTF8String`: use the objc2-foundation crate instead
+  --> crates/gpui/src/platform/mac.rs:78:29
+   |
+78 |             let cstr = self.UTF8String();
+   |                             ^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:139:35
+    |
+139 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                   ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:139:52
+    |
+139 |     unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                                    ^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:145:23
+    |
+145 |             width: px(value.width as f32),
+    |                       ^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:146:24
+    |
+146 |             height: px(value.height as f32),
+    |                        ^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:153:40
+    |
+153 |         let NSSize { width, height } = rect.size;
+    |                                        ^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:153:22
+    |
+153 |         let NSSize { width, height } = rect.size;
+    |                      ^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:153:29
+    |
+153 |         let NSSize { width, height } = rect.size;
+    |                             ^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSRect::size`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:160:40
+    |
+160 |         let NSSize { width, height } = rect.size;
+    |                                        ^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::width`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:160:22
+    |
+160 |         let NSSize { width, height } = rect.size;
+    |                      ^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSSize::height`: use the objc2-foundation crate instead
+   --> crates/gpui/src/platform/mac.rs:160:29
+    |
+160 |         let NSSize { width, height } = rect.size;
+    |                             ^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:450:20
+    |
+450 |             base::{id, nil},
+    |                    ^^
+    |
+    = note: `#[warn(deprecated)]` on by default
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:450:24
+    |
+450 |             base::{id, nil},
+    |                        ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSAutoreleasePool`: use the objc2-foundation crate instead
+   --> crates/fs/src/fs.rs:451:26
+    |
+451 |             foundation::{NSAutoreleasePool, NSString},
+    |                          ^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSString`: use the objc2-foundation crate instead
+   --> crates/fs/src/fs.rs:451:45
+    |
+451 |             foundation::{NSAutoreleasePool, NSString},
+    |                                             ^^^^^^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:456:50
+    |
+456 |             unsafe fn ns_string(string: &str) -> id {
+    |                                                  ^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSString::alloc`: use the objc2-foundation crate instead
+   --> crates/fs/src/fs.rs:457:36
+    |
+457 |                 unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                    ^^^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:457:42
+    |
+457 |                 unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                          ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:460:22
+    |
+460 |             let url: id = msg_send![class!(NSURL), fileURLWithPath: ns_string(path.to_string_lossy().as_ref())];
+    |                      ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:461:24
+    |
+461 |             let array: id = msg_send![class!(NSArray), arrayWithObject: url];
+    |                        ^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:462:28
+    |
+462 |             let workspace: id = msg_send![class!(NSWorkspace), sharedWorkspace];
+    |                            ^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:464:84
+    |
+464 |             let _: id = msg_send![workspace, recycleURLs: array completionHandler: nil];
+    |                                                                                    ^^^
+
+warning: use of deprecated type alias `cocoa::base::id`: use the objc2 crate instead
+   --> crates/fs/src/fs.rs:464:20
+    |
+464 |             let _: id = msg_send![workspace, recycleURLs: array completionHandler: nil];
+    |                    ^^
+
+warning: use of deprecated method `cocoa::foundation::NSString::init_str`: use the objc2-foundation crate instead
+   --> crates/fs/src/fs.rs:457:47
+    |
+457 |                 unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                               ^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSAutoreleasePool::autorelease`: use the objc2-foundation crate instead
+   --> crates/fs/src/fs.rs:457:64
+    |
+457 |                 unsafe { NSString::alloc(nil).init_str(string).autorelease() }
+    |                                                                ^^^^^^^^^^^
+
+warning: use of deprecated associated function `cocoa::foundation::NSProcessInfo::processInfo`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:115:66
+    |
+115 |             let process_info = cocoa::foundation::NSProcessInfo::processInfo(nil);
+    |                                                                  ^^^^^^^^^^^
+    |
+    = note: `#[warn(deprecated)]` on by default
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/client/src/telemetry.rs:115:78
+    |
+115 |             let process_info = cocoa::foundation::NSProcessInfo::processInfo(nil);
+    |                                                                              ^^^
+
+warning: use of deprecated constant `cocoa::base::nil`: use the objc2 crate instead
+   --> crates/client/src/telemetry.rs:111:26
+    |
+111 |         use cocoa::base::nil;
+    |                          ^^^
+
+warning: use of deprecated trait `cocoa::foundation::NSProcessInfo`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:112:32
+    |
+112 |         use cocoa::foundation::NSProcessInfo;
+    |                                ^^^^^^^^^^^^^
+
+warning: use of deprecated method `cocoa::foundation::NSProcessInfo::operatingSystemVersion`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:116:40
+    |
+116 |             let version = process_info.operatingSystemVersion();
+    |                                        ^^^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::majorVersion`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:118:17
+    |
+118 |                 version.majorVersion as usize,
+    |                 ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::minorVersion`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:119:17
+    |
+119 |                 version.minorVersion as usize,
+    |                 ^^^^^^^^^^^^^^^^^^^^
+
+warning: use of deprecated field `cocoa::foundation::NSOperatingSystemVersion::patchVersion`: use the objc2-foundation crate instead
+   --> crates/client/src/telemetry.rs:120:17
+    |
+120 |                 version.patchVersion as usize,
+    |                 ^^^^^^^^^^^^^^^^^^^^
+
+</end details of warnings>
